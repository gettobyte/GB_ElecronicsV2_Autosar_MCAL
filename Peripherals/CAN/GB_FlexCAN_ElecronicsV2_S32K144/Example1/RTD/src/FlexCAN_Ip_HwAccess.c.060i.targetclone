FlexCAN_ConfigCtrlOptions (struct FLEXCAN_Type * pBase, uint32 u32Options)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  _1 = u32Options_17(D) & 32;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetIsoCan (pBase_19(D), 1);
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_SetIsoCan (pBase_19(D), 0);

  <bb 5> :
  _2 = u32Options_17(D) & 64;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase_19(D), 1);
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase_19(D), 0);

  <bb 8> :
  _3 = u32Options_17(D) & 8;
  if (_3 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_SetProtocolException (pBase_19(D), 1);
  goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_SetProtocolException (pBase_19(D), 0);

  <bb 11> :
  _4 = u32Options_17(D) & 2;
  if (_4 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _5 ={v} pBase_19(D)->MCR;
  _6 = _5 & 2048;
  if (_6 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  FlexCAN_CanBitSampling (pBase_19(D), 1);
  goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_CanBitSampling (pBase_19(D), 0);

  <bb 15> :
  _7 = u32Options_17(D) & 4;
  if (_7 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  FlexCAN_SetBusOffAutorecovery (pBase_19(D), 1);
  goto <bb 18>; [INV]

  <bb 17> :
  FlexCAN_SetBusOffAutorecovery (pBase_19(D), 0);

  <bb 18> :
  _8 = u32Options_17(D) & 1;
  if (_8 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  FlexCAN_SetRemoteReqStore (pBase_19(D), 1);
  goto <bb 21>; [INV]

  <bb 20> :
  FlexCAN_SetRemoteReqStore (pBase_19(D), 0);

  <bb 21> :
  _9 = u32Options_17(D) & 16;
  if (_9 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  FlexCAN_SetEdgeFilter (pBase_19(D), 1);
  goto <bb 24>; [INV]

  <bb 23> :
  FlexCAN_SetEdgeFilter (pBase_19(D), 0);

  <bb 24> :
  return;

}


FlexCAN_IsMbOutOfRange (const struct FLEXCAN_Type * pBase, uint8 u8MbIndex, boolean bIsLegacyFifoEn, uint32 u32MaxMbNum)
{
  uint32 u32NumOfMbOccupiedByFiFo;
  uint32 u32NumOfFiFoElement;
  boolean ReturnValue;
  boolean D.7479;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  boolean _22;

  <bb 2> :
  ReturnValue_9 = 0;
  u32NumOfFiFoElement_10 = 0;
  u32NumOfMbOccupiedByFiFo_11 = 0;
  _1 = (unsigned char) u32MaxMbNum_12(D);
  if (u8MbIndex_13(D) >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue_21 = 1;
  goto <bb 8>; [INV]

  <bb 4> :
  if (bIsLegacyFifoEn_14(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _2 ={v} pBase_17(D)->CTRL2;
  _3 = _2 >> 24;
  u32NumOfFiFoElement_18 = _3 & 15;
  _4 = u32NumOfFiFoElement_18 + 1;
  _5 = _4 * 8;
  _6 = _5 / 4;
  u32NumOfMbOccupiedByFiFo_19 = _6 + 5;
  _7 = (long unsigned int) u8MbIndex_13(D);
  if (u32NumOfMbOccupiedByFiFo_19 >= _7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  ReturnValue_20 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  ReturnValue_15 = 0;

  <bb 8> :
  # ReturnValue_8 = PHI <ReturnValue_21(3), ReturnValue_20(6), ReturnValue_15(7), ReturnValue_9(5)>
  _22 = ReturnValue_8;

  <bb 9> :
<L8>:
  return _22;

}


FlexCAN_ReadRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * msgData_32;
  const uint32 * flexcan_mb_data_32;
  const uint32 * flexcan_mb_id;
  const uint32 * flexcan_mb;
  uint32 MbWord;
  uint32 DataByte;
  long unsigned int base.14_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  _Bool _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  const uint32 * _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  uint32 * _30;
  long unsigned int _31;
  long unsigned int _32;

  <bb 2> :
  base.14_1 = (long unsigned int) base_37(D);
  _2 = base.14_1 + 128;
  flexcan_mb_38 = (const uint32 *) _2;
  flexcan_mb_id_39 = flexcan_mb_38 + 4;
  flexcan_mb_data_32_40 = flexcan_mb_38 + 8;
  msgData_32_42 = &rxFifo_41(D)->data;
  _3 ={v} *flexcan_mb_38;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value_44 = _5 & 15;
  can_real_payload_46 = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value_44);
  _6 = rxFifo_41(D) != 0B;
  DevAssert (_6);
  if (can_real_payload_46 > 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  can_real_payload_48 = 8;

  <bb 4> :
  # can_real_payload_34 = PHI <can_real_payload_46(2), can_real_payload_48(3)>
  rxFifo_41(D)->dataLen = can_real_payload_34;
  _7 ={v} *flexcan_mb_38;
  rxFifo_41(D)->cs = _7;
  _8 = rxFifo_41(D)->cs;
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _10 ={v} *flexcan_mb_id_39;
  rxFifo_41(D)->msgId = _10;
  goto <bb 7>; [INV]

  <bb 6> :
  _11 ={v} *flexcan_mb_id_39;
  _12 = _11 >> 18;
  rxFifo_41(D)->msgId = _12;

  <bb 7> :
  _13 ={v} base_37(D)->RXFIR;
  _14 = (unsigned char) _13;
  rxFifo_41(D)->id_hit = _14;
  _15 = rxFifo_41(D)->cs;
  _16 = _15 & 65535;
  rxFifo_41(D)->time_stamp = _16;
  DataByte_55 = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _17 = DataByte_33 >> 2;
  _18 = _17 * 4;
  _19 = flexcan_mb_data_32_40 + _18;
  MbWord_56 ={v} *_19;
  _20 = MbWord_56 >> 24;
  _21 = MbWord_56 >> 8;
  _22 = _21 & 65280;
  _23 = _20 | _22;
  _24 = MbWord_56 << 8;
  _25 = _24 & 16711680;
  _26 = _23 | _25;
  _27 = MbWord_56 << 24;
  _28 = DataByte_33 >> 2;
  _29 = _28 * 4;
  _30 = msgData_32_42 + _29;
  _31 = _26 | _27;
  *_30 = _31;
  DataByte_58 = DataByte_33 + 4;

  <bb 9> :
  # DataByte_33 = PHI <DataByte_55(7), DataByte_58(8)>
  _32 = (long unsigned int) can_real_payload_34;
  if (DataByte_33 < _32)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


FlexCAN_SetRxFifoFilter (struct FLEXCAN_Type * base, Flexcan_Ip_RxFifoIdElementFormatType idFormat, const struct Flexcan_Ip_IdTableType * idFilterTable)
{
  volatile uint32 * FilterTable;
  uint32 Val;
  uint32 Val2;
  uint32 Val1;
  uint32 NumOfFilters;
  uint32 j;
  uint32 i;
  int iftmp.13;
  long unsigned int base.12_1;
  long unsigned int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  const struct Flexcan_Ip_IdTableType * _9;
  _Bool _10;
  long unsigned int _11;
  const struct Flexcan_Ip_IdTableType * _12;
  _Bool _13;
  long unsigned int _14;
  const struct Flexcan_Ip_IdTableType * _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  volatile uint32 * _20;
  long unsigned int _21;
  long unsigned int _22;
  const struct Flexcan_Ip_IdTableType * _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  volatile uint32 * _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  const struct Flexcan_Ip_IdTableType * _36;
  _Bool _37;
  sizetype _38;
  sizetype _39;
  const struct Flexcan_Ip_IdTableType * _40;
  _Bool _41;
  long unsigned int _42;
  const struct Flexcan_Ip_IdTableType * _43;
  _Bool _44;
  long unsigned int _45;
  const struct Flexcan_Ip_IdTableType * _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  volatile uint32 * _52;
  long unsigned int _53;
  long unsigned int _54;
  const struct Flexcan_Ip_IdTableType * _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  volatile uint32 * _60;
  long unsigned int _61;
  sizetype _62;
  sizetype _63;
  const struct Flexcan_Ip_IdTableType * _64;
  _Bool _65;
  long unsigned int _66;
  volatile uint32 * _67;
  long unsigned int _68;
  sizetype _69;
  sizetype _70;
  const struct Flexcan_Ip_IdTableType * _71;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  volatile uint32 * _77;
  long unsigned int _78;
  long unsigned int _79;
  volatile uint32 * _80;
  long unsigned int _81;
  sizetype _82;
  sizetype _83;
  const struct Flexcan_Ip_IdTableType * _84;
  long unsigned int _85;
  long unsigned int _86;
  long unsigned int _87;
  long unsigned int _88;
  long unsigned int _89;
  volatile uint32 * _90;
  long unsigned int _91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  long unsigned int _95;
  long unsigned int _96;
  long unsigned int _97;
  const struct Flexcan_Ip_IdTableType * _98;
  _Bool _99;
  long unsigned int _100;
  const struct Flexcan_Ip_IdTableType * _101;
  long unsigned int _102;
  long unsigned int _103;
  long unsigned int _104;
  long unsigned int _105;
  volatile uint32 * _106;
  long unsigned int _107;
  long unsigned int _108;
  const struct Flexcan_Ip_IdTableType * _109;
  long unsigned int _110;
  long unsigned int _111;
  long unsigned int _112;
  long unsigned int _113;
  volatile uint32 * _114;
  long unsigned int _115;
  sizetype _116;
  sizetype _117;
  const struct Flexcan_Ip_IdTableType * _118;
  _Bool _119;
  long unsigned int _120;
  volatile uint32 * _121;
  long unsigned int _122;
  sizetype _123;
  sizetype _124;
  const struct Flexcan_Ip_IdTableType * _125;
  long unsigned int _126;
  long unsigned int _127;
  long unsigned int _128;
  long unsigned int _129;
  long unsigned int _130;
  long unsigned int _131;
  volatile uint32 * _132;
  long unsigned int _133;
  long unsigned int _134;
  volatile uint32 * _135;
  long unsigned int _136;
  sizetype _137;
  sizetype _138;
  const struct Flexcan_Ip_IdTableType * _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _142;
  long unsigned int _143;
  long unsigned int _144;
  long unsigned int _145;
  volatile uint32 * _146;
  long unsigned int _147;
  sizetype _148;
  sizetype _149;
  const struct Flexcan_Ip_IdTableType * _150;
  _Bool _151;
  long unsigned int _152;
  volatile uint32 * _153;
  long unsigned int _154;
  sizetype _155;
  sizetype _156;
  const struct Flexcan_Ip_IdTableType * _157;
  long unsigned int _158;
  long unsigned int _159;
  long unsigned int _160;
  long unsigned int _161;
  long unsigned int _162;
  long unsigned int _163;
  volatile uint32 * _164;
  long unsigned int _165;
  long unsigned int _166;
  volatile uint32 * _167;
  long unsigned int _168;
  sizetype _169;
  sizetype _170;
  const struct Flexcan_Ip_IdTableType * _171;
  long unsigned int _172;
  long unsigned int _173;
  long unsigned int _174;
  long unsigned int _175;
  long unsigned int _176;
  long unsigned int _177;
  volatile uint32 * _178;
  long unsigned int _179;
  sizetype _180;
  sizetype _181;
  const struct Flexcan_Ip_IdTableType * _182;
  _Bool _183;
  long unsigned int _184;
  volatile uint32 * _185;
  long unsigned int _186;
  sizetype _187;
  sizetype _188;
  const struct Flexcan_Ip_IdTableType * _189;
  long unsigned int _190;
  long unsigned int _191;
  long unsigned int _192;
  long unsigned int _193;
  long unsigned int _194;
  volatile uint32 * _195;
  long unsigned int _196;
  long unsigned int _197;
  volatile uint32 * _198;
  long unsigned int _199;
  sizetype _200;
  sizetype _201;
  const struct Flexcan_Ip_IdTableType * _202;
  long unsigned int _203;
  long unsigned int _204;
  long unsigned int _205;
  long unsigned int _206;
  long unsigned int _207;
  volatile uint32 * _208;
  long unsigned int _209;
  long unsigned int _210;
  long unsigned int _211;
  long unsigned int _212;
  long unsigned int _213;
  int iftmp.13_222;
  int iftmp.13_241;
  int iftmp.13_242;

  <bb 2> :
  Val1_234 = 0;
  Val2_235 = 0;
  Val_236 = 0;
  base.12_1 = (long unsigned int) base_237(D);
  _2 = base.12_1 + 224;
  FilterTable_238 = (volatile uint32 *) _2;
  if (idFilterTable_239(D) != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (idFormat_240(D) == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13_242 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.13_241 = 0;

  <bb 6> :
  # iftmp.13_222 = PHI <iftmp.13_242(4), iftmp.13_241(5)>
  _3 = (_Bool) iftmp.13_222;
  DevAssert (_3);
  _4 ={v} base_237(D)->CTRL2;
  _5 = _4 >> 24;
  NumOfFilters_245 = _5 & 15;
  switch (idFormat_240(D)) <default: <L44> [INV], case 0: <L4> [INV], case 1: <L13> [INV], case 2: <L27> [INV], case 3: <L43> [INV]>

  <bb 7> :
<L4>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _6 ={v} base_237(D)->MCR;
  _7 = _6 & 4294966527;
  base_237(D)->MCR ={v} _7;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  i_284 = 0;
  goto <bb 14>; [INV]

  <bb 8> :
  Val_285 = 0;
  _8 = i_214 * 8;
  _9 = idFilterTable_239(D) + _8;
  _10 = _9->isRemoteFrame;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Val_286 = 2147483648;

  <bb 10> :
  # Val_221 = PHI <Val_285(8), Val_286(9)>
  _11 = i_214 * 8;
  _12 = idFilterTable_239(D) + _11;
  _13 = _12->isExtendedFrame;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Val_288 = Val_221 | 1073741824;
  _14 = i_214 * 8;
  _15 = idFilterTable_239(D) + _14;
  _16 = _15->id;
  _17 = _16 << 1;
  _18 = _17 & 1073741823;
  _19 = i_214 * 4;
  _20 = FilterTable_238 + _19;
  _21 = Val_288 + _18;
  *_20 ={v} _21;
  goto <bb 13>; [INV]

  <bb 12> :
  _22 = i_214 * 8;
  _23 = idFilterTable_239(D) + _22;
  _24 = _23->id;
  _25 = _24 << 19;
  _26 = _25 & 1073217536;
  _27 = i_214 * 4;
  _28 = FilterTable_238 + _27;
  _29 = Val_221 + _26;
  *_28 ={v} _29;

  <bb 13> :
  i_290 = i_214 + 1;

  <bb 14> :
  # i_214 = PHI <i_284(7), i_290(13)>
  _30 = NumOfFilters_245 + 1;
  _31 = _30 * 8;
  if (i_214 < _31)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  goto <bb 48>; [INV]

  <bb 16> :
<L13>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _32 ={v} base_237(D)->MCR;
  _33 = _32 & 4294966527;
  _34 = _33 | 256;
  base_237(D)->MCR ={v} _34;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j_267 = 0;
  i_268 = 0;
  goto <bb 28>; [INV]

  <bb 17> :
  Val1_269 = 0;
  Val2_270 = 0;
  _35 = j_217 * 8;
  _36 = idFilterTable_239(D) + _35;
  _37 = _36->isRemoteFrame;
  if (_37 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Val1_271 = 2147483648;

  <bb 19> :
  # Val1_219 = PHI <Val1_269(17), Val1_271(18)>
  _38 = j_217 + 1;
  _39 = _38 * 8;
  _40 = idFilterTable_239(D) + _39;
  _41 = _40->isRemoteFrame;
  if (_41 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Val2_272 = 32768;

  <bb 21> :
  # Val2_220 = PHI <Val2_270(19), Val2_272(20)>
  _42 = j_217 * 8;
  _43 = idFilterTable_239(D) + _42;
  _44 = _43->isExtendedFrame;
  if (_44 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  Val1_274 = Val1_219 | 1073741824;
  _45 = j_217 * 8;
  _46 = idFilterTable_239(D) + _45;
  _47 = _46->id;
  _48 = _47 >> 15;
  _49 = _48 << 16;
  _50 = _49 & 1073676288;
  _51 = i_215 * 4;
  _52 = FilterTable_238 + _51;
  _53 = Val1_274 + _50;
  *_52 ={v} _53;
  goto <bb 24>; [INV]

  <bb 23> :
  _54 = j_217 * 8;
  _55 = idFilterTable_239(D) + _54;
  _56 = _55->id;
  _57 = _56 << 19;
  _58 = _57 & 1073217536;
  _59 = i_215 * 4;
  _60 = FilterTable_238 + _59;
  _61 = Val1_219 + _58;
  *_60 ={v} _61;

  <bb 24> :
  _62 = j_217 + 1;
  _63 = _62 * 8;
  _64 = idFilterTable_239(D) + _63;
  _65 = _64->isExtendedFrame;
  if (_65 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Val2_277 = Val2_220 | 16384;
  _66 = i_215 * 4;
  _67 = FilterTable_238 + _66;
  _68 ={v} *_67;
  _69 = j_217 + 1;
  _70 = _69 * 8;
  _71 = idFilterTable_239(D) + _70;
  _72 = _71->id;
  _73 = _72 >> 15;
  _74 = _73 & 16383;
  _75 = Val2_277 + _74;
  _76 = i_215 * 4;
  _77 = FilterTable_238 + _76;
  _78 = _68 | _75;
  *_77 ={v} _78;
  goto <bb 27>; [INV]

  <bb 26> :
  _79 = i_215 * 4;
  _80 = FilterTable_238 + _79;
  _81 ={v} *_80;
  _82 = j_217 + 1;
  _83 = _82 * 8;
  _84 = idFilterTable_239(D) + _83;
  _85 = _84->id;
  _86 = _85 << 3;
  _87 = _86 & 16376;
  _88 = Val2_220 + _87;
  _89 = i_215 * 4;
  _90 = FilterTable_238 + _89;
  _91 = _81 | _88;
  *_90 ={v} _91;

  <bb 27> :
  j_279 = j_217 + 2;
  i_280 = i_215 + 1;

  <bb 28> :
  # i_215 = PHI <i_268(16), i_280(27)>
  # j_217 = PHI <j_267(16), j_279(27)>
  _92 = NumOfFilters_245 + 1;
  _93 = _92 * 8;
  if (i_215 < _93)
    goto <bb 17>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 29> :
  goto <bb 48>; [INV]

  <bb 30> :
<L27>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _94 ={v} base_237(D)->MCR;
  _95 = _94 & 4294966527;
  _96 = _95 | 512;
  base_237(D)->MCR ={v} _96;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j_252 = 0;
  i_253 = 0;
  goto <bb 44>; [INV]

  <bb 31> :
  _97 = j_218 * 8;
  _98 = idFilterTable_239(D) + _97;
  _99 = _98->isExtendedFrame;
  if (_99 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  _100 = j_218 * 8;
  _101 = idFilterTable_239(D) + _100;
  _102 = _101->id;
  _103 = _102 >> 21;
  _104 = _103 << 24;
  _105 = i_216 * 4;
  _106 = FilterTable_238 + _105;
  _107 = Val1_234 + _104;
  *_106 ={v} _107;
  goto <bb 34>; [INV]

  <bb 33> :
  _108 = j_218 * 8;
  _109 = idFilterTable_239(D) + _108;
  _110 = _109->id;
  _111 = _110 >> 3;
  _112 = _111 << 24;
  _113 = i_216 * 4;
  _114 = FilterTable_238 + _113;
  _115 = Val1_234 + _112;
  *_114 ={v} _115;

  <bb 34> :
  _116 = j_218 + 1;
  _117 = _116 * 8;
  _118 = idFilterTable_239(D) + _117;
  _119 = _118->isExtendedFrame;
  if (_119 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  _120 = i_216 * 4;
  _121 = FilterTable_238 + _120;
  _122 ={v} *_121;
  _123 = j_218 + 1;
  _124 = _123 * 8;
  _125 = idFilterTable_239(D) + _124;
  _126 = _125->id;
  _127 = _126 >> 21;
  _128 = _127 << 16;
  _129 = _128 & 16711680;
  _130 = Val1_234 + _129;
  _131 = i_216 * 4;
  _132 = FilterTable_238 + _131;
  _133 = _122 | _130;
  *_132 ={v} _133;
  goto <bb 37>; [INV]

  <bb 36> :
  _134 = i_216 * 4;
  _135 = FilterTable_238 + _134;
  _136 ={v} *_135;
  _137 = j_218 + 1;
  _138 = _137 * 8;
  _139 = idFilterTable_239(D) + _138;
  _140 = _139->id;
  _141 = _140 >> 3;
  _142 = _141 << 16;
  _143 = _142 & 16711680;
  _144 = Val1_234 + _143;
  _145 = i_216 * 4;
  _146 = FilterTable_238 + _145;
  _147 = _136 | _144;
  *_146 ={v} _147;

  <bb 37> :
  _148 = j_218 + 2;
  _149 = _148 * 8;
  _150 = idFilterTable_239(D) + _149;
  _151 = _150->isExtendedFrame;
  if (_151 != 0)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 38> :
  _152 = i_216 * 4;
  _153 = FilterTable_238 + _152;
  _154 ={v} *_153;
  _155 = j_218 + 2;
  _156 = _155 * 8;
  _157 = idFilterTable_239(D) + _156;
  _158 = _157->id;
  _159 = _158 >> 21;
  _160 = _159 << 8;
  _161 = _160 & 65535;
  _162 = Val1_234 + _161;
  _163 = i_216 * 4;
  _164 = FilterTable_238 + _163;
  _165 = _154 | _162;
  *_164 ={v} _165;
  goto <bb 40>; [INV]

  <bb 39> :
  _166 = i_216 * 4;
  _167 = FilterTable_238 + _166;
  _168 ={v} *_167;
  _169 = j_218 + 2;
  _170 = _169 * 8;
  _171 = idFilterTable_239(D) + _170;
  _172 = _171->id;
  _173 = _172 >> 3;
  _174 = _173 << 8;
  _175 = _174 & 65535;
  _176 = Val1_234 + _175;
  _177 = i_216 * 4;
  _178 = FilterTable_238 + _177;
  _179 = _168 | _176;
  *_178 ={v} _179;

  <bb 40> :
  _180 = j_218 + 3;
  _181 = _180 * 8;
  _182 = idFilterTable_239(D) + _181;
  _183 = _182->isExtendedFrame;
  if (_183 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _184 = i_216 * 4;
  _185 = FilterTable_238 + _184;
  _186 ={v} *_185;
  _187 = j_218 + 3;
  _188 = _187 * 8;
  _189 = idFilterTable_239(D) + _188;
  _190 = _189->id;
  _191 = _190 >> 21;
  _192 = _191 & 255;
  _193 = Val1_234 + _192;
  _194 = i_216 * 4;
  _195 = FilterTable_238 + _194;
  _196 = _186 | _193;
  *_195 ={v} _196;
  goto <bb 43>; [INV]

  <bb 42> :
  _197 = i_216 * 4;
  _198 = FilterTable_238 + _197;
  _199 ={v} *_198;
  _200 = j_218 + 3;
  _201 = _200 * 8;
  _202 = idFilterTable_239(D) + _201;
  _203 = _202->id;
  _204 = _203 >> 3;
  _205 = _204 & 255;
  _206 = Val1_234 + _205;
  _207 = i_216 * 4;
  _208 = FilterTable_238 + _207;
  _209 = _199 | _206;
  *_208 ={v} _209;

  <bb 43> :
  j_262 = j_218 + 4;
  i_263 = i_216 + 1;

  <bb 44> :
  # i_216 = PHI <i_253(30), i_263(43)>
  # j_218 = PHI <j_252(30), j_262(43)>
  _210 = NumOfFilters_245 + 1;
  _211 = _210 * 8;
  if (i_216 < _211)
    goto <bb 31>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  goto <bb 48>; [INV]

  <bb 46> :
<L43>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _212 ={v} base_237(D)->MCR;
  _213 = _212 | 768;
  base_237(D)->MCR ={v} _213;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  goto <bb 48>; [INV]

  <bb 47> :
<L44>:

  <bb 48> :
  return;

}


FlexCAN_SetOperationMode (struct FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  switch (mode_12(D)) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  _1 ={v} base_14(D)->CTRL1;
  _2 = _1 & 4294967287;
  base_14(D)->CTRL1 ={v} _2;
  _3 ={v} base_14(D)->CTRL1;
  _4 = _3 & 4294963199;
  base_14(D)->CTRL1 ={v} _4;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _5 ={v} base_14(D)->CTRL1;
  _6 = _5 | 8;
  base_14(D)->CTRL1 ={v} _6;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _7 ={v} base_14(D)->CTRL1;
  _8 = _7 | 4096;
  base_14(D)->CTRL1 ={v} _8;
  _9 ={v} base_14(D)->CTRL1;
  _10 = _9 & 4294967287;
  base_14(D)->CTRL1 ={v} _10;
  FlexCAN_SetSelfReception (base_14(D), 1);
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


FlexCAN_SetMaxMsgBuffNum (struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  Flexcan_Ip_StatusType Status;
  uint32 ValEndRam;
  uint32 ValEndMb;
  uint8 Can_Real_Payload;
  uint8 Arbitration_Field_Size;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  const uint32 * ValEndMbPointer;
  const uint32 * RAM;
  uint32 DataByte;
  uint8 MsgBuffIdx;
  Flexcan_Ip_StatusType D.7428;
  long unsigned int base.8_1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int ValEndMbPointer.9_7;
  long unsigned int _8;
  long unsigned int _9;
  const uint32 * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  volatile uint8 * _21;
  long unsigned int _22;
  unsigned char MsgBuffIdx.10_23;
  long unsigned int _24;
  Flexcan_Ip_StatusType _68;

  <bb 2> :
  base.8_1 = (long unsigned int) base_33(D);
  _2 = base.8_1 + 128;
  RAM_34 = (const uint32 *) _2;
  ValEndMbPointer_35 = 0B;
  Flexcan_Mb_36 = 0B;
  Flexcan_Mb_Id_37 = 0B;
  Flexcan_Mb_Data_38 = 0B;
  Arbitration_Field_Size_39 = 8;
  _3 = maxMsgBuffNum_40(D) + 4294967295;
  Can_Real_Payload_43 = FlexCAN_GetMbPayloadSize (base_33(D), _3);
  ValEndMb_44 = 0;
  ValEndRam_45 = 0;
  Status_46 = 0;
  _4 = maxMsgBuffNum_40(D) != 0;
  DevAssert (_4);
  _5 = maxMsgBuffNum_40(D) + 4294967295;
  ValEndMbPointer_49 = FlexCAN_GetMsgBuffRegion (base_33(D), _5);
  _6 = (long unsigned int) Can_Real_Payload_43;
  ValEndMbPointer.9_7 = (long unsigned int) ValEndMbPointer_49;
  _8 = _6 + ValEndMbPointer.9_7;
  _9 = (long unsigned int) Arbitration_Field_Size_39;
  ValEndMb_50 = _8 + _9;
  _10 = RAM_34 + 512;
  ValEndRam_51 = (uint32) _10;
  if (ValEndMb_50 > ValEndRam_51)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _11 = FlexCAN_GetMaxMbNum (base_33(D));
  if (maxMsgBuffNum_40(D) > _11)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status_53 = 4;

  <bb 5> :
  # Status_27 = PHI <Status_46(3), Status_53(4)>
  if (Status_27 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _12 ={v} base_33(D)->MCR;
  _13 = _12 & 4294967168;
  _14 = maxMsgBuffNum_40(D) + 4294967295;
  _15 = _14 & 127;
  _16 = _13 | _15;
  base_33(D)->MCR ={v} _16;
  _17 ={v} base_33(D)->MCR;
  _18 = _17 & 536870912;
  if (_18 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  MsgBuffIdx_55 = 0;
  goto <bb 12>; [INV]

  <bb 8> :
  _19 = (long unsigned int) MsgBuffIdx_25;
  Flexcan_Mb_57 = FlexCAN_GetMsgBuffRegion (base_33(D), _19);
  Flexcan_Mb_Id_58 = Flexcan_Mb_57 + 4;
  Flexcan_Mb_Data_59 = Flexcan_Mb_57 + 8;
  *Flexcan_Mb_57 ={v} 0;
  *Flexcan_Mb_Id_58 ={v} 0;
  _20 = (long unsigned int) MsgBuffIdx_25;
  Can_Real_Payload_63 = FlexCAN_GetMbPayloadSize (base_33(D), _20);
  DataByte_64 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _21 = Flexcan_Mb_Data_59 + DataByte_26;
  *_21 ={v} 0;
  DataByte_67 = DataByte_26 + 1;

  <bb 10> :
  # DataByte_26 = PHI <DataByte_64(8), DataByte_67(9)>
  _22 = (long unsigned int) Can_Real_Payload_63;
  if (DataByte_26 < _22)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  MsgBuffIdx.10_23 = MsgBuffIdx_25;
  MsgBuffIdx_65 = MsgBuffIdx.10_23 + 1;

  <bb 12> :
  # MsgBuffIdx_25 = PHI <MsgBuffIdx_55(7), MsgBuffIdx_65(11)>
  _24 = (long unsigned int) MsgBuffIdx_25;
  if (maxMsgBuffNum_40(D) > _24)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _68 = Status_27;

  <bb 14> :
<L13>:
  return _68;

}


FlexCAN_SetTxMsgBuff (volatile uint32 * const pMbAddr, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId, const uint8 * msgData, const boolean isRemote)
{
  const uint32 * MsgData_32;
  volatile uint32 * Flexcan_Mb_Data_32;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  uint8 Payload_Size;
  uint8 Dlc_Value;
  uint32 DataByte;
  uint32 Flexcan_Mb_Config;
  _Bool _1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  const uint32 * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  const uint32 * _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  const uint32 * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  const uint32 * _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  volatile uint32 * _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  const uint8 * _34;
  long unsigned int _35;
  volatile uint8 * _36;
  unsigned char _37;
  long unsigned int _38;
  long unsigned int _39;
  volatile uint8 * _40;
  unsigned char _41;
  long unsigned int _42;
  <unnamed type> _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  <unnamed type> _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _60;
  _Bool _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;
  _Bool _69;
  long unsigned int _70;
  long unsigned int _71;

  <bb 2> :
  Flexcan_Mb_Config_87 = 0;
  Flexcan_Mb_89 = pMbAddr_88(D);
  Flexcan_Mb_Id_90 = Flexcan_Mb_89 + 4;
  Flexcan_Mb_Data_91 = Flexcan_Mb_89 + 8;
  Flexcan_Mb_Data_32_92 = Flexcan_Mb_89 + 8;
  MsgData_32_94 = msgData_93(D);
  _1 = cs_95(D) != 0B;
  DevAssert (_1);
  *Flexcan_Mb_89 ={v} 134217728;
  *Flexcan_Mb_Id_90 ={v} 0;
  _2 = cs_95(D)->dataLen;
  _3 = (unsigned char) _2;
  Dlc_Value_101 = FlexCAN_ComputeDLCValue (_3);
  if (msgData_93(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  DataByte_102 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = DataByte_77 >> 2;
  _5 = _4 * 4;
  _6 = MsgData_32_94 + _5;
  _7 = *_6;
  _8 = _7 >> 24;
  _9 = DataByte_77 >> 2;
  _10 = _9 * 4;
  _11 = MsgData_32_94 + _10;
  _12 = *_11;
  _13 = _12 >> 8;
  _14 = _13 & 65280;
  _15 = _8 | _14;
  _16 = DataByte_77 >> 2;
  _17 = _16 * 4;
  _18 = MsgData_32_94 + _17;
  _19 = *_18;
  _20 = _19 << 8;
  _21 = _20 & 16711680;
  _22 = _15 | _21;
  _23 = DataByte_77 >> 2;
  _24 = _23 * 4;
  _25 = MsgData_32_94 + _24;
  _26 = *_25;
  _27 = _26 << 24;
  _28 = DataByte_77 >> 2;
  _29 = _28 * 4;
  _30 = Flexcan_Mb_Data_32_92 + _29;
  _31 = _22 | _27;
  *_30 ={v} _31;
  DataByte_111 = DataByte_77 + 4;

  <bb 5> :
  # DataByte_77 = PHI <DataByte_102(3), DataByte_111(4)>
  _32 = cs_95(D)->dataLen;
  _33 = _32 & 4294967292;
  if (DataByte_77 < _33)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  goto <bb 8>; [INV]

  <bb 7> :
  _34 = msgData_93(D) + DataByte_78;
  _35 = DataByte_78 ^ 3;
  _36 = Flexcan_Mb_Data_91 + _35;
  _37 = *_34;
  *_36 ={v} _37;
  DataByte_109 = DataByte_78 + 1;

  <bb 8> :
  # DataByte_78 = PHI <DataByte_77(6), DataByte_109(7)>
  _38 = cs_95(D)->dataLen;
  if (DataByte_78 < _38)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Payload_Size_104 = FlexCAN_ComputePayloadSize (Dlc_Value_101);
  DataByte_105 = cs_95(D)->dataLen;
  goto <bb 11>; [INV]

  <bb 10> :
  _39 = DataByte_79 ^ 3;
  _40 = Flexcan_Mb_Data_91 + _39;
  _41 = cs_95(D)->fd_padding;
  *_40 ={v} _41;
  DataByte_107 = DataByte_79 + 1;

  <bb 11> :
  # DataByte_79 = PHI <DataByte_105(9), DataByte_107(10)>
  _42 = (long unsigned int) Payload_Size_104;
  if (DataByte_79 < _42)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _43 = cs_95(D)->msgIdType;
  if (_43 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _44 ={v} *Flexcan_Mb_Id_90;
  _45 = _44 & 3758096384;
  *Flexcan_Mb_Id_90 ={v} _45;
  _46 ={v} *Flexcan_Mb_Id_90;
  _47 = msgId_113(D) & 536870911;
  _48 = _46 | _47;
  *Flexcan_Mb_Id_90 ={v} _48;
  Flexcan_Mb_Config_115 = Flexcan_Mb_Config_87 | 6291456;

  <bb 14> :
  # Flexcan_Mb_Config_72 = PHI <Flexcan_Mb_Config_87(12), Flexcan_Mb_Config_115(13)>
  _49 = cs_95(D)->msgIdType;
  if (_49 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _50 ={v} *Flexcan_Mb_Id_90;
  _51 = _50 & 3758358527;
  *Flexcan_Mb_Id_90 ={v} _51;
  _52 ={v} *Flexcan_Mb_Id_90;
  _53 = msgId_113(D) << 18;
  _54 = _53 & 536608768;
  _55 = _52 | _54;
  *Flexcan_Mb_Id_90 ={v} _55;
  Flexcan_Mb_Config_118 = Flexcan_Mb_Config_72 & 4288675839;

  <bb 16> :
  # Flexcan_Mb_Config_73 = PHI <Flexcan_Mb_Config_72(14), Flexcan_Mb_Config_118(15)>
  Flexcan_Mb_Config_119 = Flexcan_Mb_Config_73 & 4293984255;
  _56 = (long unsigned int) Dlc_Value_101;
  _57 = _56 << 16;
  _58 = _57 & 983040;
  Flexcan_Mb_Config_120 = Flexcan_Mb_Config_119 | _58;
  _59 = cs_95(D)->code;
  if (_59 != 15)
    goto <bb 17>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 17> :
  _60 = cs_95(D)->code;
  if (_60 == 28)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Flexcan_Mb_Config_123 = Flexcan_Mb_Config_120 | 1048576;
  goto <bb 21>; [INV]

  <bb 19> :
  if (isRemote_121(D) != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Flexcan_Mb_Config_122 = Flexcan_Mb_Config_120 | 1048576;

  <bb 21> :
  # Flexcan_Mb_Config_74 = PHI <Flexcan_Mb_Config_123(18), Flexcan_Mb_Config_120(19), Flexcan_Mb_Config_122(20)>
  Flexcan_Mb_Config_124 = Flexcan_Mb_Config_74 & 4043309055;
  _61 = cs_95(D)->fd_enable;
  if (_61 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  _62 = cs_95(D)->code;
  _63 = _62 << 24;
  _64 = _63 & 251658240;
  _65 = Flexcan_Mb_Config_124 | _64;
  Flexcan_Mb_Config_126 = _65 | 2147483648;
  Flexcan_Mb_Config_127 = Flexcan_Mb_Config_126 & 4293918719;
  goto <bb 24>; [INV]

  <bb 23> :
  _66 = cs_95(D)->code;
  _67 = _66 << 24;
  _68 = _67 & 251658240;
  Flexcan_Mb_Config_125 = Flexcan_Mb_Config_124 | _68;

  <bb 24> :
  # Flexcan_Mb_Config_75 = PHI <Flexcan_Mb_Config_127(22), Flexcan_Mb_Config_125(23)>
  _69 = cs_95(D)->enable_brs;
  if (_69 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Flexcan_Mb_Config_128 = Flexcan_Mb_Config_75 | 1073741824;

  <bb 26> :
  # Flexcan_Mb_Config_76 = PHI <Flexcan_Mb_Config_75(24), Flexcan_Mb_Config_128(25)>
  _70 ={v} *Flexcan_Mb_89;
  _71 = Flexcan_Mb_Config_76 | _70;
  *Flexcan_Mb_89 ={v} _71;

  <bb 27> :
  return;

}


FlexCAN_GetMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, struct Flexcan_Ip_MsgBuffType * msgBuff)
{
  uint8 Payload_Size;
  uint8 Flexcan_Mb_Dlc_Value;
  uint32 MbWord;
  uint32 * MsgBuff_Data_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint8 * Flexcan_Mb_Data;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 i;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  _Bool _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned int _15;
  unsigned int _16;
  const uint32 * _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  unsigned char _26;
  unsigned int _27;
  unsigned int _28;
  uint32 * _29;
  long unsigned int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  unsigned char _34;
  sizetype _35;
  const uint8 * _36;
  int _37;
  unsigned char _38;
  unsigned char i.7_39;

  <bb 2> :
  Flexcan_Mb_51 = FlexCAN_GetMsgBuffRegion (base_48(D), msgBuffIdx_49(D));
  Flexcan_Mb_Id_52 = Flexcan_Mb_51 + 4;
  Flexcan_Mb_Data_53 = Flexcan_Mb_51 + 8;
  Flexcan_Mb_Data_32_54 = Flexcan_Mb_51 + 8;
  MsgBuff_Data_32_56 = &msgBuff_55(D)->data;
  _1 ={v} *Flexcan_Mb_51;
  _2 = _1 >> 16;
  _3 = (unsigned char) _2;
  Flexcan_Mb_Dlc_Value_57 = _3 & 15;
  Payload_Size_59 = FlexCAN_ComputePayloadSize (Flexcan_Mb_Dlc_Value_57);
  _4 = msgBuff_55(D) != 0B;
  DevAssert (_4);
  _5 = FlexCAN_GetMbPayloadSize (base_48(D), msgBuffIdx_49(D));
  if (Payload_Size_59 > _5)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Payload_Size_63 = FlexCAN_GetMbPayloadSize (base_48(D), msgBuffIdx_49(D));

  <bb 4> :
  # Payload_Size_42 = PHI <Payload_Size_59(2), Payload_Size_63(3)>
  msgBuff_55(D)->dataLen = Payload_Size_42;
  _6 ={v} *Flexcan_Mb_51;
  msgBuff_55(D)->cs = _6;
  _7 = msgBuff_55(D)->cs;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 ={v} *Flexcan_Mb_Id_52;
  msgBuff_55(D)->msgId = _9;
  goto <bb 7>; [INV]

  <bb 6> :
  _10 ={v} *Flexcan_Mb_Id_52;
  _11 = _10 >> 18;
  msgBuff_55(D)->msgId = _11;

  <bb 7> :
  _12 = msgBuff_55(D)->cs;
  _13 = _12 & 65535;
  msgBuff_55(D)->time_stamp = _13;
  i_69 = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _14 = i_40 >> 2;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = Flexcan_Mb_Data_32_54 + _16;
  MbWord_72 ={v} *_17;
  _18 = MbWord_72 >> 24;
  _19 = MbWord_72 >> 8;
  _20 = _19 & 65280;
  _21 = _18 | _20;
  _22 = MbWord_72 << 8;
  _23 = _22 & 16711680;
  _24 = _21 | _23;
  _25 = MbWord_72 << 24;
  _26 = i_40 >> 2;
  _27 = (unsigned int) _26;
  _28 = _27 * 4;
  _29 = MsgBuff_Data_32_56 + _28;
  _30 = _24 | _25;
  *_29 = _30;
  i_74 = i_40 + 4;

  <bb 9> :
  # i_40 = PHI <i_69(7), i_74(8)>
  _31 = (unsigned int) i_40;
  _32 = (unsigned int) Payload_Size_42;
  _33 = _32 & 4294967292;
  if (_31 < _33)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  goto <bb 12>; [INV]

  <bb 11> :
  _34 = i_41 ^ 3;
  _35 = (sizetype) _34;
  _36 = Flexcan_Mb_Data_53 + _35;
  _37 = (int) i_41;
  _38 ={v} *_36;
  msgBuff_55(D)->data[_37] = _38;
  i.7_39 = i_41;
  i_71 = i.7_39 + 1;

  <bb 12> :
  # i_41 = PHI <i_40(10), i_71(11)>
  if (i_41 < Payload_Size_42)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_GetMsgBuffTimestamp (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * Flexcan_Mb;
  uint32 TimeStamp;
  uint32 D.7396;
  long unsigned int _1;
  uint32 _9;

  <bb 2> :
  TimeStamp_2 = 0;
  Flexcan_Mb_7 = FlexCAN_GetMsgBuffRegion (base_4(D), msgBuffIdx_5(D));
  _1 ={v} *Flexcan_Mb_7;
  TimeStamp_8 = _1 & 65535;
  _9 = TimeStamp_8;

  <bb 3> :
<L0>:
  return _9;

}


FlexCAN_SetRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId)
{
  volatile uint32 * flexcan_mb_id;
  volatile uint32 * flexcan_mb;
  _Bool _1;
  <unnamed type> _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;

  <bb 2> :
  flexcan_mb_36 = FlexCAN_GetMsgBuffRegion (base_33(D), msgBuffIdx_34(D));
  flexcan_mb_id_37 = flexcan_mb_36 + 4;
  _1 = cs_38(D) != 0B;
  DevAssert (_1);
  *flexcan_mb_36 ={v} 0;
  *flexcan_mb_id_37 ={v} 0;
  _2 = cs_38(D)->msgIdType;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 ={v} *flexcan_mb_36;
  _4 = _3 | 2097152;
  *flexcan_mb_36 ={v} _4;
  _5 ={v} *flexcan_mb_36;
  _6 = _5 & 4290772991;
  *flexcan_mb_36 ={v} _6;
  _7 ={v} *flexcan_mb_id_37;
  _8 = _7 & 3758096384;
  *flexcan_mb_id_37 ={v} _8;
  _9 ={v} *flexcan_mb_id_37;
  _10 = msgId_45(D) & 536870911;
  _11 = _9 | _10;
  *flexcan_mb_id_37 ={v} _11;

  <bb 4> :
  _12 = cs_38(D)->msgIdType;
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _13 ={v} *flexcan_mb_36;
  _14 = _13 & 4288675839;
  *flexcan_mb_36 ={v} _14;
  _15 ={v} *flexcan_mb_id_37;
  _16 = _15 & 3758358527;
  *flexcan_mb_id_37 ={v} _16;
  _17 ={v} *flexcan_mb_id_37;
  _18 = msgId_45(D) << 18;
  _19 = _18 & 536608768;
  _20 = _17 | _19;
  *flexcan_mb_id_37 ={v} _20;

  <bb 6> :
  _21 = cs_38(D)->code;
  if (_21 != 15)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _22 ={v} *flexcan_mb_36;
  _23 = _22 & 4043309055;
  *flexcan_mb_36 ={v} _23;
  _24 ={v} *flexcan_mb_36;
  _25 = cs_38(D)->code;
  _26 = _25 << 24;
  _27 = _26 & 251658240;
  _28 = _24 | _27;
  *flexcan_mb_36 ={v} _28;

  <bb 8> :
  return;

}


FlexCAN_EnableInterrupts (struct FLEXCAN_Type * pBase, uint8 u8Instance)
{
  int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = (int) u8Instance_3(D);
  _2 ={v} FlexCAN_Ip_au32ImaskBuff[_1][0];
  pBase_5(D)->IMASK1 ={v} _2;
  return;

}


FlexCAN_DisableInterrupts (struct FLEXCAN_Type * pBase)
{
  <bb 2> :
  pBase_2(D)->IMASK1 ={v} 0;
  return;

}


FLEXCAN_ClearMsgBuffIntCmd (struct FLEXCAN_Type * pBase, uint8 u8Instance, uint32 mb_idx, boolean bIsIntActive)
{
  uint32 temp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;

  <bb 2> :
  _1 = mb_idx_10(D) & 31;
  temp_11 = 1 << _1;
  if (mb_idx_10(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _2 ={v} pBase_14(D)->IMASK1;
  _3 = ~temp_11;
  _4 = (int) u8Instance_15(D);
  _5 = _2 & _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] ={v} _5;
  if (bIsIntActive_17(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) u8Instance_15(D);
  _7 ={v} FlexCAN_Ip_au32ImaskBuff[_6][0];
  pBase_14(D)->IMASK1 ={v} _7;

  <bb 5> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 6> :
  return;

}


FlexCAN_SetMsgBuffIntCmd (struct FLEXCAN_Type * base, uint8 u8Instance, uint32 msgBuffIdx, boolean enable, boolean bIsIntActive)
{
  Flexcan_Ip_StatusType stat;
  uint32 temp;
  Flexcan_Ip_StatusType D.7384;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;
  int _13;
  long unsigned int _14;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  stat_17 = 0;
  _1 = msgBuffIdx_18(D) & 31;
  temp_19 = 1 << _1;
  if (msgBuffIdx_18(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (enable_21(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _2 = (int) u8Instance_23(D);
  _3 ={v} FlexCAN_Ip_au32ImaskBuff[_2][0];
  _4 = (int) u8Instance_23(D);
  _5 = temp_19 | _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] ={v} _5;
  if (bIsIntActive_30(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = (int) u8Instance_23(D);
  _7 ={v} FlexCAN_Ip_au32ImaskBuff[_6][0];
  base_25(D)->IMASK1 ={v} _7;

  <bb 6> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 8>; [INV]

  <bb 7> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _8 = (int) u8Instance_23(D);
  _9 ={v} FlexCAN_Ip_au32ImaskBuff[_8][0];
  _10 = ~temp_19;
  _11 = (int) u8Instance_23(D);
  _12 = _9 & _10;
  FlexCAN_Ip_au32ImaskBuff[_11][0] ={v} _12;
  _13 = (int) u8Instance_23(D);
  _14 ={v} FlexCAN_Ip_au32ImaskBuff[_13][0];
  base_25(D)->IMASK1 ={v} _14;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 8> :
  _33 = stat_17;

  <bb 9> :
<L7>:
  return _33;

}


FlexCAN_LockRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * flexcan_mb;
  long unsigned int vol.6;
  long unsigned int vol.6_6;

  <bb 2> :
  flexcan_mb_5 = FlexCAN_GetMsgBuffRegion (base_2(D), msgBuffIdx_3(D));
  vol.6_6 ={v} *flexcan_mb_5;
  return;

}


FlexCAN_GetMbPayloadSize (const struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  uint8 mb_size;
  uint8 i;
  uint8 maxMbBlockNum;
  uint8 can_real_payload;
  uint32 ramBlockSize;
  uint8 arbitration_field_size;
  uint8 D.7374;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  unsigned char i.5_5;
  uint8 _27;

  <bb 2> :
  arbitration_field_size_12 = 8;
  ramBlockSize_13 = 512;
  can_real_payload_14 = 8;
  maxMbBlockNum_15 = 0;
  i_16 = 0;
  mb_size_17 = 0;
  i_18 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  can_real_payload_22 = FlexCAN_GetPayloadSize (base_20(D), i_9);
  mb_size_23 = can_real_payload_22 + arbitration_field_size_12;
  _1 = (long unsigned int) mb_size_23;
  _2 = ramBlockSize_13 / _1;
  _3 = (unsigned char) _2;
  maxMbBlockNum_24 = maxMbBlockNum_8 + _3;
  _4 = (long unsigned int) maxMbBlockNum_24;
  if (maxMsgBuffNum_25(D) < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  i.5_5 = i_9;
  i_26 = i.5_5 + 1;

  <bb 6> :
  # can_real_payload_6 = PHI <can_real_payload_14(2), can_real_payload_22(5)>
  # maxMbBlockNum_8 = PHI <maxMbBlockNum_15(2), maxMbBlockNum_24(5)>
  # i_9 = PHI <i_18(2), i_26(5)>
  if (i_9 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # can_real_payload_7 = PHI <can_real_payload_22(4), can_real_payload_6(6)>
  _27 = can_real_payload_7;

  <bb 8> :
<L5>:
  return _27;

}


FlexCAN_GetPayloadSize (const struct FLEXCAN_Type * base, uint8 mbdsrIdx)
{
  uint32 payloadSize;
  uint8 D.7370;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint8 _17;

  <bb 2> :
  payloadSize_10 = 8;
  _1 = FlexCAN_IsFDAvailable (base_12(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) mbdsrIdx_14(D);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  _3 ={v} base_12(D)->FDCTRL;
  _4 = _3 >> 16;
  _5 = _4 & 3;
  payloadSize_15 = 8 << _5;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  _6 ={v} base_12(D)->FDCTRL;
  _7 = _6 >> 16;
  _8 = _7 & 3;
  payloadSize_16 = 8 << _8;

  <bb 6> :
  # payloadSize_9 = PHI <payloadSize_10(2), payloadSize_15(4), payloadSize_16(5)>
  _17 = (uint8) payloadSize_9;

  <bb 7> :
<L5>:
  return _17;

}


FlexCAN_SetPayloadSize (struct FLEXCAN_Type * base, const struct Flexcan_Ip_PayloadSizeType * payloadSize)
{
  uint32 tmp;
  int iftmp.3;
  _Bool _1;
  <unnamed type> _2;
  _Bool _3;
  _Bool _4;
  <unnamed type> _5;
  long unsigned int _6;
  int iftmp.3_7;
  int iftmp.3_13;
  int iftmp.3_14;

  <bb 2> :
  _1 = FlexCAN_IsFDEnabled (base_10(D));
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = payloadSize_12(D)->payloadBlock0;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_14 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3_13 = 0;

  <bb 6> :
  # iftmp.3_7 = PHI <iftmp.3_14(4), iftmp.3_13(5)>
  _3 = (_Bool) iftmp.3_7;
  DevAssert (_3);
  _4 = FlexCAN_IsFDEnabled (base_10(D));
  if (_4 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  tmp_17 ={v} base_10(D)->FDCTRL;
  tmp_18 = tmp_17 & 4294770687;
  _5 = payloadSize_12(D)->payloadBlock0;
  _6 = _5 << 16;
  tmp_19 = tmp_18 | _6;
  base_10(D)->FDCTRL ={v} tmp_19;

  <bb 8> :
  return;

}


FlexCAN_IsFDAvailable (const struct FLEXCAN_Type * base)
{
  boolean returnValue;
  static struct FLEXCAN_Type * const flexcanBase[1] = {1073889280B};
  uint32 i;
  boolean D.7354;
  struct FLEXCAN_Type * _1;
  boolean _11;

  <bb 2> :
  i_4 = 0;
  returnValue_5 = 0;
  i_6 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = flexcanBase[i_2];
  if (base_8(D) == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue_10 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  i_9 = i_2 + 1;

  <bb 6> :
  # i_2 = PHI <i_6(2), i_9(5)>
  if (i_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # returnValue_3 = PHI <returnValue_10(4), returnValue_5(6)>
  _11 = returnValue_3;

  <bb 8> :
<L5>:
  return _11;

}


FlexCAN_EnableRxFifo (struct FLEXCAN_Type * base, uint32 numOfFilters)
{
  Flexcan_Ip_StatusType stat;
  uint16 noOfMbx;
  uint32 i;
  Flexcan_Ip_StatusType D.7350;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base_17(D));
  noOfMbx_19 = (uint16) _1;
  stat_20 = 0;
  _2 ={v} base_17(D)->MCR;
  _3 = _2 & 2048;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  stat_21 = 1;

  <bb 4> :
  # stat_13 = PHI <stat_20(2), stat_21(3)>
  if (stat_13 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _4 ={v} base_17(D)->MCR;
  _5 = _4 | 536870912;
  base_17(D)->MCR ={v} _5;
  _6 ={v} base_17(D)->CTRL2;
  _7 = _6 & 4043309055;
  _8 = numOfFilters_23(D) << 24;
  _9 = _8 & 251658240;
  _10 = _7 | _9;
  base_17(D)->CTRL2 ={v} _10;
  base_17(D)->RXFGMASK ={v} 4294967295;
  i_26 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  base_17(D)->RXIMR[i_12] ={v} 536870911;
  i_28 = i_12 + 1;

  <bb 7> :
  # i_12 = PHI <i_26(5), i_28(6)>
  _11 = (long unsigned int) noOfMbx_19;
  if (i_12 < _11)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _29 = stat_13;

  <bb 9> :
<L7>:
  return _29;

}


FlexCAN_Init (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7343;
  long unsigned int D.7336;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  _Bool _8;
  long unsigned int _25;
  Flexcan_Ip_StatusType _42;

  <bb 2> :
  timeStart = 0;
  timeElapsed_16 = 0;
  uS2Ticks_18 = OsIf_MicrosToTicks (10000, 0);
  returnResult_19 = 0;
  _1 ={v} base_20(D)->MCR;
  _2 = _1 | 33554432;
  base_20(D)->MCR ={v} _2;
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  _25 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_26 = _25 + timeElapsed_9;
  if (timeElapsed_26 >= uS2Ticks_18)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnResult_27 = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_9 = PHI <timeElapsed_16(2), timeElapsed_26(3)>
  _4 ={v} base_20(D)->MCR;
  _5 = _4 & 33554432;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # returnResult_10 = PHI <returnResult_27(4), returnResult_19(5)>
  if (returnResult_10 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _6 ={v} base_20(D)->MCR;
  _7 = _6 | 4096;
  base_20(D)->MCR ={v} _7;
  FlexCAN_ClearRAM (base_20(D));
  base_20(D)->RXMGMASK ={v} 4294967295;
  base_20(D)->RX14MASK ={v} 4294967295;
  base_20(D)->RX15MASK ={v} 4294967295;
  base_20(D)->IMASK1 ={v} 0;
  base_20(D)->IFLAG1 ={v} 4294967295;
  base_20(D)->ESR1 ={v} 3866630;
  base_20(D)->CTRL1 ={v} 0;
  base_20(D)->CTRL2 ={v} 1048576;
  base_20(D)->CBT ={v} 0;
  _8 = FlexCAN_IsFDAvailable (base_20(D));
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  base_20(D)->FDCBT ={v} 0;
  base_20(D)->FDCTRL ={v} 2147500288;

  <bb 9> :
  _42 = returnResult_10;
  timeStart ={v} {CLOBBER};

  <bb 10> :
<L10>:
  return _42;

}


FlexCAN_SetErrIntCmd (struct FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
  uint32 temp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;

  <bb 2> :
  temp_19 = errType_18(D);
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06 ();
  if (enable_22(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  if (errType_18(D) == 16385)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 ={v} base_23(D)->CTRL2;
  _2 = _1 | 2147483648;
  base_23(D)->CTRL2 ={v} _2;
  goto <bb 14>; [INV]

  <bb 5> :
  if (errType_18(D) == 1024)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (errType_18(D) == 2048)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _3 ={v} base_23(D)->MCR;
  _4 = _3 | 2097152;
  base_23(D)->MCR ={v} _4;

  <bb 8> :
  _5 ={v} base_23(D)->CTRL1;
  _6 = temp_19 | _5;
  base_23(D)->CTRL1 ={v} _6;
  goto <bb 14>; [INV]

  <bb 9> :
  if (errType_18(D) == 16385)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _7 ={v} base_23(D)->CTRL2;
  _8 = _7 & 2147483647;
  base_23(D)->CTRL2 ={v} _8;
  goto <bb 14>; [INV]

  <bb 11> :
  _9 ={v} base_23(D)->CTRL1;
  _10 = ~temp_19;
  _11 = _9 & _10;
  base_23(D)->CTRL1 ={v} _11;
  temp_25 ={v} base_23(D)->CTRL1;
  _12 = temp_25 & 1024;
  if (_12 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _13 = temp_25 & 2048;
  if (_13 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _14 ={v} base_23(D)->MCR;
  _15 = _14 & 4292870143;
  base_23(D)->MCR ={v} _15;

  <bb 14> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06 ();
  return;

}


FlexCAN_Disable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7317;
  long unsigned int D.7314;
  long unsigned int _1;
  signed int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _25;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  timeStart = 0;
  timeElapsed_14 = 0;
  uS2Ticks_16 = OsIf_MicrosToTicks (10000, 0);
  returnResult_17 = 0;
  _1 ={v} base_18(D)->MCR;
  _2 = (signed int) _1;
  if (_2 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05 ();
  _3 ={v} base_18(D)->MCR;
  _4 = _3 | 2147483648;
  base_18(D)->MCR ={v} _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 6>; [INV]

  <bb 4> :
  _25 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_26 = _25 + timeElapsed_8;
  if (timeElapsed_26 >= uS2Ticks_16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  returnResult_27 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  # timeElapsed_8 = PHI <timeElapsed_14(3), timeElapsed_26(4)>
  _6 ={v} base_18(D)->MCR;
  _7 = _6 & 1048576;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # returnResult_9 = PHI <returnResult_17(2), returnResult_27(5), returnResult_17(6)>
  _28 = returnResult_9;
  timeStart ={v} {CLOBBER};

  <bb 8> :
<L8>:
  return _28;

}


FlexCAN_ExitFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7309;
  long unsigned int D.7306;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _26;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  timeStart = 0;
  timeElapsed_14 = 0;
  uS2Ticks_16 = OsIf_MicrosToTicks (10000, 0);
  returnValue_17 = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04 ();
  _1 ={v} base_19(D)->MCR;
  _2 = _1 & 4026531839;
  base_19(D)->MCR ={v} _2;
  _3 ={v} base_19(D)->MCR;
  _4 = _3 & 3221225471;
  base_19(D)->MCR ={v} _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 5>; [INV]

  <bb 3> :
  _26 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_27 = _26 + timeElapsed_8;
  if (timeElapsed_27 >= uS2Ticks_16)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue_28 = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_8 = PHI <timeElapsed_14(2), timeElapsed_27(3)>
  _6 ={v} base_19(D)->MCR;
  _7 = _6 & 16777216;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # returnValue_9 = PHI <returnValue_28(4), returnValue_17(5)>
  _29 = returnValue_9;
  timeStart ={v} {CLOBBER};

  <bb 7> :
<L6>:
  return _29;

}


FlexCAN_Enable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7303;
  long unsigned int D.7300;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _23;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  timeStart = 0;
  timeElapsed_12 = 0;
  uS2Ticks_14 = OsIf_MicrosToTicks (10000, 0);
  returnValue_15 = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03 ();
  _1 ={v} base_17(D)->MCR;
  _2 = _1 & 2147483647;
  base_17(D)->MCR ={v} _2;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03 ();
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  _23 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_24 = _23 + timeElapsed_6;
  if (timeElapsed_24 >= uS2Ticks_14)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue_25 = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_6 = PHI <timeElapsed_12(2), timeElapsed_24(3)>
  _4 ={v} base_17(D)->MCR;
  _5 = _4 & 16777216;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # returnValue_7 = PHI <returnValue_25(4), returnValue_15(5)>
  _26 = returnValue_7;
  timeStart ={v} {CLOBBER};

  <bb 7> :
<L6>:
  return _26;

}


FlexCAN_EnterFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7297;
  long unsigned int D.7294;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  signed int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _32;
  Flexcan_Ip_StatusType _35;

  <bb 2> :
  timeStart = 0;
  timeElapsed_19 = 0;
  uS2Ticks_21 = OsIf_MicrosToTicks (10000, 0);
  returnResult_22 = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02 ();
  _1 ={v} base_24(D)->MCR;
  _2 = _1 | 1073741824;
  base_24(D)->MCR ={v} _2;
  _3 ={v} base_24(D)->MCR;
  _4 = _3 | 268435456;
  base_24(D)->MCR ={v} _4;
  _5 ={v} base_24(D)->MCR;
  _6 = (signed int) _5;
  if (_6 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 ={v} base_24(D)->MCR;
  _8 = _7 & 2147483647;
  base_24(D)->MCR ={v} _8;

  <bb 4> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02 ();
  _9 = OsIf_GetCounter (0);
  timeStart = _9;
  goto <bb 7>; [INV]

  <bb 5> :
  _32 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_33 = _32 + timeElapsed_12;
  if (timeElapsed_33 >= uS2Ticks_21)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  returnResult_34 = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  # timeElapsed_12 = PHI <timeElapsed_19(4), timeElapsed_33(5)>
  _10 ={v} base_24(D)->MCR;
  _11 = _10 & 16777216;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # returnResult_13 = PHI <returnResult_34(6), returnResult_22(7)>
  _35 = returnResult_13;
  timeStart ={v} {CLOBBER};

  <bb 9> :
<L8>:
  return _35;

}


FlexCAN_GetMaxMbNum (const struct FLEXCAN_Type * base)
{
  static const uint32 maxMbNum[3] = {32, 16, 16};
  static struct FLEXCAN_Type * const flexcanBase[3] = {1073889280B, 1073893376B, 1073917952B};
  uint32 ret;
  uint32 i;
  uint32 D.7290;
  struct FLEXCAN_Type * _1;
  uint32 _7;

  <bb 2> :
  ret_5 = 0;
  i_6 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = flexcanBase[i_2];
  if (base_9(D) == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ret_10 = maxMbNum[i_2];

  <bb 5> :
  # ret_3 = PHI <ret_4(3), ret_10(4)>
  i_11 = i_2 + 1;

  <bb 6> :
  # i_2 = PHI <i_6(2), i_11(5)>
  # ret_4 = PHI <ret_5(2), ret_3(5)>
  if (i_2 <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _7 = ret_4;

  <bb 8> :
<L5>:
  return _7;

}


FlexCAN_GetMsgBuffRegion (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  volatile uint32 * pAddressRet;
  volatile uint32 * RAM;
  uint8 payload_size;
  uint32 mb_index;
  uint8 maxMbNum;
  uint8 i;
  uint32 msgBuffIdxBackup;
  uint32 ramBlockOffset;
  uint32 ramBlockSize;
  uint8 mb_size;
  uint8 arbitration_field_size;
  volatile uint32 * D.7286;
  long unsigned int base.1_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char i.2_7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  volatile uint32 * _47;

  <bb 2> :
  arbitration_field_size_23 = 8;
  mb_size_24 = 0;
  ramBlockSize_25 = 512;
  ramBlockOffset_26 = 0;
  msgBuffIdxBackup_28 = msgBuffIdx_27(D);
  i_29 = 0;
  maxMbNum_30 = 0;
  mb_index_31 = 0;
  payload_size_32 = 0;
  base.1_1 = (long unsigned int) base_33(D);
  _2 = base.1_1 + 128;
  RAM_34 = (volatile uint32 *) _2;
  pAddressRet_35 = 0B;
  i_36 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  payload_size_39 = FlexCAN_GetPayloadSize (base_33(D), i_18);
  mb_size_40 = payload_size_39 + arbitration_field_size_23;
  _3 = (long unsigned int) mb_size_40;
  _4 = ramBlockSize_25 / _3;
  maxMbNum_41 = (uint8) _4;
  _5 = (long unsigned int) maxMbNum_41;
  if (msgBuffIdxBackup_17 < _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  ramBlockOffset_42 = ramBlockOffset_16 + 128;
  _6 = (long unsigned int) maxMbNum_41;
  msgBuffIdxBackup_43 = msgBuffIdxBackup_17 - _6;
  i.2_7 = i_18;
  i_44 = i.2_7 + 1;

  <bb 6> :
  # mb_size_14 = PHI <mb_size_24(2), mb_size_40(5)>
  # ramBlockOffset_16 = PHI <ramBlockOffset_26(2), ramBlockOffset_42(5)>
  # msgBuffIdxBackup_17 = PHI <msgBuffIdxBackup_28(2), msgBuffIdxBackup_43(5)>
  # i_18 = PHI <i_36(2), i_44(5)>
  # maxMbNum_19 = PHI <maxMbNum_30(2), maxMbNum_41(5)>
  if (i_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # mb_size_15 = PHI <mb_size_40(4), mb_size_14(6)>
  # maxMbNum_20 = PHI <maxMbNum_41(4), maxMbNum_19(6)>
  _8 = (long unsigned int) maxMbNum_20;
  _9 = msgBuffIdxBackup_17 % _8;
  _10 = mb_size_15 >> 2;
  _11 = (long unsigned int) _10;
  _12 = _9 * _11;
  mb_index_45 = ramBlockOffset_16 + _12;
  _13 = mb_index_45 * 4;
  pAddressRet_46 = RAM_34 + _13;
  _47 = pAddressRet_46;

  <bb 8> :
<L5>:
  return _47;

}


FlexCAN_ComputePayloadSize (uint8 dlcValue)
{
  uint8 ret;
  uint8 D.7282;
  int _1;
  uint8 _13;

  <bb 2> :
  ret_3 = 8;
  if (dlcValue_4(D) <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ret_12 = dlcValue_4(D);
  goto <bb 13>; [INV]

  <bb 4> :
  _1 = (int) dlcValue_4(D);
  switch (_1) <default: <L9> [INV], case 9: <L2> [INV], case 10: <L3> [INV], case 11: <L4> [INV], case 12: <L5> [INV], case 13: <L6> [INV], case 14: <L7> [INV], case 15: <L8> [INV]>

  <bb 5> :
<L2>:
  ret_11 = 12;
  goto <bb 13>; [INV]

  <bb 6> :
<L3>:
  ret_10 = 16;
  goto <bb 13>; [INV]

  <bb 7> :
<L4>:
  ret_9 = 20;
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  ret_8 = 24;
  goto <bb 13>; [INV]

  <bb 9> :
<L6>:
  ret_7 = 32;
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  ret_6 = 48;
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  ret_5 = 64;
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  # ret_2 = PHI <ret_12(3), ret_11(5), ret_10(6), ret_9(7), ret_8(8), ret_7(9), ret_6(10), ret_5(11), ret_3(12)>
  _13 = ret_2;

  <bb 14> :
<L12>:
  return _13;

}


FlexCAN_ClearRAM (struct FLEXCAN_Type * base)
{
  volatile uint32 * RAM;
  uint32 RXIMR_size;
  uint32 RAM_size;
  uint32 databyte;
  long unsigned int _1;
  long unsigned int base.0_2;
  long unsigned int _3;
  long unsigned int _4;
  volatile uint32 * _5;
  long unsigned int _6;
  volatile uint32 * _7;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base_13(D));
  RAM_size_15 = _1 * 4;
  RXIMR_size_17 = FlexCAN_GetMaxMbNum (base_13(D));
  base.0_2 = (long unsigned int) base_13(D);
  _3 = base.0_2 + 128;
  RAM_18 = (volatile uint32 *) _3;
  databyte_19 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = databyte_8 * 4;
  _5 = RAM_18 + _4;
  *_5 ={v} 0;
  databyte_25 = databyte_8 + 1;

  <bb 4> :
  # databyte_8 = PHI <databyte_19(2), databyte_25(3)>
  if (databyte_8 < RAM_size_15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  RAM_20 = &base_13(D)->RXIMR;
  databyte_21 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = databyte_9 * 4;
  _7 = RAM_20 + _6;
  *_7 ={v} 0;
  databyte_23 = databyte_9 + 1;

  <bb 7> :
  # databyte_9 = PHI <databyte_21(5), databyte_23(6)>
  if (databyte_9 < RXIMR_size_17)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


FlexCAN_ComputeDLCValue (uint8 payloadSize)
{
  static const uint8 payload_code[65] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\t\t\t\n\n\n\n\v\v\v\v\f\f\f\f\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
  uint32 ret;
  uint8 D.7277;
  int _1;
  unsigned char _2;
  uint8 _8;

  <bb 2> :
  ret_4 = 255;
  if (payloadSize_5(D) <= 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) payloadSize_5(D);
  _2 = payload_code[_1];
  ret_7 = (uint32) _2;

  <bb 4> :
  # ret_3 = PHI <ret_4(2), ret_7(3)>
  _8 = (uint8) ret_3;

  <bb 5> :
<L3>:
  return _8;

}


FlexCAN_CanBitSampling (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.18;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.18_4;
  long unsigned int iftmp.18_8;
  long unsigned int iftmp.18_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967167;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.18_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.18_8 = 0;

  <bb 5> :
  # iftmp.18_4 = PHI <iftmp.18_9(3), iftmp.18_8(4)>
  _3 = iftmp.18_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


FlexCAN_SetEdgeFilter (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.21;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.21_4;
  long unsigned int iftmp.21_8;
  long unsigned int iftmp.21_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294965247;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.21_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21_8 = 2048;

  <bb 5> :
  # iftmp.21_4 = PHI <iftmp.21_9(3), iftmp.21_8(4)>
  _3 = iftmp.21_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_SetBusOffAutorecovery (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.19;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.19_4;
  long unsigned int iftmp.19_8;
  long unsigned int iftmp.19_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967231;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.19_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.19_8 = 64;

  <bb 5> :
  # iftmp.19_4 = PHI <iftmp.19_9(3), iftmp.19_8(4)>
  _3 = iftmp.19_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


FlexCAN_SetRemoteReqStore (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.20;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.20_4;
  long unsigned int iftmp.20_8;
  long unsigned int iftmp.20_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20_9 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20_8 = 0;

  <bb 5> :
  # iftmp.20_4 = PHI <iftmp.20_9(3), iftmp.20_8(4)>
  _3 = iftmp.20_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_SetProtocolException (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.17;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.17_4;
  long unsigned int iftmp.17_8;
  long unsigned int iftmp.17_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294950911;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.17_9 = 16384;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.17_8 = 0;

  <bb 5> :
  # iftmp.17_4 = PHI <iftmp.17_9(3), iftmp.17_8(4)>
  _3 = iftmp.17_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_SetEntireFrameArbitrationFieldComparison (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.16;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.16_4;
  long unsigned int iftmp.16_8;
  long unsigned int iftmp.16_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294901759;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16_9 = 65536;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16_8 = 0;

  <bb 5> :
  # iftmp.16_4 = PHI <iftmp.16_9(3), iftmp.16_8(4)>
  _3 = iftmp.16_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_SetIsoCan (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.15;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.15_4;
  long unsigned int iftmp.15_8;
  long unsigned int iftmp.15_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294963199;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15_9 = 4096;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15_8 = 0;

  <bb 5> :
  # iftmp.15_4 = PHI <iftmp.15_9(3), iftmp.15_8(4)>
  _3 = iftmp.15_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.7366;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->MCR;
  _2 = _1 & 2048;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.11;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.11_4;
  long unsigned int iftmp.11_8;
  long unsigned int iftmp.11_9;

  <bb 2> :
  _1 ={v} base_6(D)->MCR;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_8 = 131072;

  <bb 5> :
  # iftmp.11_4 = PHI <iftmp.11_9(3), iftmp.11_8(4)>
  _3 = iftmp.11_4 | _2;
  base_6(D)->MCR ={v} _3;
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.4_1;

  <bb 2> :
  x.4_1 ={v} x;
  if (x.4_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


