Parsed function:Power_Ip_CM4_DisableDeepSleep
Parsed function:Power_Ip_CM4_EnableDeepSleep
Parsed function:Power_Ip_CM4_EnableSleepOnExit
Parsed function:Power_Ip_CM4_DisableSleepOnExit
Dump after hash based groups
Congruence classes: 5 (unique hash values: 5), with total: 5 items
Class size histogram [num of members]: number of classe number of classess
[1]: 5 classes


Dump after WPA based types groups
Congruence classes: 5 (unique hash values: 5), with total: 5 items
Class size histogram [num of members]: number of classe number of classess
[1]: 5 classes


Worklist has been filled with: 1
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 5 (unique hash values: 5), with total: 5 items
Class size histogram [num of members]: number of classe number of classess
[1]: 5 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 5 (unique hash values: 5), with total: 5 items
Class size histogram [num of members]: number of classe number of classess
[1]: 5 classes


Worklist has been filled with: 1
Address reference subdivision created: 0 new classes.
Congruence classes: 5 (unique hash values: 5), with total: 5 items
Class size histogram [num of members]: number of classe number of classess
[1]: 5 classes



Item count: 5
Congruent classes before: 5, after: 5
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

Power_Ip_CM4_DisableDeepSleep ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.6_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.6_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.6_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 & 4294967291;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.6_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_EnableDeepSleep ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.4_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.4_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.4_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 | 4;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.4_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_EnableSleepOnExit ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.2_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.2_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.2_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 | 2;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.2_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_DisableSleepOnExit ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.0_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.0_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.0_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 & 4294967293;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.0_1->SCR ={v} TempValue_4;
  return;

}


