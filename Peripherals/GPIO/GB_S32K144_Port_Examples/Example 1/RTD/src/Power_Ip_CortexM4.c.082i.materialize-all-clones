Power_Ip_CM4_DisableDeepSleep ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.6_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.6_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.6_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 & 4294967291;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.6_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_EnableDeepSleep ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.4_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.4_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.4_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 | 4;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.4_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_EnableSleepOnExit ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.2_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.2_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.2_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 | 2;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.2_1->SCR ={v} TempValue_4;
  return;

}


Power_Ip_CM4_DisableSleepOnExit ()
{
  uint32 TempValue;
  struct Power_Ip_CM4_Type * Power_Ip_pxCM4.0_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.0_1 = Power_Ip_pxCM4;
  TempValue_3 ={v} Power_Ip_pxCM4.0_1->SCR;
  # DEBUG TempValue => TempValue_3
  # DEBUG BEGIN_STMT
  TempValue_4 = TempValue_3 & 4294967293;
  # DEBUG TempValue => TempValue_4
  # DEBUG BEGIN_STMT
  Power_Ip_pxCM4.0_1->SCR ={v} TempValue_4;
  return;

}


