Clock_Ip_Command (const struct Clock_Ip_ClockConfigType * Config, Clock_Ip_CommandType Command)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  switch (Command_2(D)) <default: <L5> [INV], case 1: <L1> [INV], case 2: <L0> [INV], case 4: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Clock_Ip_SpecificPlatformInitClock (Config_4(D));
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  DisableSafeClock (Config_4(D));
  # DEBUG BEGIN_STMT

  <bb 6> :
<L5>:
  return;

}


Clock_Ip_ClockPowerModeChangeNotification (Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.0_1;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _2;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigVlprMode.1_3;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.2_4;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _5;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigVlprMode.3_6;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.4_7;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _8;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigVlprMode.5_9;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.6_10;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _11;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigVlprMode.7_12;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.8_13;
  void (*<T55d>) (Clock_Ip_NameType) _14;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.9_15;
  <unnamed type> _16;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.10_17;
  void (*<T55d>) (Clock_Ip_NameType) _18;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.11_19;
  <unnamed type> _20;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.12_21;
  void (*<T55d>) (Clock_Ip_NameType) _22;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.13_23;
  <unnamed type> _24;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.14_25;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _26;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.15_27;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.16_28;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _29;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.17_30;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.18_31;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _32;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.19_33;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.20_34;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _35;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.21_36;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.22_37;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _38;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.23_39;
  <unnamed type> _40;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.24_41;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _42;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigRunMode.25_43;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.26_44;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _45;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigRunMode.27_46;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.28_47;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _48;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigRunMode.29_49;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.30_50;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _51;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigRunMode.31_52;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.32_53;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _54;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.33_55;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.34_56;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _57;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.35_58;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.36_59;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _60;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.37_61;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.38_62;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _63;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.39_64;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.40_65;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _66;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.41_67;
  <unnamed type> _68;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsHsrunClockSelector.42_69;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _70;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigHsrunMode.43_71;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreHsrunClockDivider.44_72;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _73;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigHsrunMode.45_74;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusHsrunClockDivider.46_75;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _76;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigHsrunMode.47_77;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowHsrunClockDivider.48_78;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _79;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigHsrunMode.49_80;

  <bb 2> :
  # DEBUG BEGIN_STMT
  switch (PowerMode_82(D)) <default: <L12> [INV], case 0: <L4> [INV], case 1 ... 2: <L0> [INV], case 3: <L7> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsRunClockSelector.0_1 = Clock_Ip_pxScsRunClockSelector;
  _2 = Clock_Ip_pxScsRunClockSelector.0_1->Set;
  Clock_Ip_pxScsConfigVlprMode.1_3 = Clock_Ip_pxScsConfigVlprMode;
  _2 (Clock_Ip_pxScsConfigVlprMode.1_3);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreRunClockDivider.2_4 = Clock_Ip_pxCoreRunClockDivider;
  _5 = Clock_Ip_pxCoreRunClockDivider.2_4->Set;
  Clock_Ip_pxCoreConfigVlprMode.3_6 = Clock_Ip_pxCoreConfigVlprMode;
  _5 (Clock_Ip_pxCoreConfigVlprMode.3_6);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusRunClockDivider.4_7 = Clock_Ip_pxBusRunClockDivider;
  _8 = Clock_Ip_pxBusRunClockDivider.4_7->Set;
  Clock_Ip_pxBusConfigVlprMode.5_9 = Clock_Ip_pxBusConfigVlprMode;
  _8 (Clock_Ip_pxBusConfigVlprMode.5_9);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowRunClockDivider.6_10 = Clock_Ip_pxSlowRunClockDivider;
  _11 = Clock_Ip_pxSlowRunClockDivider.6_10->Set;
  Clock_Ip_pxSlowConfigVlprMode.7_12 = Clock_Ip_pxSlowConfigVlprMode;
  _11 (Clock_Ip_pxSlowConfigVlprMode.7_12);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.8_13 = Clock_Ip_pxSpllClock;
  _14 = Clock_Ip_pxSpllClock.8_13->Disable;
  Clock_Ip_pxSpllConfig.9_15 = Clock_Ip_pxSpllConfig;
  _16 = Clock_Ip_pxSpllConfig.9_15->Name;
  _14 (_16);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.10_17 = Clock_Ip_pxSoscClock;
  _18 = Clock_Ip_pxSoscClock.10_17->Disable;
  Clock_Ip_pxSoscConfig.11_19 = Clock_Ip_pxSoscConfig;
  _20 = Clock_Ip_pxSoscConfig.11_19->Name;
  _18 (_20);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.12_21 = Clock_Ip_pxFircClock;
  _22 = Clock_Ip_pxFircClock.12_21->Disable;
  Clock_Ip_pxFircConfig.13_23 = Clock_Ip_pxFircConfig;
  _24 = Clock_Ip_pxFircConfig.13_23->Name;
  _22 (_24);
  goto <bb 9>; [INV]

  <bb 5> :
<L4>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.14_25 = Clock_Ip_pxFircClock;
  _26 = Clock_Ip_pxFircClock.14_25->Enable;
  Clock_Ip_pxFircConfig.15_27 = Clock_Ip_pxFircConfig;
  _26 (Clock_Ip_pxFircConfig.15_27);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.16_28 = Clock_Ip_pxSoscClock;
  _29 = Clock_Ip_pxSoscClock.16_28->Enable;
  Clock_Ip_pxSoscConfig.17_30 = Clock_Ip_pxSoscConfig;
  _29 (Clock_Ip_pxSoscConfig.17_30);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.18_31 = Clock_Ip_pxSoscClock;
  _32 = Clock_Ip_pxSoscClock.18_31->Complete;
  Clock_Ip_pxSoscConfig.19_33 = Clock_Ip_pxSoscConfig;
  _32 (Clock_Ip_pxSoscConfig.19_33);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.20_34 = Clock_Ip_pxSpllClock;
  _35 = Clock_Ip_pxSpllClock.20_34->Enable;
  Clock_Ip_pxSpllConfig.21_36 = Clock_Ip_pxSpllConfig;
  _35 (Clock_Ip_pxSpllConfig.21_36);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.22_37 = Clock_Ip_pxSpllClock;
  _38 = Clock_Ip_pxSpllClock.22_37->Complete;
  Clock_Ip_pxSpllConfig.23_39 = Clock_Ip_pxSpllConfig;
  _40 = Clock_Ip_pxSpllConfig.23_39->Name;
  _38 (_40);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsRunClockSelector.24_41 = Clock_Ip_pxScsRunClockSelector;
  _42 = Clock_Ip_pxScsRunClockSelector.24_41->Set;
  Clock_Ip_pxScsConfigRunMode.25_43 = Clock_Ip_pxScsConfigRunMode;
  _42 (Clock_Ip_pxScsConfigRunMode.25_43);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreRunClockDivider.26_44 = Clock_Ip_pxCoreRunClockDivider;
  _45 = Clock_Ip_pxCoreRunClockDivider.26_44->Set;
  Clock_Ip_pxCoreConfigRunMode.27_46 = Clock_Ip_pxCoreConfigRunMode;
  _45 (Clock_Ip_pxCoreConfigRunMode.27_46);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusRunClockDivider.28_47 = Clock_Ip_pxBusRunClockDivider;
  _48 = Clock_Ip_pxBusRunClockDivider.28_47->Set;
  Clock_Ip_pxBusConfigRunMode.29_49 = Clock_Ip_pxBusConfigRunMode;
  _48 (Clock_Ip_pxBusConfigRunMode.29_49);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowRunClockDivider.30_50 = Clock_Ip_pxSlowRunClockDivider;
  _51 = Clock_Ip_pxSlowRunClockDivider.30_50->Set;
  Clock_Ip_pxSlowConfigRunMode.31_52 = Clock_Ip_pxSlowConfigRunMode;
  _51 (Clock_Ip_pxSlowConfigRunMode.31_52);
  goto <bb 9>; [INV]

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.32_53 = Clock_Ip_pxFircClock;
  _54 = Clock_Ip_pxFircClock.32_53->Enable;
  Clock_Ip_pxFircConfig.33_55 = Clock_Ip_pxFircConfig;
  _54 (Clock_Ip_pxFircConfig.33_55);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.34_56 = Clock_Ip_pxSoscClock;
  _57 = Clock_Ip_pxSoscClock.34_56->Enable;
  Clock_Ip_pxSoscConfig.35_58 = Clock_Ip_pxSoscConfig;
  _57 (Clock_Ip_pxSoscConfig.35_58);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.36_59 = Clock_Ip_pxSoscClock;
  _60 = Clock_Ip_pxSoscClock.36_59->Complete;
  Clock_Ip_pxSoscConfig.37_61 = Clock_Ip_pxSoscConfig;
  _60 (Clock_Ip_pxSoscConfig.37_61);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.38_62 = Clock_Ip_pxSpllClock;
  _63 = Clock_Ip_pxSpllClock.38_62->Enable;
  Clock_Ip_pxSpllConfig.39_64 = Clock_Ip_pxSpllConfig;
  _63 (Clock_Ip_pxSpllConfig.39_64);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.40_65 = Clock_Ip_pxSpllClock;
  _66 = Clock_Ip_pxSpllClock.40_65->Complete;
  Clock_Ip_pxSpllConfig.41_67 = Clock_Ip_pxSpllConfig;
  _68 = Clock_Ip_pxSpllConfig.41_67->Name;
  _66 (_68);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsHsrunClockSelector.42_69 = Clock_Ip_pxScsHsrunClockSelector;
  _70 = Clock_Ip_pxScsHsrunClockSelector.42_69->Set;
  Clock_Ip_pxScsConfigHsrunMode.43_71 = Clock_Ip_pxScsConfigHsrunMode;
  _70 (Clock_Ip_pxScsConfigHsrunMode.43_71);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreHsrunClockDivider.44_72 = Clock_Ip_pxCoreHsrunClockDivider;
  _73 = Clock_Ip_pxCoreHsrunClockDivider.44_72->Set;
  Clock_Ip_pxCoreConfigHsrunMode.45_74 = Clock_Ip_pxCoreConfigHsrunMode;
  _73 (Clock_Ip_pxCoreConfigHsrunMode.45_74);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusHsrunClockDivider.46_75 = Clock_Ip_pxBusHsrunClockDivider;
  _76 = Clock_Ip_pxBusHsrunClockDivider.46_75->Set;
  Clock_Ip_pxBusConfigHsrunMode.47_77 = Clock_Ip_pxBusConfigHsrunMode;
  _76 (Clock_Ip_pxBusConfigHsrunMode.47_77);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowHsrunClockDivider.48_78 = Clock_Ip_pxSlowHsrunClockDivider;
  _79 = Clock_Ip_pxSlowHsrunClockDivider.48_78->Set;
  Clock_Ip_pxSlowConfigHsrunMode.49_80 = Clock_Ip_pxSlowConfigHsrunMode;
  _79 (Clock_Ip_pxSlowConfigHsrunMode.49_80);

  <bb 9> :
<L12>:
  return;

}


Clock_Ip_ClockInitializeObjects ()
{
  static boolean Clock_Ip_bObjsAreInitialized = 0;
  _Bool Clock_Ip_bObjsAreInitialized.50_1;
  _Bool _2;
  unsigned char _3;
  int _4;
  const struct Clock_Ip_PllCallbackType * _5;
  unsigned char _6;
  int _7;
  const struct Clock_Ip_ExtOscCallbackType * _8;
  unsigned char _9;
  int _10;
  const struct Clock_Ip_IntOscCallbackType * _11;
  unsigned char _12;
  int _13;
  const struct Clock_Ip_SelectorCallbackType * _14;
  unsigned char _15;
  int _16;
  const struct Clock_Ip_SelectorCallbackType * _17;
  unsigned char _18;
  int _19;
  const struct Clock_Ip_DividerCallbackType * _20;
  unsigned char _21;
  int _22;
  const struct Clock_Ip_DividerCallbackType * _23;
  unsigned char _24;
  int _25;
  const struct Clock_Ip_DividerCallbackType * _26;
  unsigned char _27;
  int _28;
  const struct Clock_Ip_DividerCallbackType * _29;
  unsigned char _30;
  int _31;
  const struct Clock_Ip_DividerCallbackType * _32;
  unsigned char _33;
  int _34;
  const struct Clock_Ip_DividerCallbackType * _35;
  const struct Clock_Ip_IrcoscConfigType * _36;
  const struct Clock_Ip_XoscConfigType * _37;
  const struct Clock_Ip_PllConfigType * _38;
  const struct Clock_Ip_SelectorConfigType * _39;
  const struct Clock_Ip_SelectorConfigType * _40;
  const struct Clock_Ip_SelectorConfigType * _41;
  const struct Clock_Ip_DividerConfigType * _42;
  const struct Clock_Ip_DividerConfigType * _43;
  const struct Clock_Ip_DividerConfigType * _44;
  const struct Clock_Ip_DividerConfigType * _45;
  const struct Clock_Ip_DividerConfigType * _46;
  const struct Clock_Ip_DividerConfigType * _47;
  const struct Clock_Ip_DividerConfigType * _48;
  const struct Clock_Ip_DividerConfigType * _49;
  const struct Clock_Ip_DividerConfigType * _50;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjsAreInitialized.50_1 = Clock_Ip_bObjsAreInitialized;
  _2 = ~Clock_Ip_bObjsAreInitialized.50_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjsAreInitialized = 1;
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_au8PllCallbackIndex[1];
  _4 = (int) _3;
  _5 = &Clock_Ip_axPllCallbacks[_4];
  Clock_Ip_pxSpllClock = _5;
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_au8XoscCallbackIndex[1];
  _7 = (int) _6;
  _8 = &Clock_Ip_axExtOscCallbacks[_7];
  Clock_Ip_pxSoscClock = _8;
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _10 = (int) _9;
  _11 = &Clock_Ip_axIntOscCallbacks[_10];
  Clock_Ip_pxFircClock = _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_au8SelectorCallbackIndex[5];
  _13 = (int) _12;
  _14 = &Clock_Ip_axSelectorCallbacks[_13];
  Clock_Ip_pxScsRunClockSelector = _14;
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_au8SelectorCallbackIndex[7];
  _16 = (int) _15;
  _17 = &Clock_Ip_axSelectorCallbacks[_16];
  Clock_Ip_pxScsHsrunClockSelector = _17;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_au8DividerCallbackIndex[6];
  _19 = (int) _18;
  _20 = &Clock_Ip_axDividerCallbacks[_19];
  Clock_Ip_pxCoreRunClockDivider = _20;
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_au8DividerCallbackIndex[8];
  _22 = (int) _21;
  _23 = &Clock_Ip_axDividerCallbacks[_22];
  Clock_Ip_pxCoreHsrunClockDivider = _23;
  # DEBUG BEGIN_STMT
  _24 = Clock_Ip_au8DividerCallbackIndex[9];
  _25 = (int) _24;
  _26 = &Clock_Ip_axDividerCallbacks[_25];
  Clock_Ip_pxBusRunClockDivider = _26;
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_au8DividerCallbackIndex[11];
  _28 = (int) _27;
  _29 = &Clock_Ip_axDividerCallbacks[_28];
  Clock_Ip_pxBusHsrunClockDivider = _29;
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_au8DividerCallbackIndex[12];
  _31 = (int) _30;
  _32 = &Clock_Ip_axDividerCallbacks[_31];
  Clock_Ip_pxSlowRunClockDivider = _32;
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_au8DividerCallbackIndex[14];
  _34 = (int) _33;
  _35 = &Clock_Ip_axDividerCallbacks[_34];
  Clock_Ip_pxSlowHsrunClockDivider = _35;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _36 = getFircConfig ();
  Clock_Ip_pxFircConfig = _36;
  # DEBUG BEGIN_STMT
  _37 = getSoscConfig ();
  Clock_Ip_pxSoscConfig = _37;
  # DEBUG BEGIN_STMT
  _38 = getSpllConfig ();
  Clock_Ip_pxSpllConfig = _38;
  # DEBUG BEGIN_STMT
  _39 = getSelectorConfig (25);
  Clock_Ip_pxScsConfigRunMode = _39;
  # DEBUG BEGIN_STMT
  _40 = getSelectorConfig (26);
  Clock_Ip_pxScsConfigVlprMode = _40;
  # DEBUG BEGIN_STMT
  _41 = getSelectorConfig (27);
  Clock_Ip_pxScsConfigHsrunMode = _41;
  # DEBUG BEGIN_STMT
  _42 = getCoreDividerConfig (29);
  Clock_Ip_pxCoreConfigRunMode = _42;
  # DEBUG BEGIN_STMT
  _43 = getCoreDividerConfig (30);
  Clock_Ip_pxCoreConfigVlprMode = _43;
  # DEBUG BEGIN_STMT
  _44 = getCoreDividerConfig (31);
  Clock_Ip_pxCoreConfigHsrunMode = _44;
  # DEBUG BEGIN_STMT
  _45 = getBusDividerConfig (33);
  Clock_Ip_pxBusConfigRunMode = _45;
  # DEBUG BEGIN_STMT
  _46 = getBusDividerConfig (34);
  Clock_Ip_pxBusConfigVlprMode = _46;
  # DEBUG BEGIN_STMT
  _47 = getBusDividerConfig (35);
  Clock_Ip_pxBusConfigHsrunMode = _47;
  # DEBUG BEGIN_STMT
  _48 = getSlowDividerConfig (37);
  Clock_Ip_pxSlowConfigRunMode = _48;
  # DEBUG BEGIN_STMT
  _49 = getSlowDividerConfig (38);
  Clock_Ip_pxSlowConfigVlprMode = _49;
  # DEBUG BEGIN_STMT
  _50 = getSlowDividerConfig (39);
  Clock_Ip_pxSlowConfigHsrunMode = _50;
  return;

}


getSlowDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.75_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.76_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.77_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.78_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  struct SCG_Type * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  const struct Clock_Ip_DividerConfigType * _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_25 = 0B;
  # DEBUG ReturnValue => ReturnValue_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DividerConfigIndex_26 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_26
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (Name_27(D)) <default: <L20> [INV], case 37: <L0> [INV], case 38: <L1> [INV], case 39: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_30 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_30
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_29 = 1;
  # DEBUG DividerConfigIndex => DividerConfigIndex_29
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_28 = 2;
  # DEBUG DividerConfigIndex => DividerConfigIndex_28
  # DEBUG BEGIN_STMT

  <bb 6> :
  # DividerConfigIndex_22 = PHI <DividerConfigIndex_30(3), DividerConfigIndex_29(4), DividerConfigIndex_28(5), DividerConfigIndex_26(2)>
<L20>:
  # DEBUG DividerConfigIndex => DividerConfigIndex_22
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.75_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.75_1 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Index_32 = 0;
  # DEBUG Index => Index_32
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.76_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.76_2->Dividers[Index_23].Name;
  if (Name_27(D) == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.77_4 = Clock_Ip_apConfig;
  ReturnValue_34 = &Clock_Ip_apConfig.77_4->Dividers[Index_23];
  # DEBUG ReturnValue => ReturnValue_34
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Index_33 = Index_23 + 1;
  # DEBUG Index => Index_33

  <bb 11> :
  # Index_23 = PHI <Index_32(7), Index_33(10)>
  # DEBUG Index => Index_23
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.78_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.78_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_23 < _7)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # ReturnValue_20 = PHI <ReturnValue_25(6), ReturnValue_34(9), ReturnValue_25(11)>
  # DEBUG ReturnValue => ReturnValue_20
  # DEBUG BEGIN_STMT
  if (ReturnValue_20 == 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ReturnValue_35 = &DividerConfigurations[DividerConfigIndex_22];
  # DEBUG ReturnValue => ReturnValue_35
  # DEBUG BEGIN_STMT
  DividerConfigurations[DividerConfigIndex_22].Name = Name_27(D);
  # DEBUG BEGIN_STMT
  switch (Name_27(D)) <default: <L21> [INV], case 37: <L13> [INV], case 38: <L14> [INV], case 39: <L15> [INV]>

  <bb 14> :
<L13>:
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 & 15;
  _11 = _10 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _11;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  _12 = 1074151424B;
  _13 ={v} _12->VCCR;
  _14 = _13 & 15;
  _15 = _14 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _15;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:
  # DEBUG BEGIN_STMT
  _16 = 1074151424B;
  _17 ={v} _16->HCCR;
  _18 = _17 & 15;
  _19 = _18 + 1;
  DividerConfigurations[DividerConfigIndex_22].Value = _19;
  # DEBUG BEGIN_STMT

  <bb 17> :
  # ReturnValue_21 = PHI <ReturnValue_20(12), ReturnValue_35(14), ReturnValue_35(15), ReturnValue_35(16), ReturnValue_35(13)>
<L21>:
  # DEBUG ReturnValue => ReturnValue_21
  # DEBUG BEGIN_STMT
  _40 = ReturnValue_21;
  return _40;

}


getBusDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.71_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.72_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.73_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.74_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  const struct Clock_Ip_DividerConfigType * _43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_28 = 0B;
  # DEBUG ReturnValue => ReturnValue_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DividerConfigIndex_29 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (Name_30(D)) <default: <L20> [INV], case 33: <L0> [INV], case 34: <L1> [INV], case 35: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_33 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_33
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_32 = 1;
  # DEBUG DividerConfigIndex => DividerConfigIndex_32
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_31 = 2;
  # DEBUG DividerConfigIndex => DividerConfigIndex_31
  # DEBUG BEGIN_STMT

  <bb 6> :
  # DividerConfigIndex_25 = PHI <DividerConfigIndex_33(3), DividerConfigIndex_32(4), DividerConfigIndex_31(5), DividerConfigIndex_29(2)>
<L20>:
  # DEBUG DividerConfigIndex => DividerConfigIndex_25
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.71_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.71_1 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Index_35 = 0;
  # DEBUG Index => Index_35
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.72_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.72_2->Dividers[Index_26].Name;
  if (Name_30(D) == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.73_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.73_4->Dividers[Index_26];
  # DEBUG ReturnValue => ReturnValue_37
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Index_36 = Index_26 + 1;
  # DEBUG Index => Index_36

  <bb 11> :
  # Index_26 = PHI <Index_35(7), Index_36(10)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.74_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.74_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # ReturnValue_23 = PHI <ReturnValue_28(6), ReturnValue_37(9), ReturnValue_28(11)>
  # DEBUG ReturnValue => ReturnValue_23
  # DEBUG BEGIN_STMT
  if (ReturnValue_23 == 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ReturnValue_38 = &DividerConfigurations[DividerConfigIndex_25];
  # DEBUG ReturnValue => ReturnValue_38
  # DEBUG BEGIN_STMT
  DividerConfigurations[DividerConfigIndex_25].Name = Name_30(D);
  # DEBUG BEGIN_STMT
  switch (Name_30(D)) <default: <L21> [INV], case 33: <L13> [INV], case 34: <L14> [INV], case 35: <L15> [INV]>

  <bb 14> :
<L13>:
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 4;
  _11 = _10 & 15;
  _12 = _11 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _12;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 4;
  _16 = _15 & 15;
  _17 = _16 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _17;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:
  # DEBUG BEGIN_STMT
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 4;
  _21 = _20 & 15;
  _22 = _21 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _22;
  # DEBUG BEGIN_STMT

  <bb 17> :
  # ReturnValue_24 = PHI <ReturnValue_23(12), ReturnValue_38(14), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(13)>
<L21>:
  # DEBUG ReturnValue => ReturnValue_24
  # DEBUG BEGIN_STMT
  _43 = ReturnValue_24;
  return _43;

}


getCoreDividerConfig (Clock_Ip_NameType Name)
{
  uint32 Index;
  uint32 DividerConfigIndex;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.67_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.68_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.69_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.70_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  const struct Clock_Ip_DividerConfigType * _43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_28 = 0B;
  # DEBUG ReturnValue => ReturnValue_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DividerConfigIndex_29 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (Name_30(D)) <default: <L20> [INV], case 29: <L0> [INV], case 30: <L1> [INV], case 31: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_33 = 0;
  # DEBUG DividerConfigIndex => DividerConfigIndex_33
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_32 = 1;
  # DEBUG DividerConfigIndex => DividerConfigIndex_32
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  DividerConfigIndex_31 = 2;
  # DEBUG DividerConfigIndex => DividerConfigIndex_31
  # DEBUG BEGIN_STMT

  <bb 6> :
  # DividerConfigIndex_25 = PHI <DividerConfigIndex_33(3), DividerConfigIndex_32(4), DividerConfigIndex_31(5), DividerConfigIndex_29(2)>
<L20>:
  # DEBUG DividerConfigIndex => DividerConfigIndex_25
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.67_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.67_1 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Index_35 = 0;
  # DEBUG Index => Index_35
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.68_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.68_2->Dividers[Index_26].Name;
  if (Name_30(D) == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.69_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.69_4->Dividers[Index_26];
  # DEBUG ReturnValue => ReturnValue_37
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Index_36 = Index_26 + 1;
  # DEBUG Index => Index_36

  <bb 11> :
  # Index_26 = PHI <Index_35(7), Index_36(10)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.70_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.70_5->DividersCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # ReturnValue_23 = PHI <ReturnValue_28(6), ReturnValue_37(9), ReturnValue_28(11)>
  # DEBUG ReturnValue => ReturnValue_23
  # DEBUG BEGIN_STMT
  if (ReturnValue_23 == 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ReturnValue_38 = &DividerConfigurations[DividerConfigIndex_25];
  # DEBUG ReturnValue => ReturnValue_38
  # DEBUG BEGIN_STMT
  DividerConfigurations[DividerConfigIndex_25].Name = Name_30(D);
  # DEBUG BEGIN_STMT
  switch (Name_30(D)) <default: <L21> [INV], case 29: <L13> [INV], case 30: <L14> [INV], case 31: <L15> [INV]>

  <bb 14> :
<L13>:
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 16;
  _11 = _10 & 15;
  _12 = _11 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _12;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 16;
  _16 = _15 & 15;
  _17 = _16 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _17;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:
  # DEBUG BEGIN_STMT
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 16;
  _21 = _20 & 15;
  _22 = _21 + 1;
  DividerConfigurations[DividerConfigIndex_25].Value = _22;
  # DEBUG BEGIN_STMT

  <bb 17> :
  # ReturnValue_24 = PHI <ReturnValue_23(12), ReturnValue_38(14), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(13)>
<L21>:
  # DEBUG ReturnValue => ReturnValue_24
  # DEBUG BEGIN_STMT
  _43 = ReturnValue_24;
  return _43;

}


getSelectorConfig (Clock_Ip_NameType Name)
{
  static const Clock_Ip_NameType ClockSource[7] = {0, 8, 2, 5, 0, 0, 9};
  uint32 Index;
  uint32 SelectorConfigIndex;
  static struct Clock_Ip_SelectorConfigType SelectorConfigurations[3];
  const struct Clock_Ip_SelectorConfigType * ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.63_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.64_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.65_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.66_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  struct SCG_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  struct SCG_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  <unnamed type> _22;
  const struct Clock_Ip_SelectorConfigType * _43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_28 = 0B;
  # DEBUG ReturnValue => ReturnValue_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (Name_29(D)) <default: <L3> [INV], case 25: <L0> [INV], case 26: <L1> [INV], case 27: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  SelectorConfigIndex_32 = 0;
  # DEBUG SelectorConfigIndex => SelectorConfigIndex_32
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  SelectorConfigIndex_31 = 1;
  # DEBUG SelectorConfigIndex => SelectorConfigIndex_31
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  SelectorConfigIndex_30 = 2;
  # DEBUG SelectorConfigIndex => SelectorConfigIndex_30
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  SelectorConfigIndex_33 = 0;
  # DEBUG SelectorConfigIndex => SelectorConfigIndex_33
  # DEBUG BEGIN_STMT

  <bb 7> :
  # SelectorConfigIndex_25 = PHI <SelectorConfigIndex_32(3), SelectorConfigIndex_31(4), SelectorConfigIndex_30(5), SelectorConfigIndex_33(6)>
  # DEBUG SelectorConfigIndex => SelectorConfigIndex_25
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.63_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.63_1 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Index_35 = 0;
  # DEBUG Index => Index_35
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.64_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.64_2->Selectors[Index_26].Name;
  if (Name_29(D) == _3)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.65_4 = Clock_Ip_apConfig;
  ReturnValue_37 = &Clock_Ip_apConfig.65_4->Selectors[Index_26];
  # DEBUG ReturnValue => ReturnValue_37
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Index_36 = Index_26 + 1;
  # DEBUG Index => Index_36

  <bb 12> :
  # Index_26 = PHI <Index_35(8), Index_36(11)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.66_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.66_5->SelectorsCount;
  _7 = (long unsigned int) _6;
  if (Index_26 < _7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ReturnValue_23 = PHI <ReturnValue_28(7), ReturnValue_37(10), ReturnValue_28(12)>
  # DEBUG ReturnValue => ReturnValue_23
  # DEBUG BEGIN_STMT
  if (ReturnValue_23 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  ReturnValue_38 = &SelectorConfigurations[SelectorConfigIndex_25];
  # DEBUG ReturnValue => ReturnValue_38
  # DEBUG BEGIN_STMT
  SelectorConfigurations[SelectorConfigIndex_25].Name = Name_29(D);
  # DEBUG BEGIN_STMT
  switch (Name_29(D)) <default: <L20> [INV], case 25: <L13> [INV], case 26: <L14> [INV], case 27: <L15> [INV]>

  <bb 15> :
<L13>:
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->RCCR;
  _10 = _9 >> 24;
  _11 = _10 & 15;
  _12 = ClockSource[_11];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _12;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 16> :
<L14>:
  # DEBUG BEGIN_STMT
  _13 = 1074151424B;
  _14 ={v} _13->VCCR;
  _15 = _14 >> 24;
  _16 = _15 & 15;
  _17 = ClockSource[_16];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _17;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 17> :
<L15>:
  # DEBUG BEGIN_STMT
  _18 = 1074151424B;
  _19 ={v} _18->HCCR;
  _20 = _19 >> 24;
  _21 = _20 & 15;
  _22 = ClockSource[_21];
  SelectorConfigurations[SelectorConfigIndex_25].Value = _22;
  # DEBUG BEGIN_STMT

  <bb 18> :
  # ReturnValue_24 = PHI <ReturnValue_23(13), ReturnValue_38(15), ReturnValue_38(16), ReturnValue_38(17), ReturnValue_38(14)>
<L20>:
  # DEBUG ReturnValue => ReturnValue_24
  # DEBUG BEGIN_STMT
  _43 = ReturnValue_24;
  return _43;

}


getSpllConfig ()
{
  static struct Clock_Ip_PllConfigType SpllConfiguration;
  const struct Clock_Ip_PllConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.59_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.60_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.61_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.62_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  unsigned char _16;
  struct SCG_Type * _17;
  long unsigned int _18;
  long unsigned int _19;
  unsigned char _20;
  unsigned char _21;
  const struct Clock_Ip_PllConfigType * _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnValue_26 = 0B;
  # DEBUG ReturnValue => ReturnValue_26
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.59_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.59_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_28 = 0;
  # DEBUG Index => Index_28
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.60_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.60_2->Plls[Index_22].Name;
  if (_3 == 9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.61_4 = Clock_Ip_apConfig;
  ReturnValue_30 = &Clock_Ip_apConfig.61_4->Plls[Index_22];
  # DEBUG ReturnValue => ReturnValue_30
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_29 = Index_22 + 1;
  # DEBUG Index => Index_29

  <bb 7> :
  # Index_22 = PHI <Index_28(3), Index_29(6)>
  # DEBUG Index => Index_22
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.62_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.62_5->PllsCount;
  _7 = (long unsigned int) _6;
  if (Index_22 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_23 = PHI <ReturnValue_26(2), ReturnValue_30(5), ReturnValue_26(7)>
  # DEBUG ReturnValue => ReturnValue_23
  # DEBUG BEGIN_STMT
  if (ReturnValue_23 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ReturnValue_31 = &SpllConfiguration;
  # DEBUG ReturnValue => ReturnValue_31
  # DEBUG BEGIN_STMT
  SpllConfiguration.Name = 9;
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->SPLLCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  SpllConfiguration.Enable = _11;
  # DEBUG BEGIN_STMT
  _12 = 1074151424B;
  _13 ={v} _12->SPLLCFG;
  _14 = _13 >> 8;
  _15 = (unsigned char) _14;
  _16 = _15 & 7;
  SpllConfiguration.Predivider = _16;
  # DEBUG BEGIN_STMT
  _17 = 1074151424B;
  _18 ={v} _17->SPLLCFG;
  _19 = _18 >> 16;
  _20 = (unsigned char) _19;
  _21 = _20 & 31;
  SpllConfiguration.MulFactorDiv = _21;

  <bb 10> :
  # ReturnValue_24 = PHI <ReturnValue_23(8), ReturnValue_31(9)>
  # DEBUG ReturnValue => ReturnValue_24
  # DEBUG BEGIN_STMT
  _36 = ReturnValue_24;
  return _36;

}


getSoscConfig ()
{
  static struct Clock_Ip_XoscConfigType SoscConfiguration;
  const struct Clock_Ip_XoscConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.55_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.56_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.57_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.58_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  const struct Clock_Ip_XoscConfigType * _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnValue_16 = 0B;
  # DEBUG ReturnValue => ReturnValue_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.55_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.55_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_18 = 0;
  # DEBUG Index => Index_18
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.56_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.56_2->Xoscs[Index_12].Name;
  if (_3 == 8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.57_4 = Clock_Ip_apConfig;
  ReturnValue_20 = &Clock_Ip_apConfig.57_4->Xoscs[Index_12];
  # DEBUG ReturnValue => ReturnValue_20
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_19 = Index_12 + 1;
  # DEBUG Index => Index_19

  <bb 7> :
  # Index_12 = PHI <Index_18(3), Index_19(6)>
  # DEBUG Index => Index_12
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.58_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.58_5->XoscsCount;
  _7 = (long unsigned int) _6;
  if (Index_12 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_13 = PHI <ReturnValue_16(2), ReturnValue_20(5), ReturnValue_16(7)>
  # DEBUG ReturnValue => ReturnValue_13
  # DEBUG BEGIN_STMT
  if (ReturnValue_13 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ReturnValue_21 = &SoscConfiguration;
  # DEBUG ReturnValue => ReturnValue_21
  # DEBUG BEGIN_STMT
  SoscConfiguration.Name = 8;
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->SOSCCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  SoscConfiguration.Enable = _11;
  # DEBUG BEGIN_STMT
  SoscConfiguration.Freq = 40000000;

  <bb 10> :
  # ReturnValue_14 = PHI <ReturnValue_13(8), ReturnValue_21(9)>
  # DEBUG ReturnValue => ReturnValue_14
  # DEBUG BEGIN_STMT
  _25 = ReturnValue_14;
  return _25;

}


getFircConfig ()
{
  static struct Clock_Ip_IrcoscConfigType FircConfiguration;
  const struct Clock_Ip_IrcoscConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.51_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.52_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.53_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.54_5;
  unsigned char _6;
  long unsigned int _7;
  struct SCG_Type * _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  struct SCG_Type * _16;
  long unsigned int _17;
  unsigned char _18;
  int _19;
  int _20;
  unsigned char _21;
  unsigned char _22;
  const struct Clock_Ip_IrcoscConfigType * _37;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnValue_27 = 0B;
  # DEBUG ReturnValue => ReturnValue_27
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.51_1 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.51_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_29 = 0;
  # DEBUG Index => Index_29
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.52_2 = Clock_Ip_apConfig;
  _3 = Clock_Ip_apConfig.52_2->Ircoscs[Index_23].Name;
  if (_3 == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.53_4 = Clock_Ip_apConfig;
  ReturnValue_31 = &Clock_Ip_apConfig.53_4->Ircoscs[Index_23];
  # DEBUG ReturnValue => ReturnValue_31
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_30 = Index_23 + 1;
  # DEBUG Index => Index_30

  <bb 7> :
  # Index_23 = PHI <Index_29(3), Index_30(6)>
  # DEBUG Index => Index_23
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.54_5 = Clock_Ip_apConfig;
  _6 = Clock_Ip_apConfig.54_5->IrcoscsCount;
  _7 = (long unsigned int) _6;
  if (Index_23 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_24 = PHI <ReturnValue_27(2), ReturnValue_31(5), ReturnValue_27(7)>
  # DEBUG ReturnValue => ReturnValue_24
  # DEBUG BEGIN_STMT
  if (ReturnValue_24 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ReturnValue_32 = &FircConfiguration;
  # DEBUG ReturnValue => ReturnValue_32
  # DEBUG BEGIN_STMT
  FircConfiguration.Name = 5;
  # DEBUG BEGIN_STMT
  _8 = 1074151424B;
  _9 ={v} _8->FIRCCSR;
  _10 = (short unsigned int) _9;
  _11 = _10 & 1;
  FircConfiguration.Enable = _11;
  # DEBUG BEGIN_STMT
  _12 = 1074151424B;
  _13 ={v} _12->FIRCCFG;
  _14 = (unsigned char) _13;
  _15 = _14 & 3;
  FircConfiguration.Range = _15;
  # DEBUG BEGIN_STMT
  _16 = 1074151424B;
  _17 ={v} _16->FIRCCSR;
  _18 = (unsigned char) _17;
  _19 = (int) _18;
  _20 = _19 >> 3;
  _21 = (unsigned char) _20;
  _22 = _21 & 1;
  FircConfiguration.Regulator = _22;

  <bb 10> :
  # ReturnValue_25 = PHI <ReturnValue_24(8), ReturnValue_32(9)>
  # DEBUG ReturnValue => ReturnValue_25
  # DEBUG BEGIN_STMT
  _37 = ReturnValue_25;
  return _37;

}


Clock_Ip_SpecificPlatformInitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 IrcoscStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  struct SCG_Type * _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int TimeoutTicks.79_7;
  _Bool _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TimeoutOccurred_11 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig = Config_13(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 1074151424B;
  _2 ={v} _1->FIRCCSR;
  _3 = _2 & 1;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 0;
  # DEBUG BEGIN_STMT
  SetFircToResetValue_TrustedCall ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = 1074151424B;
  _5 ={v} _4->FIRCCSR;
  _6 = _5 >> 24;
  IrcoscStatus_19 = _6 & 1;
  # DEBUG IrcoscStatus => IrcoscStatus_19
  # DEBUG BEGIN_STMT
  TimeoutTicks.79_7 = TimeoutTicks;
  TimeoutOccurred_21 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.79_7);
  # DEBUG TimeoutOccurred => TimeoutOccurred_21
  # DEBUG BEGIN_STMT
  if (IrcoscStatus_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _8 = ~TimeoutOccurred_21;
  if (_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_21 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 5);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  SetSimLpoclksRegister_TrustedCall (Config_13(D));
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


SetSimLpoclksRegister_TrustedCall (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 SimLpoValue;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  long unsigned int _12;
  <unnamed type> _13;
  short unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  short unsigned int _18;
  long unsigned int _19;
  unsigned char _20;
  long unsigned int _21;
  struct SIM_Type * _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SimLpoValue_31 = 3;
  # DEBUG SimLpoValue => SimLpoValue_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index_32 = 0;
  # DEBUG Index => Index_32
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config_34(D)->Selectors[Index_29].Name;
  if (_1 == 40)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Config_34(D)->Selectors[Index_29].Value;
  _3 = Clock_Ip_au16SelectorEntryHardwareValue[_2];
  _4 = (long unsigned int) _3;
  _5 = _4 << 4;
  SimLpoValue_40 = SimLpoValue_25 | _5;
  # DEBUG SimLpoValue => SimLpoValue_40

  <bb 5> :
  # SimLpoValue_23 = PHI <SimLpoValue_25(3), SimLpoValue_40(4)>
  # DEBUG SimLpoValue => SimLpoValue_23
  # DEBUG BEGIN_STMT
  _6 = Config_34(D)->Selectors[Index_29].Name;
  if (_6 == 41)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = Config_34(D)->Selectors[Index_29].Value;
  _8 = Clock_Ip_au8SelectorEntryPcsHardwareValue[_7];
  _9 = (long unsigned int) _8;
  _10 = _9 << 2;
  SimLpoValue_41 = SimLpoValue_23 | _10;
  # DEBUG SimLpoValue => SimLpoValue_41

  <bb 7> :
  # SimLpoValue_24 = PHI <SimLpoValue_23(5), SimLpoValue_41(6)>
  # DEBUG SimLpoValue => SimLpoValue_24
  # DEBUG BEGIN_STMT
  Index_42 = Index_29 + 1;
  # DEBUG Index => Index_42

  <bb 8> :
  # SimLpoValue_25 = PHI <SimLpoValue_31(2), SimLpoValue_24(7)>
  # Index_29 = PHI <Index_32(2), Index_42(7)>
  # DEBUG Index => Index_29
  # DEBUG SimLpoValue => SimLpoValue_25
  # DEBUG BEGIN_STMT
  _11 = Config_34(D)->SelectorsCount;
  _12 = (long unsigned int) _11;
  if (Index_29 < _12)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index_35 = 0;
  # DEBUG Index => Index_35
  goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = Config_34(D)->Gates[Index_30].Name;
  if (_13 == 18)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = Config_34(D)->Gates[Index_30].Enable;
  _15 = (long unsigned int) _14;
  _16 = _15 << 1;
  SimLpoValue_37 = SimLpoValue_28 | _16;
  # DEBUG SimLpoValue => SimLpoValue_37

  <bb 12> :
  # SimLpoValue_26 = PHI <SimLpoValue_28(10), SimLpoValue_37(11)>
  # DEBUG SimLpoValue => SimLpoValue_26
  # DEBUG BEGIN_STMT
  _17 = Config_34(D)->Gates[Index_30].Name;
  if (_17 == 19)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _18 = Config_34(D)->Gates[Index_30].Enable;
  _19 = (long unsigned int) _18;
  SimLpoValue_38 = SimLpoValue_26 | _19;
  # DEBUG SimLpoValue => SimLpoValue_38

  <bb 14> :
  # SimLpoValue_27 = PHI <SimLpoValue_26(12), SimLpoValue_38(13)>
  # DEBUG SimLpoValue => SimLpoValue_27
  # DEBUG BEGIN_STMT
  Index_39 = Index_30 + 1;
  # DEBUG Index => Index_39

  <bb 15> :
  # SimLpoValue_28 = PHI <SimLpoValue_25(9), SimLpoValue_27(14)>
  # Index_30 = PHI <Index_35(9), Index_39(14)>
  # DEBUG Index => Index_30
  # DEBUG SimLpoValue => SimLpoValue_28
  # DEBUG BEGIN_STMT
  _20 = Config_34(D)->GatesCount;
  _21 = (long unsigned int) _20;
  if (Index_30 < _21)
    goto <bb 10>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _22 = 1074036736B;
  _22->LPOCLKS ={v} SimLpoValue_28;
  return;

}


SetFircToResetValue_TrustedCall ()
{
  struct SCG_Type * _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  struct SCG_Type * _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1074151424B;
  _1->FIRCCFG ={v} 0;
  # DEBUG BEGIN_STMT
  _2 = 1074151424B;
  _3 ={v} _2->FIRCCSR;
  _4 = 1074151424B;
  _5 = _3 | 1;
  _4->FIRCCSR ={v} _5;
  return;

}


DisableSafeClock (const struct Clock_Ip_ClockConfigType * Config)
{
  boolean FircConfigFound;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.80_1;
  <unnamed type> _2;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.81_3;
  short unsigned int _4;
  unsigned char _5;
  int _6;
  void (*<T55d>) (Clock_Ip_NameType) _7;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.82_8;
  unsigned char _9;
  long unsigned int _10;
  _Bool _11;
  _Bool Clock_Ip_bFircWasEnabledBeforeMcuInit.83_12;
  _Bool _13;
  unsigned char _14;
  int _15;
  void (*<T55d>) (Clock_Ip_NameType) _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FircConfigFound_21 = 0;
  # DEBUG FircConfigFound => FircConfigFound_21
  # DEBUG BEGIN_STMT
  if (Config_22(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_24 = 0;
  # DEBUG Index => Index_24
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.80_1 = Clock_Ip_apConfig;
  _2 = Clock_Ip_apConfig.80_1->Ircoscs[Index_17].Name;
  if (_2 == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FircConfigFound_26 = 1;
  # DEBUG FircConfigFound => FircConfigFound_26
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.81_3 = Clock_Ip_apConfig;
  _4 = Clock_Ip_apConfig.81_3->Ircoscs[Index_17].Enable;
  if (_4 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _6 = (int) _5;
  _7 = Clock_Ip_axIntOscCallbacks[_6].Disable;
  _7 (5);
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Index_25 = Index_17 + 1;
  # DEBUG Index => Index_25

  <bb 8> :
  # Index_17 = PHI <Index_24(3), Index_25(7)>
  # DEBUG Index => Index_17
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.82_8 = Clock_Ip_apConfig;
  _9 = Clock_Ip_apConfig.82_8->IrcoscsCount;
  _10 = (long unsigned int) _9;
  if (Index_17 < _10)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # FircConfigFound_18 = PHI <FircConfigFound_21(2), FircConfigFound_26(6), FircConfigFound_21(8), FircConfigFound_26(5)>
  # DEBUG FircConfigFound => FircConfigFound_18
  # DEBUG BEGIN_STMT
  _11 = ~FircConfigFound_18;
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  Clock_Ip_bFircWasEnabledBeforeMcuInit.83_12 = Clock_Ip_bFircWasEnabledBeforeMcuInit;
  _13 = ~Clock_Ip_bFircWasEnabledBeforeMcuInit.83_12;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _15 = (int) _14;
  _16 = Clock_Ip_axIntOscCallbacks[_15].Disable;
  _16 (5);

  <bb 12> :
  return;

}


