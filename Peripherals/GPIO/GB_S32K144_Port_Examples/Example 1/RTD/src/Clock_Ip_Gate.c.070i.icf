Parsed function:Clock_Ip_ClockSetSimTraceEnable_TrustedCall
Parsed function:Clock_Ip_ClockSetSimGate_TrustedCall
Parsed function:Clock_Ip_ClockSetPccCgcEnable_TrustedCall
Parsed function:Clock_Ip_ClockSetSimClkoutEnable_TrustedCall
Parsed function:Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall
Parsed function:Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall
Parsed function:Clock_Ip_ClockUpdateSimTraceEnable
Parsed function:Clock_Ip_ClockSetSimTraceEnable
Parsed function:Clock_Ip_ClockUpdateSimGate
Parsed function:Clock_Ip_ClockSetSimGate
Parsed function:Clock_Ip_ClockUpdatePccCgcEnable
Parsed function:Clock_Ip_ClockSetPccCgcEnable
Parsed function:Clock_Ip_ClockUpdateSimClkoutEnable
Parsed function:Clock_Ip_ClockSetSimClkoutEnable
Parsed function:Clock_Ip_ClockUpdateSimLPO32KEnable
Parsed function:Clock_Ip_ClockSetSimLPO32KEnable
Parsed function:Clock_Ip_ClockUpdateSimLPO1KEnable
Parsed function:Clock_Ip_ClockSetSimLPO1KEnable
Parsed function:Clock_Ip_ClockUpdateGateEmpty
Parsed function:Clock_Ip_ClockSetGateEmpty
Dump after hash based groups
Congruence classes: 11 (unique hash values: 11), with total: 21 items
Class size histogram [num of members]: number of classe number of classess
[1]: 9 classes
[6]: 2 classes


Dump after WPA based types groups
Congruence classes: 11 (unique hash values: 11), with total: 21 items
Class size histogram [num of members]: number of classe number of classess
[1]: 9 classes
[6]: 2 classes


Worklist has been filled with: 10
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 21 (unique hash values: 11), with total: 21 items
Class size histogram [num of members]: number of classe number of classess
[1]: 21 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 21 (unique hash values: 11), with total: 21 items
Class size histogram [num of members]: number of classe number of classess
[1]: 21 classes


Worklist has been filled with: 20
Address reference subdivision created: 0 new classes.
Congruence classes: 21 (unique hash values: 11), with total: 21 items
Class size histogram [num of members]: number of classe number of classess
[1]: 21 classes



Item count: 21
Congruent classes before: 21, after: 21
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

Clock_Ip_ClockSetSimTraceEnable_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  short unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_4 ={v} MEM[(struct SIM_Type *)1074036736B].CLKDIV4;
  # DEBUG RegValue => RegValue_4
  # DEBUG BEGIN_STMT
  _1 = Config_5(D)->Enable;
  if (_1 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  RegValue_7 = RegValue_4 | 268435456;
  # DEBUG RegValue => RegValue_7
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_4 & 4026531839;
  # DEBUG RegValue => RegValue_6

  <bb 5> [local count: 1073741824]:
  # RegValue_2 = PHI <RegValue_7(3), RegValue_6(4)>
  # DEBUG RegValue => RegValue_2
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CLKDIV4 ={v} RegValue_2;
  return;

}


Clock_Ip_ClockSetSimGate_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  uint32 GateIndex;
  uint32 Enable;
  short unsigned int _1;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->Enable;
  Enable_9 = (uint32) _1;
  # DEBUG Enable => Enable_9
  # DEBUG BEGIN_STMT
  _2 = Config_8(D)->Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][6];
  GateIndex_10 = (uint32) _3;
  # DEBUG GateIndex => GateIndex_10
  # DEBUG BEGIN_STMT
  RegValue_11 ={v} MEM[(struct SIM_Type *)1074036736B].PLATCGC;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  _4 = 1 << GateIndex_10;
  _5 = ~_4;
  RegValue_12 = _5 & RegValue_11;
  # DEBUG RegValue => RegValue_12
  # DEBUG BEGIN_STMT
  _6 = Enable_9 << GateIndex_10;
  RegValue_13 = _6 | RegValue_12;
  # DEBUG RegValue => RegValue_13
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].PLATCGC ={v} RegValue_13;
  return;

}


Clock_Ip_ClockSetPccCgcEnable_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][6];
  _3 = (int) _2;
  RegValue_9 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[_3];
  # DEBUG RegValue => RegValue_9
  # DEBUG BEGIN_STMT
  RegValue_10 = RegValue_9 & 3221225471;
  # DEBUG RegValue => RegValue_10
  # DEBUG BEGIN_STMT
  _4 = Config_8(D)->Enable;
  _5 = (long unsigned int) _4;
  _6 = _5 << 30;
  RegValue_11 = _6 | RegValue_10;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[_3] ={v} RegValue_11;
  return;

}


Clock_Ip_ClockSetSimClkoutEnable_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  short unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4294965247;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Enable;
  _2 = (long unsigned int) _1;
  _3 = _2 << 11;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} RegValue_8;
  return;

}


Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  short unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4294967293;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Enable;
  _2 = (long unsigned int) _1;
  _3 = _2 << 1;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} RegValue_8;
  return;

}


Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall (const struct Clock_Ip_GateConfigType * Config)
{
  uint32 RegValue;
  short unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_4 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG RegValue => RegValue_4
  # DEBUG BEGIN_STMT
  RegValue_5 = RegValue_4 & 4294967294;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  _1 = Config_6(D)->Enable;
  _2 = (long unsigned int) _1;
  RegValue_7 = _2 | RegValue_5;
  # DEBUG RegValue => RegValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} RegValue_7;
  return;

}


Clock_Ip_ClockUpdateSimTraceEnable (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetSimTraceEnable
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimTraceEnable_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetSimTraceEnable (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimTraceEnable_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdateSimGate (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetSimGate
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimGate_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetSimGate (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimGate_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdatePccCgcEnable (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetPccCgcEnable
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetPccCgcEnable_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetPccCgcEnable (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetPccCgcEnable_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdateSimClkoutEnable (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetSimClkoutEnable
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimClkoutEnable_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetSimClkoutEnable (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimClkoutEnable_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdateSimLPO32KEnable (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetSimLPO32KEnable
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetSimLPO32KEnable (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdateSimLPO1KEnable (Clock_Ip_NameType ClockName, boolean Gate)
{
  struct Clock_Ip_GateConfigType Config;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Config.Name = ClockName_3(D);
  # DEBUG BEGIN_STMT
  if (Gate_5(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Config.Enable = 1;

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => &Config
  # DEBUG INLINE_ENTRY Clock_Ip_ClockSetSimLPO1KEnable
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall (&Config);
  # DEBUG Config => NULL
  Config ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockSetSimLPO1KEnable (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ClockUpdateGateEmpty (Clock_Ip_NameType ClockName, boolean Gate)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockSetGateEmpty (const struct Clock_Ip_GateConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


