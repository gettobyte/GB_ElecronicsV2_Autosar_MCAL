IPA function summary for Clock_Ip_DistributePll.part.0/55 inlinable
  global time:     249.272729
  self size:       32
  global size:     32
  min size:       22
  self stack:      0
  global stack:    0
    size:18.000000, time:89.818182
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 change 99.990000% of time
       op1 is compile time invariant
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_GetPllStatus.part.0/54 inlinable
  global time:     241.570226
  self size:       18
  global size:     18
  min size:       10
  self stack:      0
  global stack:    0
    size:10.000000, time:89.394952
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_GetConfiguredFrequencyValue/22 inlinable
  global time:     49.365506
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:11.000000, time:47.365506
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_TimeoutExpired/21 inlinable
  global time:     19.000000
  self size:       11
  global size:     11
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/53 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for Clock_Ip_StartTimeout/20 inlinable
  global time:     30.000000
  self size:       13
  global size:     13
  min size:       14
  self stack:      0
  global stack:    0
    size:1.500000, time:1.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
  calls:
    OsIf_MicrosToTicks/52 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant
    OsIf_GetCounter/51 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant

IPA function summary for Clock_Ip_ReportClockErrors/19 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       10
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_PowerModeChangeNotification/17 inlinable
  global time:     27.000000
  self size:       10
  global size:     10
  min size:       12
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_ClockPowerModeChangeNotification/50 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_EnableModuleClock/16 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableModuleClock/15 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_InstallNotificationsCallback/14 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_ClearClockMonitorStatus/13 inlinable
  global time:     21.000000
  self size:       10
  global size:     10
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_GetClockMonitorStatus/12 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableClockMonitor/11 inlinable
  global time:     21.000000
  self size:       10
  global size:     10
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_DistributePll/10 inlinable
  global time:     102.885455
  self size:       27
  global size:     27
  min size:       10
  self stack:      0
  global stack:    0
    size:19.000000, time:66.575273
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll.part.0/55 function not considered for inlining
      loop depth: 0 freq:0.35 size: 1 time: 10callee size:16 stack: 0
    indirect call loop depth: 1 freq:1.93 size: 4 time: 16

IPA function summary for Clock_Ip_GetPllStatus/9 inlinable
  global time:     265.766183
  self size:       24
  global size:     24
  min size:       14
  self stack:      0
  global stack:    0
    size:14.000000, time:108.090909
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetPllStatus.part.0/54 function not considered for inlining
      loop depth: 0 freq:0.50 size: 2 time: 11callee size: 9 stack: 0
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_InitClock/8 inlinable
  global time:     852.458109
  self size:       209
  global size:     209
  min size:       140
  self stack:      0
  global stack:    0
    size:120.500000, time:293.683917
    size:18.500000, time:43.947573,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
       op1 is compile time invariant
    Clock_Ip_UpdateDriverContext/4 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 8 stack: 0
    Clock_Ip_ResetClockConfiguration/6 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:25 stack: 0
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op1 is compile time invariant
    indirect call loop depth: 1 freq:0.50 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:5.34 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:2.00 size: 4 time: 16
    indirect call loop depth: 1 freq:0.70 size: 4 time: 16

IPA function summary for Clock_Ip_Init/7 inlinable
  global time:     21.379000
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:3.660000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll/10 function not considered for inlining
      loop depth: 0 freq:0.11 size: 1 time: 10callee size:13 stack: 0
    Clock_Ip_GetPllStatus/9 function not considered for inlining
      loop depth: 0 freq:0.33 size: 2 time: 11callee size:12 stack: 0
    Clock_Ip_InitClock/8 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:104 stack: 0

IPA function summary for Clock_Ip_ResetClockConfiguration/6 inlinable
  global time:     269.090911
  self size:       51
  global size:     51
  min size:       32
  self stack:      0
  global stack:    0
    size:27.500000, time:81.590909
    size:6.500000, time:9.045455,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 56] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 56] changed)
  loop iterations:(op0[ref offset: 56] changed)
  calls:
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16

IPA function summary for Clock_Ip_CallEmptyCallbacks/5 inlinable
  global time:     147.500000
  self size:       90
  global size:     90
  min size:       134
  self stack:      0
  global stack:    0
    size:20.000000, time:11.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetConfiguredFrequencyValue/22 function not considered for inlining
      loop depth: 0 freq:0.50 size: 2 time: 11callee size: 7 stack: 0
       op0 is compile time invariant
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 5 time: 17
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16

IPA function summary for Clock_Ip_UpdateDriverContext/4 inlinable
  global time:     100.000000
  self size:       17
  global size:     17
  min size:       14
  self stack:      0
  global stack:    0
    size:5.500000, time:21.500000
    size:4.500000, time:8.500000,  executed if:(not inlined)
  calls:
    Clock_Ip_CallEmptyCallbacks/5 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size:45 stack: 0
    Clock_Ip_SetExternalSignalFrequency/46 function body not available
      loop depth: 1 freq:4.00 size: 3 time: 12
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_NotificatonsEmptyCallback/3 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Flattening functions:
Overall time estimate: 2508.288124 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Clock_Ip_DistributePll.part.0/55.
Enqueueing calls in Clock_Ip_GetPllStatus.part.0/54.
Enqueueing calls in Clock_Ip_GetConfiguredFrequencyValue/22.
Enqueueing calls in Clock_Ip_TimeoutExpired/21.
Enqueueing calls in Clock_Ip_StartTimeout/20.
Enqueueing calls in Clock_Ip_ReportClockErrors/19.
Enqueueing calls in Clock_Ip_PowerModeChangeNotification/17.
Enqueueing calls in Clock_Ip_EnableModuleClock/16.
Enqueueing calls in Clock_Ip_DisableModuleClock/15.
Enqueueing calls in Clock_Ip_InstallNotificationsCallback/14.
Enqueueing calls in Clock_Ip_ClearClockMonitorStatus/13.
Enqueueing calls in Clock_Ip_GetClockMonitorStatus/12.
Enqueueing calls in Clock_Ip_DisableClockMonitor/11.
Enqueueing calls in Clock_Ip_DistributePll/10.
Enqueueing calls in Clock_Ip_GetPllStatus/9.
Enqueueing calls in Clock_Ip_InitClock/8.
Enqueueing calls in Clock_Ip_Init/7.
Enqueueing calls in Clock_Ip_ResetClockConfiguration/6.
Enqueueing calls in Clock_Ip_CallEmptyCallbacks/5.
Enqueueing calls in Clock_Ip_UpdateDriverContext/4.
Enqueueing calls in Clock_Ip_NotificatonsEmptyCallback/3.

Considering Clock_Ip_GetPllStatus.part.0/54 with 18 size
 to be inlined into Clock_Ip_GetPllStatus/9 in unknown:0
 Estimated badness is -0.054054, frequency 0.50.

Considering Clock_Ip_UpdateDriverContext/4 with 17 size
 to be inlined into Clock_Ip_InitClock/8 in ../RTD/src/Clock_Ip.c:729
 Estimated badness is -0.032231, frequency 1.00.

Considering Clock_Ip_DistributePll.part.0/55 with 32 size
 to be inlined into Clock_Ip_DistributePll/10 in unknown:0
 Estimated badness is -0.010909, frequency 0.35.

Considering Clock_Ip_ResetClockConfiguration/6 with 51 size
 to be inlined into Clock_Ip_InitClock/8 in ../RTD/src/Clock_Ip.c:709
 Estimated badness is -0.007796, frequency 1.00.

Considering Clock_Ip_CallEmptyCallbacks/5 with 90 size
 to be inlined into Clock_Ip_UpdateDriverContext/4 in ../RTD/src/Clock_Ip.c:226
 Estimated badness is -0.001892, frequency 1.00.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 2162.730282 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :       10 calls, 11.850000 freq, 0 count
--param max-inline-insns-auto limit reached       :        3 calls, 1.438900 freq, 0 count
call is unlikely and code size would grow         :        1 calls, 0.500000 freq, 0 count
IPA function summary for Clock_Ip_GetConfiguredFrequencyValue/22 inlinable
  global time:     49.365506
  self size:       14
  global size:     14
  min size:       11
  self stack:      0
  global stack:    0
  estimated growth:9
    size:11.000000, time:47.365506
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_TimeoutExpired/21 inlinable
  global time:     19.000000
  self size:       11
  global size:     11
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/53 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for Clock_Ip_StartTimeout/20 inlinable
  global time:     30.000000
  self size:       13
  global size:     13
  min size:       14
  self stack:      0
  global stack:    0
    size:1.500000, time:1.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
  calls:
    OsIf_MicrosToTicks/52 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant
    OsIf_GetCounter/51 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant

IPA function summary for Clock_Ip_ReportClockErrors/19 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       10
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_PowerModeChangeNotification/17 inlinable
  global time:     27.000000
  self size:       10
  global size:     10
  min size:       12
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_ClockPowerModeChangeNotification/50 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_EnableModuleClock/16 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableModuleClock/15 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_InstallNotificationsCallback/14 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_ClearClockMonitorStatus/13 inlinable
  global time:     21.000000
  self size:       10
  global size:     10
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_GetClockMonitorStatus/12 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       10
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableClockMonitor/11 inlinable
  global time:     21.000000
  self size:       10
  global size:     10
  min size:       8
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_DistributePll/10 inlinable
  global time:     185.930911
  self size:       27
  global size:     55
  min size:       37
  self stack:      0
  global stack:    0
  estimated growth:23
    size:37.000000, time:98.011637
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll.part.0/55 inlined
      loop depth: 0 freq:0.35 size: 1 time: 10callee size:16 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      Clock_Ip_Command/23 function body not available
        loop depth: 0 freq:0.35 size: 3 time: 12
         op0 change 99.990000% of time
         op1 is compile time invariant
      indirect call loop depth: 1 freq:2.83 size: 4 time: 16
      indirect call loop depth: 1 freq:0.35 size: 4 time: 16
    indirect call loop depth: 1 freq:1.93 size: 4 time: 16

IPA function summary for Clock_Ip_GetPllStatus/9 inlinable
  global time:     380.051297
  self size:       24
  global size:     37
  min size:       24
  self stack:      0
  global stack:    0
  estimated growth:19
    size:24.000000, time:152.788385
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetPllStatus.part.0/54 inlined
      loop depth: 0 freq:0.50 size: 2 time: 11callee size: 9 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      indirect call loop depth: 1 freq:4.42 size: 5 time: 17
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_InitClock/8 inlinable
  global time:     1317.003567
  self size:       209
  global size:     348
  min size:       759
  self stack:      0
  global stack:    0
  estimated growth:189
    size:174.000000, time:408.774827
    size:18.500000, time:43.947573,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
       op1 is compile time invariant
    Clock_Ip_UpdateDriverContext/4 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 8 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      Clock_Ip_CallEmptyCallbacks/5 inlined
        loop depth: 0 freq:1.00 size: 1 time: 10callee size:45 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
        Clock_Ip_GetConfiguredFrequencyValue/22 call is unlikely and code size would grow
          loop depth: 0 freq:0.50 size: 2 time: 11callee size: 7 stack: 0
           op0 is compile time invariant
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 5 time: 17
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
      Clock_Ip_SetExternalSignalFrequency/46 function body not available
        loop depth: 1 freq:4.00 size: 3 time: 12
      Clock_Ip_Command/23 function body not available
        loop depth: 0 freq:1.00 size: 3 time: 12
         op1 is compile time invariant
    Clock_Ip_ResetClockConfiguration/6 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:25 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      indirect call loop depth: 1 freq:1.00 size: 4 time: 16
      indirect call loop depth: 1 freq:1.00 size: 4 time: 16
      indirect call loop depth: 1 freq:1.00 size: 4 time: 16
      indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    Clock_Ip_Command/23 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op1 is compile time invariant
    indirect call loop depth: 1 freq:0.50 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:5.34 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:1.00 size: 4 time: 16
    indirect call loop depth: 1 freq:2.00 size: 4 time: 16
    indirect call loop depth: 1 freq:0.70 size: 4 time: 16

IPA function summary for Clock_Ip_Init/7 inlinable
  global time:     21.379000
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:3.660000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll/10 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.11 size: 1 time: 10callee size:27 stack: 0
    Clock_Ip_GetPllStatus/9 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.33 size: 2 time: 11callee size:18 stack: 0
    Clock_Ip_InitClock/8 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:174 stack: 0

IPA function summary for Clock_Ip_NotificatonsEmptyCallback/3 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

Symbol table:

Clock_Ip_DistributePll.part.0/55 (Clock_Ip_DistributePll.part.0) @06cc0700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8GateCallbackIndex/44 (read)Clock_Ip_axGateCallbacks/45 (read)Clock_Ip_pxConfig/0 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_pxConfig/0 (read)
  Referring: 
  Function Clock_Ip_DistributePll.part.0/55 is inline copy in Clock_Ip_DistributePll/10
  Availability: local
  Function flags: count:59055800 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: Clock_Ip_DistributePll/10 (inlined) (59055800 (estimated locally),0.35 per call) 
  Calls: Clock_Ip_Command/23 (59055801 (estimated locally),0.35 per call) 
   Indirect call(477815112 (estimated locally),2.83 per call) 
   Indirect call(59055801 (estimated locally),0.35 per call) 
Clock_Ip_GetPllStatus.part.0/54 (Clock_Ip_GetPllStatus.part.0) @06cc0a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Clock_Ip_aeHwDfsName/49 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8FractionalDividerCallbackIndex/39 (read)Clock_Ip_axFracDivCallbacks/40 (read)Clock_Ip_driverContext/1 (read)
  Referring: 
  Function Clock_Ip_GetPllStatus.part.0/54 is inline copy in Clock_Ip_GetPllStatus/9
  Availability: local
  Function flags: count:57431766 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: Clock_Ip_GetPllStatus/9 (inlined) (57431766 (estimated locally),0.50 per call) 
  Calls: 
   Indirect call(507343013 (estimated locally),4.42 per call) 
OsIf_GetElapsed/53 (OsIf_GetElapsed) @06c9dee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_TimeoutExpired/21 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
OsIf_MicrosToTicks/52 (OsIf_MicrosToTicks) @06c9dd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_StartTimeout/20 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
OsIf_GetCounter/51 (OsIf_GetCounter) @06c9dc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_StartTimeout/20 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Clock_Ip_ClockPowerModeChangeNotification/50 (Clock_Ip_ClockPowerModeChangeNotification) @06c9d9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_PowerModeChangeNotification/17 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Clock_Ip_aeHwDfsName/49 (Clock_Ip_aeHwDfsName) @06c9c3a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus.part.0/54 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeHwPllName/48 (Clock_Ip_aeHwPllName) @06c9c2d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/9 (read)
  Availability: not_available
  Varpool flags: read-only
FunctionWasCalled.6105/47 (FunctionWasCalled) @06c962d0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_CallEmptyCallbacks/5 (write)
  Availability: available
  Varpool flags: initialized
Clock_Ip_SetExternalSignalFrequency/46 (Clock_Ip_SetExternalSignalFrequency) @06bfc620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_UpdateDriverContext/4 (472446402 (estimated locally),4.00 per call) 
  Calls: 
Clock_Ip_axGateCallbacks/45 (Clock_Ip_axGateCallbacks) @06c8d5a0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_EnableModuleClock/16 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_DisableModuleClock/15 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8GateCallbackIndex/44 (Clock_Ip_au8GateCallbackIndex) @06c8d558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableModuleClock/15 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_EnableModuleClock/16 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axSelectorCallbacks/43 (Clock_Ip_axSelectorCallbacks) @06c8d480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/10 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8SelectorCallbackIndex/42 (Clock_Ip_au8SelectorCallbackIndex) @06c8d438
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_DistributePll/10 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeSourceTypeClockName/41 (Clock_Ip_aeSourceTypeClockName) @06c8d3f0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/10 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFracDivCallbacks/40 (Clock_Ip_axFracDivCallbacks) @06c8d2d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus.part.0/54 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8FractionalDividerCallbackIndex/39 (Clock_Ip_au8FractionalDividerCallbackIndex) @06c8d288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_GetPllStatus.part.0/54 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPllCallbacks/38 (Clock_Ip_axPllCallbacks) @06c8d000
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_GetPllStatus/9 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PllCallbackIndex/37 (Clock_Ip_au8PllCallbackIndex) @06c89f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/9 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerCallbacks/36 (Clock_Ip_axDividerCallbacks) @06c89e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerCallbackIndex/35 (Clock_Ip_au8DividerCallbackIndex) @06c89dc8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerTriggerCallbacks/34 (Clock_Ip_axDividerTriggerCallbacks) @06c89cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerTriggerCallbackIndex/33 (Clock_Ip_au8DividerTriggerCallbackIndex) @06c89ca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPcfsCallbacks/32 (Clock_Ip_axPcfsCallbacks) @06c89bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PcfsCallbackIndex/31 (Clock_Ip_au8PcfsCallbackIndex) @06c89b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axExtOscCallbacks/30 (Clock_Ip_axExtOscCallbacks) @06c89a68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8XoscCallbackIndex/29 (Clock_Ip_au8XoscCallbackIndex) @06c89a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axIntOscCallbacks/28 (Clock_Ip_axIntOscCallbacks) @06c89948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/27 (Clock_Ip_au8IrcoscCallbackIndex) @06c89900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axCmuCallbacks/26 (Clock_Ip_axCmuCallbacks) @06c897e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_ClearClockMonitorStatus/13 (read)Clock_Ip_DisableClockMonitor/11 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_GetClockMonitorStatus/12 (read)Clock_Ip_CallEmptyCallbacks/5 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8CmuCallbackIndex/25 (Clock_Ip_au8CmuCallbackIndex) @06c89798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClearClockMonitorStatus/13 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_GetClockMonitorStatus/12 (read)Clock_Ip_DisableClockMonitor/11 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/24 (Clock_Ip_au8ClockFeatures) @06c89750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableModuleClock/15 (read)Clock_Ip_DistributePll/10 (read)Clock_Ip_DisableClockMonitor/11 (read)Clock_Ip_GetClockMonitorStatus/12 (read)Clock_Ip_ClearClockMonitorStatus/13 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_EnableModuleClock/16 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_GetPllStatus/9 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_ResetClockConfiguration/6 (read)Clock_Ip_GetPllStatus.part.0/54 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_InitClock/8 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_Command/23 (Clock_Ip_Command) @06bfcee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_InitClock/8 (59055800 (estimated locally),0.50 per call) Clock_Ip_InitClock/8 (118111600 (estimated locally),1.00 per call) Clock_Ip_UpdateDriverContext/4 (118111600 (estimated locally),1.00 per call) Clock_Ip_PowerModeChangeNotification/17 (1073741824 (estimated locally),1.00 per call) Clock_Ip_DistributePll.part.0/55 (59055801 (estimated locally),0.35 per call) 
  Calls: 
Clock_Ip_GetConfiguredFrequencyValue/22 (Clock_Ip_GetConfiguredFrequencyValue) @06bfc7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/0 (read)
  Referring: 
  Availability: available
  Function flags: count:164090760 (estimated locally) body optimize_size
  Called by: Clock_Ip_CallEmptyCallbacks/5 (59055801 (estimated locally),0.50 per call) 
  Calls: 
Clock_Ip_TimeoutExpired/21 (Clock_Ip_TimeoutExpired) @06bfc540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/53 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_StartTimeout/20 (Clock_Ip_StartTimeout) @06bfc2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_MicrosToTicks/52 (1073741824 (estimated locally),1.00 per call) OsIf_GetCounter/51 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_ReportClockErrors/19 (Clock_Ip_ReportClockErrors) @06bfc000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pfkNotificationsCallback/2 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_PowerModeChangeNotification/17 (Clock_Ip_PowerModeChangeNotification) @06bf9620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/0 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_ClockPowerModeChangeNotification/50 (1073741824 (estimated locally),1.00 per call) Clock_Ip_Command/23 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_EnableModuleClock/16 (Clock_Ip_EnableModuleClock) @06bf90e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8GateCallbackIndex/44 (read)Clock_Ip_axGateCallbacks/45 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_DisableModuleClock/15 (Clock_Ip_DisableModuleClock) @06bf9d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8GateCallbackIndex/44 (read)Clock_Ip_axGateCallbacks/45 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_InstallNotificationsCallback/14 (Clock_Ip_InstallNotificationsCallback) @06bf9a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pfkNotificationsCallback/2 (write)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Clock_Ip_ClearClockMonitorStatus/13 (Clock_Ip_ClearClockMonitorStatus) @06bf97e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_GetClockMonitorStatus/12 (Clock_Ip_GetClockMonitorStatus) @06bf9540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_DisableClockMonitor/11 (Clock_Ip_DisableClockMonitor) @06bf92a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call) 
Clock_Ip_DistributePll/10 (Clock_Ip_DistributePll) @06bf9000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/0 (read)Clock_Ip_aeSourceTypeClockName/41 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8SelectorCallbackIndex/42 (read)Clock_Ip_axSelectorCallbacks/43 (read)Clock_Ip_pxConfig/0 (read)Clock_Ip_driverContext/1 (read)
  Referring: 
  Availability: available
  Function flags: count:168730857 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/7 (116930485 (estimated locally),0.11 per call) 
  Calls: Clock_Ip_DistributePll.part.0/55 (inlined) (59055800 (estimated locally),0.35 per call) 
   Indirect call(324914276 (estimated locally),1.93 per call) 
Clock_Ip_GetPllStatus/9 (Clock_Ip_GetPllStatus) @0694aa80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_aeHwPllName/48 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8PllCallbackIndex/37 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_driverContext/1 (read)
  Referring: 
  Availability: available
  Function flags: count:114863532 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/7 (354334802 (estimated locally),0.33 per call) 
  Calls: Clock_Ip_GetPllStatus.part.0/54 (inlined) (57431766 (estimated locally),0.50 per call) 
   Indirect call(1014686025 (estimated locally),8.83 per call) 
Clock_Ip_InitClock/8 (Clock_Ip_InitClock) @0694a540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/0 (write)Clock_Ip_pxConfig/0 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8IrcoscCallbackIndex/27 (read)Clock_Ip_axIntOscCallbacks/28 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8XoscCallbackIndex/29 (read)Clock_Ip_axExtOscCallbacks/30 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8PcfsCallbackIndex/31 (read)Clock_Ip_axPcfsCallbacks/32 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8DividerTriggerCallbackIndex/33 (read)Clock_Ip_axDividerTriggerCallbacks/34 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8DividerCallbackIndex/35 (read)Clock_Ip_axDividerCallbacks/36 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8DividerTriggerCallbackIndex/33 (read)Clock_Ip_axDividerTriggerCallbacks/34 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8PllCallbackIndex/37 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8XoscCallbackIndex/29 (read)Clock_Ip_axExtOscCallbacks/30 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8PllCallbackIndex/37 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8FractionalDividerCallbackIndex/39 (read)Clock_Ip_axFracDivCallbacks/40 (read)Clock_Ip_driverContext/1 (write)Clock_Ip_driverContext/1 (write)Clock_Ip_driverContext/1 (write)Clock_Ip_driverContext/1 (write)Clock_Ip_aeSourceTypeClockName/41 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8SelectorCallbackIndex/42 (read)Clock_Ip_axSelectorCallbacks/43 (read)Clock_Ip_driverContext/1 (write)Clock_Ip_driverContext/1 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8GateCallbackIndex/44 (read)Clock_Ip_axGateCallbacks/45 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8CmuCallbackIndex/25 (read)Clock_Ip_axCmuCallbacks/26 (read)
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/7 (1073741824 (estimated locally),1.00 per call) 
  Calls: Clock_Ip_Command/23 (59055800 (estimated locally),0.50 per call) Clock_Ip_UpdateDriverContext/4 (inlined) (118111600 (estimated locally),1.00 per call) Clock_Ip_ResetClockConfiguration/6 (inlined) (118111600 (estimated locally),1.00 per call) Clock_Ip_Command/23 (118111600 (estimated locally),1.00 per call) 
   Indirect call(59055800 (estimated locally),0.50 per call) 
   Indirect call(477815109 (estimated locally),4.05 per call) 
   Indirect call(630715939 (estimated locally),5.34 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(955630223 (estimated locally),8.09 per call) 
   Indirect call(118111600 (estimated locally),1.00 per call) 
   Indirect call(118111600 (estimated locally),1.00 per call) 
   Indirect call(118111600 (estimated locally),1.00 per call) 
   Indirect call(236258637 (estimated locally),2.00 per call) 
   Indirect call(82678120 (estimated locally),0.70 per call) 
Clock_Ip_Init/7 (Clock_Ip_Init) @0694aee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_driverContext/1 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_DistributePll/10 (116930485 (estimated locally),0.11 per call) Clock_Ip_GetPllStatus/9 (354334802 (estimated locally),0.33 per call) Clock_Ip_InitClock/8 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_ResetClockConfiguration/6 (Clock_Ip_ResetClockConfiguration) @0694ac40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8SelectorCallbackIndex/42 (read)Clock_Ip_axSelectorCallbacks/43 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8FractionalDividerCallbackIndex/39 (read)Clock_Ip_axFracDivCallbacks/40 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8PllCallbackIndex/37 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_au8ClockFeatures/24 (read)Clock_Ip_au8XoscCallbackIndex/29 (read)Clock_Ip_axExtOscCallbacks/30 (read)
  Referring: 
  Function Clock_Ip_ResetClockConfiguration/6 is inline copy in Clock_Ip_InitClock/8
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: Clock_Ip_InitClock/8 (inlined) (118111600 (estimated locally),1.00 per call) 
  Calls: 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(118111601 (estimated locally),1.00 per call) 
   Indirect call(955630223 (estimated locally),8.09 per call) 
Clock_Ip_CallEmptyCallbacks/5 (Clock_Ip_CallEmptyCallbacks) @0694a9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: FunctionWasCalled.6105/47 (read)FunctionWasCalled.6105/47 (write)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_axCmuCallbacks/26 (read)Clock_Ip_axDividerCallbacks/36 (read)Clock_Ip_axDividerTriggerCallbacks/34 (read)Clock_Ip_axExtOscCallbacks/30 (read)Clock_Ip_axFracDivCallbacks/40 (read)Clock_Ip_axFracDivCallbacks/40 (read)Clock_Ip_axGateCallbacks/45 (read)Clock_Ip_axGateCallbacks/45 (read)Clock_Ip_axIntOscCallbacks/28 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_axPllCallbacks/38 (read)Clock_Ip_axSelectorCallbacks/43 (read)Clock_Ip_axPcfsCallbacks/32 (read)
  Referring: 
  Function Clock_Ip_CallEmptyCallbacks/5 is inline copy in Clock_Ip_InitClock/8
  Availability: local
  Function flags: count:118111601 (estimated locally) body local optimize_size
  Called by: Clock_Ip_UpdateDriverContext/4 (inlined) (118111601 (estimated locally),1.00 per call) 
  Calls: Clock_Ip_GetConfiguredFrequencyValue/22 (59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
   Indirect call(59055801 (estimated locally),0.50 per call) 
Clock_Ip_UpdateDriverContext/4 (Clock_Ip_UpdateDriverContext) @0694a700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_pxConfig/0 (read)
  Referring: 
  Function Clock_Ip_UpdateDriverContext/4 is inline copy in Clock_Ip_InitClock/8
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: Clock_Ip_InitClock/8 (inlined) (118111600 (estimated locally),1.00 per call) 
  Calls: Clock_Ip_CallEmptyCallbacks/5 (inlined) (118111601 (estimated locally),1.00 per call) Clock_Ip_SetExternalSignalFrequency/46 (472446402 (estimated locally),4.00 per call) Clock_Ip_Command/23 (118111600 (estimated locally),1.00 per call) 
Clock_Ip_NotificatonsEmptyCallback/3 (Clock_Ip_NotificatonsEmptyCallback) @0694a460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_pfkNotificationsCallback/2 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Clock_Ip_pfkNotificationsCallback/2 (Clock_Ip_pfkNotificationsCallback) @06948798
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_NotificatonsEmptyCallback/3 (addr)
  Referring: Clock_Ip_InstallNotificationsCallback/14 (write)Clock_Ip_ReportClockErrors/19 (read)
  Availability: available
  Varpool flags: initialized
Clock_Ip_driverContext/1 (Clock_Ip_driverContext) @06948240
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_DistributePll/10 (read)Clock_Ip_InitClock/8 (read)Clock_Ip_GetPllStatus/9 (read)Clock_Ip_GetPllStatus.part.0/54 (read)Clock_Ip_InitClock/8 (write)Clock_Ip_InitClock/8 (write)Clock_Ip_InitClock/8 (write)Clock_Ip_InitClock/8 (write)Clock_Ip_InitClock/8 (write)Clock_Ip_Init/7 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxConfig/0 (Clock_Ip_pxConfig) @069481b0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_DistributePll/10 (read)Clock_Ip_GetConfiguredFrequencyValue/22 (read)Clock_Ip_PowerModeChangeNotification/17 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_DistributePll/10 (read)Clock_Ip_UpdateDriverContext/4 (read)Clock_Ip_DistributePll.part.0/55 (read)Clock_Ip_InitClock/8 (write)Clock_Ip_InitClock/8 (read)
  Availability: available
  Varpool flags:

;; Function Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificatonsEmptyCallback, funcdef_no=0, decl_uid=6081, cgraph_uid=1, symbol_order=3)

Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}



;; Function Clock_Ip_GetPllStatus (Clock_Ip_GetPllStatus, funcdef_no=6, decl_uid=5669, cgraph_uid=7, symbol_order=9)


Symbols to be put in SSA form
{ D.6315 D.6373 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 17
Number of blocks to update: 16 ( 94%)


Merging blocks 9 and 12
Merging blocks 16 and 11
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 3
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5 3
;; 2 succs { 7 }
;; 3 succs { 8 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 9 14 }
;; 9 succs { 12 }
;; 10 succs { 13 11 }
;; 11 succs { 12 }
;; 12 succs { 10 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_DfsStatusType DfsStatus;
  Clock_Ip_PllStatusType RetValue;
  Clock_Ip_PllStatusType D.6373;
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _5;
  unsigned char _7;
  long unsigned int _8;
  <unnamed type> _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  Clock_Ip_DfsStatusType (*<T594>) (Clock_Ip_NameType) _31;
  unsigned char _34;
  long unsigned int _35;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  # DEBUG RetValue => 2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 7>; [100.00%]

  <bb 3> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_aeHwPllName[Index_14];
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8PllCallbackIndex[_3];
  CallbackIndex_20 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_20
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axPllCallbacks[CallbackIndex_20].Complete;
  PllStatus_22 = _5 (_1);
  # DEBUG PllStatus => PllStatus_22
  # DEBUG BEGIN_STMT
  if (PllStatus_22 == 1)
    goto <bb 8>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 4> [local count: 958878293]:
  # DEBUG BEGIN_STMT
  if (PllStatus_22 == 2)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 326018619]:
  # DEBUG BEGIN_STMT
  # DEBUG RetValue => 0

  <bb 6> [local count: 958878293]:
  # RetValue_10 = PHI <RetValue_11(4), 0(5)>
  # DEBUG RetValue => RetValue_10
  # DEBUG BEGIN_STMT
  Index_23 = Index_14 + 1;
  # DEBUG Index => Index_23

  <bb 7> [local count: 1073741824]:
  # RetValue_11 = PHI <2(2), RetValue_10(6)>
  # Index_14 = PHI <0(2), Index_23(6)>
  # DEBUG Index => Index_14
  # DEBUG RetValue => RetValue_11
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_driverContext.HwPllsNo;
  _8 = (long unsigned int) _7;
  if (_8 > Index_14)
    goto <bb 3>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 8> [local count: 114863532]:
  # RetValue_12 = PHI <1(3), RetValue_11(7)>
  # DEBUG RetValue => RetValue_12
  # DEBUG BEGIN_STMT
  if (RetValue_12 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [local count: 57431766]:
  # Index_15 = PHI <0(8)>
  # DEBUG INLINE_ENTRY Clock_Ip_GetPllStatus
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 507343010]:
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_aeHwDfsName[Index_25];
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8FractionalDividerCallbackIndex[_28];
  CallbackIndex_30 = (uint32) _29;
  # DEBUG CallbackIndex => CallbackIndex_30
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_axFracDivCallbacks[CallbackIndex_30].Complete;
  DfsStatus_32 = _31 (_26);
  # DEBUG DfsStatus => DfsStatus_32
  # DEBUG BEGIN_STMT
  if (DfsStatus_32 == 1)
    goto <bb 13>; [5.50%]
  else
    goto <bb 11>; [94.50%]

  <bb 11> [local count: 479439144]:
  # DEBUG BEGIN_STMT
  Index_33 = Index_25 + 1;
  # DEBUG Index => Index_33

  <bb 12> [local count: 536870910]:
  # Index_25 = PHI <0(9), Index_33(11)>
  # DEBUG Index => Index_25
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_driverContext.HwDfsNo;
  _35 = (long unsigned int) _34;
  if (Index_25 < _35)
    goto <bb 10>; [94.50%]
  else
    goto <bb 13>; [5.50%]

  <bb 13> [local count: 57431766]:
  # RetValue_36 = PHI <1(10), 0(12)>
  # DEBUG RetValue => RetValue_36
  # DEBUG BEGIN_STMT
  _40 = RetValue_36;
  # DEBUG RetValue => NULL
  # DEBUG PllStatus => NULL
  # DEBUG DfsStatus => NULL
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  RetValue_6 = _40;

  <bb 14> [local count: 114863531]:
  # RetValue_13 = PHI <RetValue_12(8), RetValue_6(13)>
  # DEBUG RetValue => RetValue_13
  # DEBUG BEGIN_STMT
  return RetValue_13;

}



;; Function Clock_Ip_DistributePll (Clock_Ip_DistributePll, funcdef_no=7, decl_uid=5671, cgraph_uid=8, symbol_order=10)


Symbols to be put in SSA form
{ D.6316 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 19 ( 95%)


Merging blocks 8 and 12
Removing basic block 10
Removing basic block 11
Removing basic block 15
Merging blocks 18 and 19
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 4
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 5
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 14 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 8 14 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 12 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;
  uint32 CallbackIndex;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.3_1;
  <unnamed type> _2;
  <unnamed type> _3;
  <unnamed type> _4;
  unsigned char _5;
  int _6;
  unsigned char _7;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _8;
  const struct Clock_Ip_SelectorConfigType * _9;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.7_10;
  unsigned char _11;
  long unsigned int _12;
  _Bool _13;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.10_25;
  <unnamed type> _27;
  unsigned char _28;
  int _29;
  unsigned char _30;
  void (*<T5be>) (const struct Clock_Ip_GateConfigType *) _32;
  const struct Clock_Ip_GateConfigType * _33;
  unsigned char _35;
  long unsigned int _36;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_37;
  <unnamed type> _39;
  unsigned char _40;
  int _41;
  unsigned char _42;
  void (*<T5ce>) (const struct Clock_Ip_CmuConfigType *) _44;
  const struct Clock_Ip_CmuConfigType * _45;
  unsigned char _47;
  long unsigned int _48;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_49;

  <bb 2> [local count: 168730857]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.3_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.3_1 != 0B)
    goto <bb 6>; [70.00%]
  else
    goto <bb 14>; [30.00%]

  <bb 3> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _2 = Clock_Ip_pxConfig.7_10->Selectors[Index_16].Value;
  _3 = Clock_Ip_aeSourceTypeClockName[_2];
  if (_3 == 3)
    goto <bb 4>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 4> [local count: 324914276]:
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_pxConfig.7_10->Selectors[Index_16].Name;
  _5 = Clock_Ip_au8ClockFeatures[_4][1];
  _6 = (int) _5;
  _7 = Clock_Ip_au8SelectorCallbackIndex[_6];
  CallbackIndex_22 = (uint32) _7;
  # DEBUG CallbackIndex => CallbackIndex_22
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_axSelectorCallbacks[CallbackIndex_22].Set;
  _9 = &Clock_Ip_pxConfig.7_10->Selectors[Index_16];
  _8 (_9);

  <bb 5> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  Index_24 = Index_16 + 1;
  # DEBUG Index => Index_24

  <bb 6> [local count: 1073741824]:
  # Index_16 = PHI <Index_24(5), 0(2)>
  # DEBUG Index => Index_16
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.7_10 = Clock_Ip_pxConfig;
  _11 = Clock_Ip_pxConfig.7_10->SelectorsCount;
  _12 = (long unsigned int) _11;
  if (_12 > Index_16)
    goto <bb 3>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 7> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_driverContext.ClockTreeIsConsumingPll;
  if (_13 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 8> [local count: 59055800]:
  # Index_17 = PHI <0(7)>
  # DEBUG INLINE_ENTRY Clock_Ip_DistributePll
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 477815115]:
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_pxConfig.10_25->Gates[Index_26].Name;
  _28 = Clock_Ip_au8ClockFeatures[_27][1];
  _29 = (int) _28;
  _30 = Clock_Ip_au8GateCallbackIndex[_29];
  CallbackIndex_31 = (uint32) _30;
  # DEBUG CallbackIndex => CallbackIndex_31
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_axGateCallbacks[CallbackIndex_31].Set;
  _33 = &Clock_Ip_pxConfig.10_25->Gates[Index_26];
  _32 (_33);
  # DEBUG BEGIN_STMT
  Index_34 = Index_26 + 1;
  # DEBUG Index => Index_34

  <bb 10> [local count: 536870916]:
  # Index_26 = PHI <0(8), Index_34(9)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.10_25 = Clock_Ip_pxConfig;
  _35 = Clock_Ip_pxConfig.10_25->GatesCount;
  _36 = (long unsigned int) _35;
  if (Index_26 < _36)
    goto <bb 9>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 11> [local count: 59055801]:
  # DEBUG BEGIN_STMT
  _39 = Clock_Ip_pxConfig.13_37->Cmus[Index_38].Name;
  _40 = Clock_Ip_au8ClockFeatures[_39][1];
  _41 = (int) _40;
  _42 = Clock_Ip_au8CmuCallbackIndex[_41];
  CallbackIndex_43 = (uint32) _42;
  # DEBUG CallbackIndex => CallbackIndex_43
  # DEBUG BEGIN_STMT
  _44 = Clock_Ip_axCmuCallbacks[CallbackIndex_43].Enable;
  _45 = &Clock_Ip_pxConfig.13_37->Cmus[Index_38];
  _44 (_45);
  # DEBUG BEGIN_STMT
  Index_46 = Index_38 + 1;
  # DEBUG Index => Index_46

  <bb 12> [local count: 118111601]:
  # Index_38 = PHI <0(10), Index_46(11)>
  # DEBUG Index => Index_38
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.13_37 = Clock_Ip_pxConfig;
  _47 = Clock_Ip_pxConfig.13_37->CmusCount;
  _48 = (long unsigned int) _47;
  if (Index_38 < _48)
    goto <bb 11>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 13> [local count: 59055801]:
  # Clock_Ip_pxConfig.13_49 = PHI <Clock_Ip_pxConfig.13_37(12)>
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Clock_Ip_pxConfig.13_49, 4);

  <bb 14> [local count: 168730859]:
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  return;

}



;; Function Clock_Ip_DisableClockMonitor (Clock_Ip_DisableClockMonitor, funcdef_no=8, decl_uid=5679, cgraph_uid=9, symbol_order=11)

Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T55d>) (Clock_Ip_NameType) _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Disable;
  _4 (ClockName_6(D));
  return;

}



;; Function Clock_Ip_GetClockMonitorStatus (Clock_Ip_GetClockMonitorStatus, funcdef_no=9, decl_uid=5677, cgraph_uid=10, symbol_order=12)

Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  Clock_Ip_CmuStatusType (*<T5d4>) (Clock_Ip_NameType) _4;
  Clock_Ip_CmuStatusType _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].GetStatus;
  _9 = _4 (ClockName_6(D));
  return _9;

}



;; Function Clock_Ip_ClearClockMonitorStatus (Clock_Ip_ClearClockMonitorStatus, funcdef_no=10, decl_uid=5675, cgraph_uid=11, symbol_order=13)

Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T55d>) (Clock_Ip_NameType) _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Clear;
  _4 (ClockName_6(D));
  return;

}



;; Function Clock_Ip_InstallNotificationsCallback (Clock_Ip_InstallNotificationsCallback, funcdef_no=11, decl_uid=5673, cgraph_uid=12, symbol_order=14)

Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback = Callback_2(D);
  return;

}



;; Function Clock_Ip_DisableModuleClock (Clock_Ip_DisableModuleClock, funcdef_no=12, decl_uid=5681, cgraph_uid=13, symbol_order=15)

Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T5c3>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 1);
  return;

}



;; Function Clock_Ip_EnableModuleClock (Clock_Ip_EnableModuleClock, funcdef_no=13, decl_uid=5683, cgraph_uid=14, symbol_order=16)

Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T5c3>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 0);
  return;

}



;; Function Clock_Ip_PowerModeChangeNotification (Clock_Ip_PowerModeChangeNotification, funcdef_no=14, decl_uid=5686, cgraph_uid=15, symbol_order=17)

Clock_Ip_PowerModeChangeNotification (Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.15_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.15_1, 2);
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockPowerModeChangeNotification (PowerMode_4(D), Notification_5(D));
  return;

}



;; Function Clock_Ip_ReportClockErrors (Clock_Ip_ReportClockErrors, funcdef_no=16, decl_uid=6037, cgraph_uid=17, symbol_order=19)

Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  void (*<T497>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.16_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.16_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.16_1 (Error_3(D), ClockName_4(D));
  return;

}



;; Function Clock_Ip_StartTimeout (Clock_Ip_StartTimeout, funcdef_no=17, decl_uid=6050, cgraph_uid=18, symbol_order=20)

Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  # DEBUG BEGIN_STMT
  *ElapsedTimeOut_7(D) = 0;
  # DEBUG BEGIN_STMT
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}



;; Function Clock_Ip_TimeoutExpired (Clock_Ip_TimeoutExpired, funcdef_no=18, decl_uid=6054, cgraph_uid=19, symbol_order=21)

Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _6;
  boolean _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _6 = OsIf_GetElapsed (StartTimeInOut_4(D), 0);
  _1 = *ElapsedTimeInOut_7(D);
  _2 = _1 + _6;
  *ElapsedTimeInOut_7(D) = _2;
  # DEBUG BEGIN_STMT
  _10 = _2 >= TimeoutTicks_9(D);
  return _10;

}



;; Function Clock_Ip_GetConfiguredFrequencyValue (Clock_Ip_GetConfiguredFrequencyValue, funcdef_no=19, decl_uid=6039, cgraph_uid=20, symbol_order=22)

Clock_Ip_GetConfiguredFrequencyValue (Clock_Ip_NameType ClockName)
{
  uint32 Index;
  uint32 ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.17_1;
  <unnamed type> _2;
  unsigned char _4;
  long unsigned int _5;

  <bb 2> [local count: 164090760]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.17_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.17_1 != 0B)
    goto <bb 8>; [70.00%]
  else
    goto <bb 7>; [30.00%]

  <bb 8> [local count: 114863532]:
  goto <bb 6>; [100.00%]

  <bb 3> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  _2 = Clock_Ip_pxConfig.17_1->ConfiguredFrequencies[Index_7].Name;
  if (_2 == ClockName_9(D))
    goto <bb 4>; [5.50%]
  else
    goto <bb 5>; [94.50%]

  <bb 4> [local count: 55807731]:
  # Index_3 = PHI <Index_7(3)>
  # DEBUG BEGIN_STMT
  ReturnValue_11 = Clock_Ip_pxConfig.17_1->ConfiguredFrequencies[Index_3].ConfiguredFrequencyValue;
  # DEBUG ReturnValue => ReturnValue_11
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 5> [local count: 958878294]:
  # DEBUG BEGIN_STMT
  Index_10 = Index_7 + 1;
  # DEBUG Index => Index_10

  <bb 6> [local count: 1073741824]:
  # Index_7 = PHI <Index_10(5), 0(8)>
  # DEBUG Index => Index_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_pxConfig.17_1->ConfigureFrequenciesCount;
  _5 = (long unsigned int) _4;
  if (_5 > Index_7)
    goto <bb 3>; [94.50%]
  else
    goto <bb 7>; [5.50%]

  <bb 7> [local count: 164090760]:
  # ReturnValue_6 = PHI <0(2), ReturnValue_11(4), 0(6)>
  # DEBUG ReturnValue => ReturnValue_6
  # DEBUG BEGIN_STMT
  return ReturnValue_6;

}



;; Function Clock_Ip_InitClock (Clock_Ip_InitClock, funcdef_no=5, decl_uid=5667, cgraph_uid=6, symbol_order=8)


Symbols to be put in SSA form
{ D.6330 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 77
Number of blocks to update: 76 ( 99%)


Merging blocks 5 and 55
Removing basic block 10
Removing basic block 42
Removing basic block 43
Removing basic block 44
Removing basic block 45
Removing basic block 46
Removing basic block 47
Removing basic block 48
Removing basic block 49
Removing basic block 50
Removing basic block 51
Removing basic block 52
Removing basic block 53
Removing basic block 54
Removing basic block 67
Removing basic block 68
Removing basic block 72
Removing basic block 73
;; 21 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
;;
;; Loop 15
;;  header 55, latch 54
;;  depth 1, outer 0
;;  nodes: 55 54
;;
;; Loop 14
;;  header 53, latch 52
;;  depth 1, outer 0
;;  nodes: 53 52
;;
;; Loop 13
;;  header 50, latch 49
;;  depth 1, outer 0
;;  nodes: 50 49 47 48 46
;;
;; Loop 12
;;  header 44, latch 43
;;  depth 1, outer 0
;;  nodes: 44 43
;;
;; Loop 11
;;  header 42, latch 41
;;  depth 1, outer 0
;;  nodes: 42 41
;;
;; Loop 10
;;  header 40, latch 39
;;  depth 1, outer 0
;;  nodes: 40 39
;;
;; Loop 9
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37
;;
;; Loop 8
;;  header 36, latch 35
;;  depth 1, outer 0
;;  nodes: 36 35
;;
;; Loop 7
;;  header 34, latch 33
;;  depth 1, outer 0
;;  nodes: 34 33
;;
;; Loop 6
;;  header 32, latch 31
;;  depth 1, outer 0
;;  nodes: 32 31
;;
;; Loop 5
;;  header 30, latch 29
;;  depth 1, outer 0
;;  nodes: 30 29
;;
;; Loop 4
;;  header 28, latch 27
;;  depth 1, outer 0
;;  nodes: 28 27
;;
;; Loop 20
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22
;;
;; Loop 3
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19
;;
;; Loop 2
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17
;;
;; Loop 16
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15
;;
;; Loop 17
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12
;;
;; Loop 18
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 19
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 5 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 12 14 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 18 }
;; 17 succs { 18 }
;; 18 succs { 17 20 }
;; 19 succs { 20 }
;; 20 succs { 19 21 }
;; 21 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 22 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 27 30 }
;; 29 succs { 30 }
;; 30 succs { 29 32 }
;; 31 succs { 32 }
;; 32 succs { 31 34 }
;; 33 succs { 34 }
;; 34 succs { 33 36 }
;; 35 succs { 36 }
;; 36 succs { 35 38 }
;; 37 succs { 38 }
;; 38 succs { 37 40 }
;; 39 succs { 40 }
;; 40 succs { 39 42 }
;; 41 succs { 42 }
;; 42 succs { 41 44 }
;; 43 succs { 44 }
;; 44 succs { 43 45 }
;; 45 succs { 50 }
;; 46 succs { 47 48 }
;; 47 succs { 49 }
;; 48 succs { 49 }
;; 49 succs { 50 }
;; 50 succs { 46 51 }
;; 51 succs { 53 57 }
;; 52 succs { 53 }
;; 53 succs { 52 55 }
;; 54 succs { 55 }
;; 55 succs { 54 56 }
;; 56 succs { 57 }
;; 57 succs { 1 }
Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  static boolean FunctionWasCalled = 0;
  uint32 Index;
  uint32 CallbackIndex;
  uint32 Index;
  uint32 Index;
  uint32 CallbackIndex;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  void (*<T5ce>) (const struct Clock_Ip_CmuConfigType *) _6;
  const struct Clock_Ip_CmuConfigType * _7;
  unsigned char _8;
  long unsigned int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  const struct Clock_Ip_IrcoscConfigType * _15;
  unsigned char _16;
  long unsigned int _17;
  <unnamed type> _18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _22;
  const struct Clock_Ip_XoscConfigType * _23;
  unsigned char _24;
  long unsigned int _25;
  <unnamed type> _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  void (*<T5e0>) (const struct Clock_Ip_PcfsConfigType *) _30;
  const struct Clock_Ip_PcfsConfigType * _31;
  unsigned char _32;
  long unsigned int _33;
  <unnamed type> _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  void (*<T582>) (const struct Clock_Ip_DividerTriggerConfigType *) _38;
  const struct Clock_Ip_DividerTriggerConfigType * _39;
  unsigned char _40;
  long unsigned int _41;
  <unnamed type> _42;
  unsigned char _43;
  int _44;
  unsigned char _45;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _46;
  const struct Clock_Ip_DividerConfigType * _47;
  unsigned char _48;
  long unsigned int _49;
  <unnamed type> _50;
  unsigned char _51;
  int _52;
  unsigned char _53;
  void (*<T582>) (const struct Clock_Ip_DividerTriggerConfigType *) _54;
  const struct Clock_Ip_DividerTriggerConfigType * _55;
  unsigned char _56;
  long unsigned int _57;
  <unnamed type> _58;
  unsigned char _59;
  int _60;
  unsigned char _61;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _62;
  const struct Clock_Ip_PllConfigType * _63;
  unsigned char _64;
  long unsigned int _65;
  <unnamed type> _66;
  unsigned char _67;
  int _68;
  unsigned char _69;
  void (*<T5ce>) (const struct Clock_Ip_CmuConfigType *) _70;
  const struct Clock_Ip_CmuConfigType * _71;
  unsigned char _72;
  long unsigned int _73;
  <unnamed type> _74;
  unsigned char _75;
  int _76;
  unsigned char _77;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _78;
  const struct Clock_Ip_XoscConfigType * _79;
  unsigned char _80;
  long unsigned int _81;
  <unnamed type> _82;
  unsigned char _83;
  int _84;
  unsigned char _85;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _86;
  const struct Clock_Ip_PllConfigType * _87;
  unsigned char _88;
  long unsigned int _89;
  <unnamed type> _90;
  unsigned char _91;
  int _92;
  unsigned char _93;
  void (*<T58e>) (const struct Clock_Ip_FracDivConfigType *) _94;
  const struct Clock_Ip_FracDivConfigType * _95;
  unsigned char _96;
  long unsigned int _97;
  <unnamed type> _98;
  <unnamed type> _99;
  <unnamed type> _100;
  unsigned char _101;
  int _102;
  unsigned char _103;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _104;
  const struct Clock_Ip_SelectorConfigType * _105;
  unsigned char _106;
  long unsigned int _107;
  _Bool _108;
  <unnamed type> _109;
  unsigned char _110;
  int _111;
  unsigned char _112;
  void (*<T5be>) (const struct Clock_Ip_GateConfigType *) _113;
  const struct Clock_Ip_GateConfigType * _114;
  unsigned char _115;
  long unsigned int _116;
  <unnamed type> _117;
  unsigned char _118;
  int _119;
  unsigned char _120;
  void (*<T5ce>) (const struct Clock_Ip_CmuConfigType *) _121;
  const struct Clock_Ip_CmuConfigType * _122;
  unsigned char _123;
  long unsigned int _124;
  unsigned char _215;
  long unsigned int _218;
  <unnamed type> _219;
  unsigned char _220;
  int _221;
  unsigned char _222;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _224;
  const struct Clock_Ip_SelectorConfigType * _225;
  unsigned char _226;
  long unsigned int _229;
  <unnamed type> _230;
  unsigned char _231;
  int _232;
  unsigned char _233;
  void (*<T58e>) (const struct Clock_Ip_FracDivConfigType *) _235;
  const struct Clock_Ip_FracDivConfigType * _236;
  unsigned char _237;
  long unsigned int _240;
  <unnamed type> _241;
  unsigned char _242;
  int _243;
  unsigned char _244;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _246;
  const struct Clock_Ip_PllConfigType * _247;
  unsigned char _248;
  long unsigned int _251;
  <unnamed type> _252;
  unsigned char _253;
  int _254;
  unsigned char _255;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _257;
  const struct Clock_Ip_XoscConfigType * _258;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.1_259;
  <unnamed type> _261;
  long unsigned int _262;
  unsigned char _264;
  long unsigned int _265;
  _Bool FunctionWasCalled.2_266;
  void (*<T5ce>) (const struct Clock_Ip_CmuConfigType *) _267;
  void (*<T55d>) (Clock_Ip_NameType) _268;
  void (*<T55d>) (Clock_Ip_NameType) _269;
  Clock_Ip_CmuStatusType (*<T5d4>) (Clock_Ip_NameType) _270;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _271;
  void (*<T582>) (const struct Clock_Ip_DividerTriggerConfigType *) _272;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _273;
  void (*<T58e>) (const struct Clock_Ip_FracDivConfigType *) _274;
  Clock_Ip_DfsStatusType (*<T594>) (Clock_Ip_NameType) _275;
  void (*<T5be>) (const struct Clock_Ip_GateConfigType *) _276;
  void (*<T5c3>) (Clock_Ip_NameType, boolean) _277;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _278;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _279;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _280;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _281;
  void (*<T5e0>) (const struct Clock_Ip_PcfsConfigType *) _282;

  <bb 2> [local count: 118111599]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig = Config_159(D);
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Config_159(D), 1);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.0_1 != 0B)
    goto <bb 4>; [70.00%]
  else
    goto <bb 5>; [30.00%]

  <bb 3> [local count: 82678119]:
  # DEBUG BEGIN_STMT
  _2 = Config_159(D)->Cmus[Index_125].Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][1];
  _4 = (int) _3;
  _5 = Clock_Ip_au8CmuCallbackIndex[_4];
  CallbackIndex_162 = (uint32) _5;
  # DEBUG CallbackIndex => CallbackIndex_162
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[CallbackIndex_162].Reset;
  _7 = &Config_159(D)->Cmus[Index_125];
  _6 (_7);
  # DEBUG BEGIN_STMT
  Index_164 = Index_125 + 1;
  # DEBUG Index => Index_164

  <bb 4> [local count: 165356239]:
  # Index_125 = PHI <Index_164(3), 0(2)>
  # DEBUG Index => Index_125
  # DEBUG BEGIN_STMT
  _8 = Config_159(D)->CmusCount;
  _9 = (long unsigned int) _8;
  if (_9 > Index_125)
    goto <bb 3>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 118111599]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_159(D)
  # DEBUG INLINE_ENTRY Clock_Ip_ResetClockConfiguration
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _215 = Config_159(D)->SelectorsCount;
  Index_216 = (uint32) _215;
  # DEBUG Index => Index_216
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 955630215]:
  # DEBUG BEGIN_STMT
  _218 = Index_217 + 4294967295;
  _219 = Config_159(D)->Selectors[_218].Name;
  _220 = Clock_Ip_au8ClockFeatures[_219][1];
  _221 = (int) _220;
  _222 = Clock_Ip_au8SelectorCallbackIndex[_221];
  CallbackIndex_223 = (uint32) _222;
  # DEBUG CallbackIndex => CallbackIndex_223
  # DEBUG BEGIN_STMT
  _224 = Clock_Ip_axSelectorCallbacks[CallbackIndex_223].Reset;
  _225 = &Config_159(D)->Selectors[_218];
  _224 (_225);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _218

  <bb 7> [local count: 1073741816]:
  # Index_217 = PHI <Index_216(5), _218(6)>
  # DEBUG Index => Index_217
  # DEBUG BEGIN_STMT
  if (Index_217 != 0)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _226 = Config_159(D)->FracDivsCount;
  Index_227 = (uint32) _226;
  # DEBUG Index => Index_227
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _229 = Index_228 + 4294967295;
  _230 = Config_159(D)->FracDivs[_229].Name;
  _231 = Clock_Ip_au8ClockFeatures[_230][1];
  _232 = (int) _231;
  _233 = Clock_Ip_au8FractionalDividerCallbackIndex[_232];
  CallbackIndex_234 = (uint32) _233;
  # DEBUG CallbackIndex => CallbackIndex_234
  # DEBUG BEGIN_STMT
  _235 = Clock_Ip_axFracDivCallbacks[CallbackIndex_234].Reset;
  _236 = &Config_159(D)->FracDivs[_229];
  _235 (_236);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _229

  <bb 10> [local count: 236223199]:
  # Index_228 = PHI <Index_227(8), _229(9)>
  # DEBUG Index => Index_228
  # DEBUG BEGIN_STMT
  if (Index_228 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _237 = Config_159(D)->PllsCount;
  Index_238 = (uint32) _237;
  # DEBUG Index => Index_238
  goto <bb 13>; [100.00%]

  <bb 12> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _240 = Index_239 + 4294967295;
  _241 = Config_159(D)->Plls[_240].Name;
  _242 = Clock_Ip_au8ClockFeatures[_241][1];
  _243 = (int) _242;
  _244 = Clock_Ip_au8PllCallbackIndex[_243];
  CallbackIndex_245 = (uint32) _244;
  # DEBUG CallbackIndex => CallbackIndex_245
  # DEBUG BEGIN_STMT
  _246 = Clock_Ip_axPllCallbacks[CallbackIndex_245].Reset;
  _247 = &Config_159(D)->Plls[_240];
  _246 (_247);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _240

  <bb 13> [local count: 236223199]:
  # Index_239 = PHI <Index_238(11), _240(12)>
  # DEBUG Index => Index_239
  # DEBUG BEGIN_STMT
  if (Index_239 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _248 = Config_159(D)->XoscsCount;
  Index_249 = (uint32) _248;
  # DEBUG Index => Index_249
  goto <bb 16>; [100.00%]

  <bb 15> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _251 = Index_250 + 4294967295;
  _252 = Config_159(D)->Xoscs[_251].Name;
  _253 = Clock_Ip_au8ClockFeatures[_252][1];
  _254 = (int) _253;
  _255 = Clock_Ip_au8XoscCallbackIndex[_254];
  CallbackIndex_256 = (uint32) _255;
  # DEBUG CallbackIndex => CallbackIndex_256
  # DEBUG BEGIN_STMT
  _257 = Clock_Ip_axExtOscCallbacks[CallbackIndex_256].Reset;
  _258 = &Config_159(D)->Xoscs[_251];
  _257 (_258);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _251

  <bb 16> [local count: 236223199]:
  # Index_250 = PHI <Index_249(14), _251(15)>
  # DEBUG Index => Index_250
  # DEBUG BEGIN_STMT
  if (Index_250 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 17> [local count: 236258636]:
  # DEBUG BEGIN_STMT
  _10 = Config_159(D)->Ircoscs[Index_126].Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][1];
  _12 = (int) _11;
  _13 = Clock_Ip_au8IrcoscCallbackIndex[_12];
  CallbackIndex_212 = (uint32) _13;
  # DEBUG CallbackIndex => CallbackIndex_212
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[CallbackIndex_212].Set;
  _15 = &Config_159(D)->Ircoscs[Index_126];
  _14 (_15);
  # DEBUG BEGIN_STMT
  Index_214 = Index_126 + 1;
  # DEBUG Index => Index_214

  <bb 18> [local count: 354370236]:
  # Index_126 = PHI <0(16), Index_214(17)>
  # DEBUG Config => NULL
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  # DEBUG Index => NULL
  # DEBUG Index => Index_126
  # DEBUG BEGIN_STMT
  _16 = Config_159(D)->IrcoscsCount;
  _17 = (long unsigned int) _16;
  if (_17 > Index_126)
    goto <bb 17>; [66.67%]
  else
    goto <bb 20>; [33.33%]

  <bb 19> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _18 = Config_159(D)->Xoscs[Index_127].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8XoscCallbackIndex[_20];
  CallbackIndex_209 = (uint32) _21;
  # DEBUG CallbackIndex => CallbackIndex_209
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axExtOscCallbacks[CallbackIndex_209].Set;
  _23 = &Config_159(D)->Xoscs[Index_127];
  _22 (_23);
  # DEBUG BEGIN_STMT
  Index_211 = Index_127 + 1;
  # DEBUG Index => Index_211

  <bb 20> [local count: 236223199]:
  # Index_127 = PHI <Index_211(19), 0(18)>
  # DEBUG Index => Index_127
  # DEBUG BEGIN_STMT
  _24 = Config_159(D)->XoscsCount;
  _25 = (long unsigned int) _24;
  if (_25 > Index_127)
    goto <bb 19>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_159(D)
  # DEBUG INLINE_ENTRY Clock_Ip_UpdateDriverContext
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.1_259 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.1_259, 2);
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 23>; [100.00%]

  <bb 22> [local count: 472446400]:
  # DEBUG BEGIN_STMT
  _261 = Config_159(D)->ExtClks[Index_260].Name;
  _262 = Config_159(D)->ExtClks[Index_260].Value;
  Clock_Ip_SetExternalSignalFrequency (_261, _262);
  # DEBUG BEGIN_STMT
  Index_263 = Index_260 + 1;
  # DEBUG Index => Index_263

  <bb 23> [local count: 590558000]:
  # Index_260 = PHI <0(21), Index_263(22)>
  # DEBUG Index => Index_260
  # DEBUG BEGIN_STMT
  _264 = Config_159(D)->ExtClksCount;
  _265 = (long unsigned int) _264;
  if (Index_260 < _265)
    goto <bb 22>; [80.00%]
  else
    goto <bb 24>; [20.00%]

  <bb 24> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY Clock_Ip_CallEmptyCallbacks
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FunctionWasCalled.2_266 = FunctionWasCalled;
  if (FunctionWasCalled.2_266 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 25> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  FunctionWasCalled = 1;
  # DEBUG BEGIN_STMT
  _267 = Clock_Ip_axCmuCallbacks[0].Set;
  _267 (0B);
  # DEBUG BEGIN_STMT
  _268 = Clock_Ip_axCmuCallbacks[0].Disable;
  _268 (87);
  # DEBUG BEGIN_STMT
  _269 = Clock_Ip_axCmuCallbacks[0].Clear;
  _269 (87);
  # DEBUG BEGIN_STMT
  _270 = Clock_Ip_axCmuCallbacks[0].GetStatus;
  _270 (87);
  # DEBUG BEGIN_STMT
  _271 = Clock_Ip_axDividerCallbacks[0].Set;
  _271 (0B);
  # DEBUG BEGIN_STMT
  _272 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _272 (0B);
  # DEBUG BEGIN_STMT
  _273 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _273 (0B);
  # DEBUG BEGIN_STMT
  _274 = Clock_Ip_axFracDivCallbacks[0].Set;
  _274 (0B);
  # DEBUG BEGIN_STMT
  _275 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _275 (87);
  # DEBUG BEGIN_STMT
  _276 = Clock_Ip_axGateCallbacks[0].Set;
  _276 (0B);
  # DEBUG BEGIN_STMT
  _277 = Clock_Ip_axGateCallbacks[0].Update;
  _277 (87, 0);
  # DEBUG BEGIN_STMT
  _278 = Clock_Ip_axIntOscCallbacks[0].Set;
  _278 (0B);
  # DEBUG BEGIN_STMT
  _279 = Clock_Ip_axPllCallbacks[0].Set;
  _279 (0B);
  # DEBUG BEGIN_STMT
  _280 = Clock_Ip_axPllCallbacks[0].Complete;
  _280 (87);
  # DEBUG BEGIN_STMT
  _281 = Clock_Ip_axSelectorCallbacks[0].Set;
  _281 (0B);
  # DEBUG BEGIN_STMT
  _282 = Clock_Ip_axPcfsCallbacks[0].Set;
  _282 (0B);
  # DEBUG BEGIN_STMT
  Clock_Ip_GetConfiguredFrequencyValue (87);

  <bb 26> [local count: 118111600]:
  goto <bb 28>; [100.00%]

  <bb 27> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _26 = Config_159(D)->Pcfs[Index_128].Name;
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8PcfsCallbackIndex[_28];
  CallbackIndex_206 = (uint32) _29;
  # DEBUG CallbackIndex => CallbackIndex_206
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_axPcfsCallbacks[CallbackIndex_206].Set;
  _31 = &Config_159(D)->Pcfs[Index_128];
  _30 (_31);
  # DEBUG BEGIN_STMT
  Index_208 = Index_128 + 1;
  # DEBUG Index => Index_208

  <bb 28> [local count: 236223200]:
  # Index_128 = PHI <0(26), Index_208(27)>
  # DEBUG Config => NULL
  # DEBUG Index => NULL
  # DEBUG Index => NULL
  # DEBUG Index => Index_128
  # DEBUG BEGIN_STMT
  _32 = Config_159(D)->PcfsCount;
  _33 = (long unsigned int) _32;
  if (_33 > Index_128)
    goto <bb 27>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _34 = Config_159(D)->DividerTriggers[Index_129].Name;
  _35 = Clock_Ip_au8ClockFeatures[_34][1];
  _36 = (int) _35;
  _37 = Clock_Ip_au8DividerTriggerCallbackIndex[_36];
  CallbackIndex_203 = (uint32) _37;
  # DEBUG CallbackIndex => CallbackIndex_203
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_203].Configure;
  _39 = &Config_159(D)->DividerTriggers[Index_129];
  _38 (_39);
  # DEBUG BEGIN_STMT
  Index_205 = Index_129 + 1;
  # DEBUG Index => Index_205

  <bb 30> [local count: 236223200]:
  # Index_129 = PHI <Index_205(29), 0(28)>
  # DEBUG Index => Index_129
  # DEBUG BEGIN_STMT
  _40 = Config_159(D)->DividerTriggersCount;
  _41 = (long unsigned int) _40;
  if (_41 > Index_129)
    goto <bb 29>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _42 = Config_159(D)->Dividers[Index_130].Name;
  _43 = Clock_Ip_au8ClockFeatures[_42][1];
  _44 = (int) _43;
  _45 = Clock_Ip_au8DividerCallbackIndex[_44];
  CallbackIndex_200 = (uint32) _45;
  # DEBUG CallbackIndex => CallbackIndex_200
  # DEBUG BEGIN_STMT
  _46 = Clock_Ip_axDividerCallbacks[CallbackIndex_200].Set;
  _47 = &Config_159(D)->Dividers[Index_130];
  _46 (_47);
  # DEBUG BEGIN_STMT
  Index_202 = Index_130 + 1;
  # DEBUG Index => Index_202

  <bb 32> [local count: 1073741824]:
  # Index_130 = PHI <Index_202(31), 0(30)>
  # DEBUG Index => Index_130
  # DEBUG BEGIN_STMT
  _48 = Config_159(D)->DividersCount;
  _49 = (long unsigned int) _48;
  if (_49 > Index_130)
    goto <bb 31>; [89.00%]
  else
    goto <bb 34>; [11.00%]

  <bb 33> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _50 = Config_159(D)->DividerTriggers[Index_131].Name;
  _51 = Clock_Ip_au8ClockFeatures[_50][1];
  _52 = (int) _51;
  _53 = Clock_Ip_au8DividerTriggerCallbackIndex[_52];
  CallbackIndex_197 = (uint32) _53;
  # DEBUG CallbackIndex => CallbackIndex_197
  # DEBUG BEGIN_STMT
  _54 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_197].TriggerUpdate;
  _55 = &Config_159(D)->DividerTriggers[Index_131];
  _54 (_55);
  # DEBUG BEGIN_STMT
  Index_199 = Index_131 + 1;
  # DEBUG Index => Index_199

  <bb 34> [local count: 236223201]:
  # Index_131 = PHI <Index_199(33), 0(32)>
  # DEBUG Index => Index_131
  # DEBUG BEGIN_STMT
  _56 = Config_159(D)->DividerTriggersCount;
  _57 = (long unsigned int) _56;
  if (_57 > Index_131)
    goto <bb 33>; [50.00%]
  else
    goto <bb 36>; [50.00%]

  <bb 35> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _58 = Config_159(D)->Plls[Index_132].Name;
  _59 = Clock_Ip_au8ClockFeatures[_58][1];
  _60 = (int) _59;
  _61 = Clock_Ip_au8PllCallbackIndex[_60];
  CallbackIndex_194 = (uint32) _61;
  # DEBUG CallbackIndex => CallbackIndex_194
  # DEBUG BEGIN_STMT
  _62 = Clock_Ip_axPllCallbacks[CallbackIndex_194].Set;
  _63 = &Config_159(D)->Plls[Index_132];
  _62 (_63);
  # DEBUG BEGIN_STMT
  Index_196 = Index_132 + 1;
  # DEBUG Index => Index_196

  <bb 36> [local count: 236223201]:
  # Index_132 = PHI <Index_196(35), 0(34)>
  # DEBUG Index => Index_132
  # DEBUG BEGIN_STMT
  _64 = Config_159(D)->PllsCount;
  _65 = (long unsigned int) _64;
  if (_65 > Index_132)
    goto <bb 35>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _66 = Config_159(D)->Cmus[Index_133].Name;
  _67 = Clock_Ip_au8ClockFeatures[_66][1];
  _68 = (int) _67;
  _69 = Clock_Ip_au8CmuCallbackIndex[_68];
  CallbackIndex_191 = (uint32) _69;
  # DEBUG CallbackIndex => CallbackIndex_191
  # DEBUG BEGIN_STMT
  _70 = Clock_Ip_axCmuCallbacks[CallbackIndex_191].Set;
  _71 = &Config_159(D)->Cmus[Index_133];
  _70 (_71);
  # DEBUG BEGIN_STMT
  Index_193 = Index_133 + 1;
  # DEBUG Index => Index_193

  <bb 38> [local count: 236223201]:
  # Index_133 = PHI <Index_193(37), 0(36)>
  # DEBUG Index => Index_133
  # DEBUG BEGIN_STMT
  _72 = Config_159(D)->CmusCount;
  _73 = (long unsigned int) _72;
  if (_73 > Index_133)
    goto <bb 37>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 39> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _74 = Config_159(D)->Xoscs[Index_134].Name;
  _75 = Clock_Ip_au8ClockFeatures[_74][1];
  _76 = (int) _75;
  _77 = Clock_Ip_au8XoscCallbackIndex[_76];
  CallbackIndex_188 = (uint32) _77;
  # DEBUG CallbackIndex => CallbackIndex_188
  # DEBUG BEGIN_STMT
  _78 = Clock_Ip_axExtOscCallbacks[CallbackIndex_188].Complete;
  _79 = &Config_159(D)->Xoscs[Index_134];
  _78 (_79);
  # DEBUG BEGIN_STMT
  Index_190 = Index_134 + 1;
  # DEBUG Index => Index_190

  <bb 40> [local count: 236223201]:
  # Index_134 = PHI <Index_190(39), 0(38)>
  # DEBUG Index => Index_134
  # DEBUG BEGIN_STMT
  _80 = Config_159(D)->XoscsCount;
  _81 = (long unsigned int) _80;
  if (_81 > Index_134)
    goto <bb 39>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _82 = Config_159(D)->Plls[Index_135].Name;
  _83 = Clock_Ip_au8ClockFeatures[_82][1];
  _84 = (int) _83;
  _85 = Clock_Ip_au8PllCallbackIndex[_84];
  CallbackIndex_185 = (uint32) _85;
  # DEBUG CallbackIndex => CallbackIndex_185
  # DEBUG BEGIN_STMT
  _86 = Clock_Ip_axPllCallbacks[CallbackIndex_185].Enable;
  _87 = &Config_159(D)->Plls[Index_135];
  _86 (_87);
  # DEBUG BEGIN_STMT
  Index_187 = Index_135 + 1;
  # DEBUG Index => Index_187

  <bb 42> [local count: 236223201]:
  # Index_135 = PHI <Index_187(41), 0(40)>
  # DEBUG Index => Index_135
  # DEBUG BEGIN_STMT
  _88 = Config_159(D)->PllsCount;
  _89 = (long unsigned int) _88;
  if (_89 > Index_135)
    goto <bb 41>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 43> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _90 = Config_159(D)->FracDivs[Index_136].Name;
  _91 = Clock_Ip_au8ClockFeatures[_90][1];
  _92 = (int) _91;
  _93 = Clock_Ip_au8FractionalDividerCallbackIndex[_92];
  CallbackIndex_182 = (uint32) _93;
  # DEBUG CallbackIndex => CallbackIndex_182
  # DEBUG BEGIN_STMT
  _94 = Clock_Ip_axFracDivCallbacks[CallbackIndex_182].Set;
  _95 = &Config_159(D)->FracDivs[Index_136];
  _94 (_95);
  # DEBUG BEGIN_STMT
  Index_184 = Index_136 + 1;
  # DEBUG Index => Index_184

  <bb 44> [local count: 236223201]:
  # Index_136 = PHI <Index_184(43), 0(42)>
  # DEBUG Index => Index_136
  # DEBUG BEGIN_STMT
  _96 = Config_159(D)->FracDivsCount;
  _97 = (long unsigned int) _96;
  if (_97 > Index_136)
    goto <bb 43>; [50.00%]
  else
    goto <bb 45>; [50.00%]

  <bb 45> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  Clock_Ip_driverContext.ClockTreeIsConsumingPll = 0;
  # DEBUG BEGIN_STMT
  Clock_Ip_driverContext.WaitStatesAreSupported = 0;
  # DEBUG BEGIN_STMT
  Clock_Ip_driverContext.HwPllsNo = 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_driverContext.HwDfsNo = 0;
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY NULL
  # DEBUG BEGIN_STMT
  # DEBUG Counter => 4026531839
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 50>; [100.00%]

  <bb 46> [local count: 955630213]:
  # DEBUG BEGIN_STMT
  _98 = Config_159(D)->Selectors[Index_137].Value;
  _99 = Clock_Ip_aeSourceTypeClockName[_98];
  if (_99 != 3)
    goto <bb 47>; [66.00%]
  else
    goto <bb 48>; [34.00%]

  <bb 47> [local count: 630715941]:
  # DEBUG BEGIN_STMT
  _100 = Config_159(D)->Selectors[Index_137].Name;
  _101 = Clock_Ip_au8ClockFeatures[_100][1];
  _102 = (int) _101;
  _103 = Clock_Ip_au8SelectorCallbackIndex[_102];
  CallbackIndex_179 = (uint32) _103;
  # DEBUG CallbackIndex => CallbackIndex_179
  # DEBUG BEGIN_STMT
  _104 = Clock_Ip_axSelectorCallbacks[CallbackIndex_179].Set;
  _105 = &Config_159(D)->Selectors[Index_137];
  _104 (_105);
  goto <bb 49>; [100.00%]

  <bb 48> [local count: 324914272]:
  # DEBUG BEGIN_STMT
  Clock_Ip_driverContext.ClockTreeIsConsumingPll = 1;

  <bb 49> [local count: 955630213]:
  # DEBUG BEGIN_STMT
  Index_181 = Index_137 + 1;
  # DEBUG Index => Index_181

  <bb 50> [local count: 1073741812]:
  # Index_137 = PHI <0(45), Index_181(49)>
  # DEBUG Index => Index_137
  # DEBUG BEGIN_STMT
  _106 = Config_159(D)->SelectorsCount;
  _107 = (long unsigned int) _106;
  if (_107 > Index_137)
    goto <bb 46>; [89.00%]
  else
    goto <bb 51>; [11.00%]

  <bb 51> [local count: 118111599]:
  # DEBUG BEGIN_STMT
  _108 = Clock_Ip_driverContext.ClockTreeIsConsumingPll;
  if (_108 != 0)
    goto <bb 57>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 52> [local count: 477815108]:
  # DEBUG BEGIN_STMT
  _109 = Config_159(D)->Gates[Index_138].Name;
  _110 = Clock_Ip_au8ClockFeatures[_109][1];
  _111 = (int) _110;
  _112 = Clock_Ip_au8GateCallbackIndex[_111];
  CallbackIndex_175 = (uint32) _112;
  # DEBUG CallbackIndex => CallbackIndex_175
  # DEBUG BEGIN_STMT
  _113 = Clock_Ip_axGateCallbacks[CallbackIndex_175].Set;
  _114 = &Config_159(D)->Gates[Index_138];
  _113 (_114);
  # DEBUG BEGIN_STMT
  Index_177 = Index_138 + 1;
  # DEBUG Index => Index_177

  <bb 53> [local count: 536870908]:
  # Index_138 = PHI <Index_177(52), 0(51)>
  # DEBUG Index => Index_138
  # DEBUG BEGIN_STMT
  _115 = Config_159(D)->GatesCount;
  _116 = (long unsigned int) _115;
  if (_116 > Index_138)
    goto <bb 52>; [89.00%]
  else
    goto <bb 55>; [11.00%]

  <bb 54> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _117 = Config_159(D)->Cmus[Index_139].Name;
  _118 = Clock_Ip_au8ClockFeatures[_117][1];
  _119 = (int) _118;
  _120 = Clock_Ip_au8CmuCallbackIndex[_119];
  CallbackIndex_172 = (uint32) _120;
  # DEBUG CallbackIndex => CallbackIndex_172
  # DEBUG BEGIN_STMT
  _121 = Clock_Ip_axCmuCallbacks[CallbackIndex_172].Enable;
  _122 = &Config_159(D)->Cmus[Index_139];
  _121 (_122);
  # DEBUG BEGIN_STMT
  Index_174 = Index_139 + 1;
  # DEBUG Index => Index_174

  <bb 55> [local count: 118111600]:
  # Index_139 = PHI <Index_174(54), 0(53)>
  # DEBUG Index => Index_139
  # DEBUG BEGIN_STMT
  _123 = Config_159(D)->CmusCount;
  _124 = (long unsigned int) _123;
  if (_124 > Index_139)
    goto <bb 54>; [50.00%]
  else
    goto <bb 56>; [50.00%]

  <bb 56> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Config_159(D), 4);

  <bb 57> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function Clock_Ip_Init (Clock_Ip_Init, funcdef_no=4, decl_uid=5665, cgraph_uid=5, symbol_order=7)

Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  _Bool _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ClockStatus => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_InitClock (Config_5(D));
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_driverContext.ClockTreeIsConsumingPll;
  if (_1 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 3> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  PllStatus_8 = Clock_Ip_GetPllStatus ();
  # DEBUG PllStatus => PllStatus_8
  # DEBUG BEGIN_STMT
  if (PllStatus_8 == 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [local count: 116930485]:
  # DEBUG BEGIN_STMT
  Clock_Ip_DistributePll ();
  # DEBUG BEGIN_STMT
  # DEBUG ClockStatus => 0

  <bb 5> [local count: 1073741824]:
  # ClockStatus_2 = PHI <0(4), 0(2), 1(3)>
  # DEBUG ClockStatus => ClockStatus_2
  # DEBUG BEGIN_STMT
  return ClockStatus_2;

}


