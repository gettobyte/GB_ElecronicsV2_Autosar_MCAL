Parsed function:Clock_Ip_EnableSpll_TrustedCall.part.0
Parsed function:Clock_Ip_SetSpll_TrustedCall.part.0
Parsed function:Clock_Ip_CompleteSpll.part.0
Parsed function:Clock_Ip_EnableSpll_TrustedCall
Parsed function:Clock_Ip_DisableSpll_TrustedCall
Parsed function:Clock_Ip_SetSpll_TrustedCall
Parsed function:Clock_Ip_ResetSpll_TrustedCall
Parsed function:Clock_Ip_EnableSpll
Parsed function:Clock_Ip_DisableSpll
Parsed function:Clock_Ip_CompleteSpll
Parsed function:Clock_Ip_SetSpll
Parsed function:Clock_Ip_ResetSpll
Parsed function:Clock_Ip_CallbackPllEmptyDisable
Parsed function:Clock_Ip_CallbackPllEmptyComplete
Parsed function:Clock_Ip_CallbackPllEmpty
Dump after hash based groups
Congruence classes: 13 (unique hash values: 13), with total: 16 items
Class size histogram [num of members]: number of classe number of classess
[1]: 11 classes
[2]: 1 classes
[3]: 1 classes


Dump after WPA based types groups
Congruence classes: 14 (unique hash values: 13), with total: 16 items
Class size histogram [num of members]: number of classe number of classess
[1]: 13 classes
[3]: 1 classes


Worklist has been filled with: 13
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 16 (unique hash values: 13), with total: 16 items
Class size histogram [num of members]: number of classe number of classess
[1]: 16 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 16 (unique hash values: 13), with total: 16 items
Class size histogram [num of members]: number of classe number of classess
[1]: 16 classes


Worklist has been filled with: 15
Address reference subdivision created: 0 new classes.
Congruence classes: 16 (unique hash values: 13), with total: 16 items
Class size histogram [num of members]: number of classe number of classess
[1]: 16 classes



Item count: 16
Congruent classes before: 16, after: 16
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

Clock_Ip_EnableSpll_TrustedCall.part.0 ()
{
  const struct Clock_Ip_PllConfigType * Config;
  long unsigned int _1;
  long unsigned int _2;

  <bb 4> [local count: 1073741824]:
  # DEBUG D#2 s=> Config
  # DEBUG Config => D#2

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 | 1;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _2;

  <bb 3> [local count: 1073741824]:
  return;

}


Clock_Ip_SetSpll_TrustedCall.part.0 (const struct Clock_Ip_PllConfigType * Config)
{
  long unsigned int _1;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;

  <bb 7> [local count: 1073741824]:

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _3 = Config_2(D)->Predivider;
  _4 = (long unsigned int) _3;
  _5 = _4 + 4294967295;
  _6 = _5 << 8;
  _7 = _6 & 1792;
  _8 = Config_2(D)->MulFactorDiv;
  _9 = (long unsigned int) _8;
  _10 = _9 + 4294967280;
  _11 = _10 << 16;
  _12 = _11 & 2031616;
  _13 = _7 | _12;
  _14 = _1 | _13;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _14;
  # DEBUG BEGIN_STMT
  _15 = Config_2(D)->Monitor;
  switch (_15) <default: <L3> [25.00%], case 0: <L0> [25.00%], case 1: <L1> [25.00%], case 2: <L2> [25.00%]>

  <bb 3> [local count: 268435456]:
<L0>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 268435456]:
<L1>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 65536;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 268435456]:
<L2>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 196608;
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
<L3>:
  return;

}


Clock_Ip_CompleteSpll.part.0 (Clock_Ip_NameType PllName)
{
  Clock_Ip_PllStatusReturnType PllStatus;
  boolean TimeoutOccurred;
  uint32 StartTime;
  uint32 ElapsedTime;
  uint32 TimeoutTicks;
  uint32 SpllStatus;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int TimeoutTicks.0_4;

  <bb 9> [local count: 114863532]:

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 >> 24;
  SpllStatus_3 = _2 & 1;
  # DEBUG SpllStatus => SpllStatus_3
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_4 = TimeoutTicks;
  TimeoutOccurred_5 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_4);
  # DEBUG TimeoutOccurred => TimeoutOccurred_5
  # DEBUG BEGIN_STMT
  if (SpllStatus_3 == 0)
    goto <bb 4>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 4> [local count: 1014686025]:
  if (TimeoutOccurred_5 != 0)
    goto <bb 6>; [5.50%]
  else
    goto <bb 5>; [94.50%]

  <bb 5> [local count: 958878293]:
  goto <bb 3>; [100.00%]

  <bb 6> [local count: 114863532]:
  # TimeoutOccurred_6 = PHI <TimeoutOccurred_5(3), TimeoutOccurred_5(4)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_6 != 0)
    goto <bb 7>; [47.77%]
  else
    goto <bb 8>; [52.23%]

  <bb 7> [local count: 54870309]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, PllName_7(D));

  <bb 8> [local count: 114863532]:
  # PllStatus_8 = PHI <2(6), 1(7)>
  # DEBUG PllStatus => PllStatus_8
  # DEBUG BEGIN_STMT
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return PllStatus_8;

}


Clock_Ip_EnableSpll_TrustedCall (const struct Clock_Ip_PllConfigType * Config)
{
  short unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Config_5(D)->Enable;
  if (_1 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG D#1 => Config_5(D)
  Clock_Ip_EnableSpll_TrustedCall.part.0 ();

  <bb 4> [local count: 1073741824]:
  return;

}


Clock_Ip_DisableSpll_TrustedCall (Clock_Ip_NameType PllName)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 & 4286578687;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _4 = _3 & 4294967294;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _4;
  return;

}


Clock_Ip_SetSpll_TrustedCall (const struct Clock_Ip_PllConfigType * Config)
{
  short unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Config_5(D)->Enable;
  if (_1 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  Clock_Ip_SetSpll_TrustedCall.part.0 (Config_5(D));

  <bb 4> [local count: 1073741824]:
<L7>:
  return;

}


Clock_Ip_ResetSpll_TrustedCall (const struct Clock_Ip_PllConfigType * Config)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 & 4286578687;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _4 = _3 & 4294901759;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _6 = _5 & 4294836223;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _6;
  # DEBUG BEGIN_STMT
  _7 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _8 = _7 & 4294967294;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _10 = _9 & 4294965503;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _10;
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _12 = _11 & 4292935679;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _12;
  return;

}


Clock_Ip_EnableSpll (const struct Clock_Ip_PllConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_EnableSpll_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_DisableSpll (Clock_Ip_NameType PllName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_DisableSpll_TrustedCall (PllName_2(D));
  return;

}


Clock_Ip_CompleteSpll (Clock_Ip_NameType PllName)
{
  Clock_Ip_PllStatusReturnType PllStatus;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 348071309]:
  # DEBUG BEGIN_STMT
  # DEBUG PllStatus => 1
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 4>; [67.00%]

  <bb 3> [local count: 114863531]:
  PllStatus_4 = Clock_Ip_CompleteSpll.part.0 (PllName_8(D));

  <bb 4> [local count: 348071309]:
  # PllStatus_5 = PHI <PllStatus_4(3), 0(2)>
  # DEBUG PllStatus => PllStatus_5
  # DEBUG BEGIN_STMT
  return PllStatus_5;

}


Clock_Ip_SetSpll (const struct Clock_Ip_PllConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetSpll_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_ResetSpll (const struct Clock_Ip_PllConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ResetSpll_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_CallbackPllEmptyDisable (Clock_Ip_NameType PllName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_CallbackPllEmptyComplete (Clock_Ip_NameType PllName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return 0;

}


Clock_Ip_CallbackPllEmpty (const struct Clock_Ip_PllConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


