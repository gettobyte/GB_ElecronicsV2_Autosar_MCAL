IPA function summary for Clock_Ip_Command/41 inlinable
  global time:     14.000000
  self size:       16
  global size:     16
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op1 changed)
  calls:
    DisableSafeClock/28 function not considered for inlining
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:15 stack: 0 predicate: (op1 == 4)
    Clock_Ip_SpecificPlatformInitClock/31 function not considered for inlining
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:18 stack:12 predicate: (op1 == 1)
    Clock_Ip_ClockInitializeObjects/39 function not considered for inlining
      loop depth: 0 freq:0.25 size: 1 time: 10callee size:43 stack: 0 predicate: (op1 == 2)

IPA function summary for Clock_Ip_ClockPowerModeChangeNotification/40 inlinable
  global time:     53.740000
  self size:       197
  global size:     197
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.500000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:28.000000, time:2.380000,  executed if:(op1 == 2) && (op0 == 3)
    size:2.000000, time:0.500000,  executed if:(op0 <= 2) && (op0 >= 1),  nonconst if:(op1 changed) && (op0 <= 2) && (op0 >= 1)
    size:24.000000, time:3.000000,  executed if:(op1 == 0) && (op0 <= 2) && (op0 >= 1)
    size:2.000000, time:0.500000,  executed if:(op0 == 0),  nonconst if:(op1 changed) && (op0 == 0)
    size:28.000000, time:2.380000,  executed if:(op1 == 2) && (op0 == 0)
  calls:
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)

IPA function summary for Clock_Ip_ClockInitializeObjects/39 inlinable
  global time:     208.500000
  self size:       86
  global size:     86
  min size:       84
  self stack:      0
  global stack:    0
    size:41.000000, time:29.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    getSlowDividerConfig/38 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:21 stack: 0
       op0 is compile time invariant
    getSlowDividerConfig/38 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:21 stack: 0
       op0 is compile time invariant
    getSlowDividerConfig/38 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:21 stack: 0
       op0 is compile time invariant
    getBusDividerConfig/37 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getBusDividerConfig/37 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getBusDividerConfig/37 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getCoreDividerConfig/36 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getCoreDividerConfig/36 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getCoreDividerConfig/36 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getSelectorConfig/35 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getSelectorConfig/35 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getSelectorConfig/35 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:22 stack: 0
       op0 is compile time invariant
    getSpllConfig/34 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:13 stack: 0
    getSoscConfig/33 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:10 stack: 0
    getFircConfig/32 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:13 stack: 0

IPA function summary for getSlowDividerConfig/38 inlinable
  global time:     56.499953
  self size:       42
  global size:     42
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:48.930510
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:14.000000, time:4.039796,  nonconst if:(op0 changed)
    size:4.000000, time:0.509949,  executed if:(op0 == 39)
    size:4.000000, time:0.509949,  executed if:(op0 == 38)
    size:4.000000, time:0.509949,  executed if:(op0 == 37)
  calls:

IPA function summary for getBusDividerConfig/37 inlinable
  global time:     56.882414
  self size:       45
  global size:     45
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:48.930510
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:14.000000, time:4.039796,  nonconst if:(op0 changed)
    size:5.000000, time:0.637436,  executed if:(op0 == 35)
    size:5.000000, time:0.637436,  executed if:(op0 == 34)
    size:5.000000, time:0.637436,  executed if:(op0 == 33)
  calls:

IPA function summary for getCoreDividerConfig/36 inlinable
  global time:     56.882414
  self size:       45
  global size:     45
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:48.930510
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:14.000000, time:4.039796,  nonconst if:(op0 changed)
    size:5.000000, time:0.637436,  executed if:(op0 == 31)
    size:5.000000, time:0.637436,  executed if:(op0 == 30)
    size:5.000000, time:0.637436,  executed if:(op0 == 29)
  calls:

IPA function summary for getSelectorConfig/35 inlinable
  global time:     56.882414
  self size:       45
  global size:     45
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:48.930510
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:14.000000, time:4.039796,  nonconst if:(op0 changed)
    size:5.000000, time:0.637436,  executed if:(op0 == 27)
    size:5.000000, time:0.637436,  executed if:(op0 == 26)
    size:5.000000, time:0.637436,  executed if:(op0 == 25)
  calls:

IPA function summary for getSpllConfig/34 inlinable
  global time:     56.545403
  self size:       27
  global size:     27
  min size:       0
  self stack:      0
  global stack:    0
    size:24.000000, time:54.545403
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for getSoscConfig/33 inlinable
  global time:     52.975403
  self size:       20
  global size:     20
  min size:       0
  self stack:      0
  global stack:    0
    size:17.000000, time:50.975403
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for getFircConfig/32 inlinable
  global time:     56.545403
  self size:       27
  global size:     27
  min size:       0
  self stack:      0
  global stack:    0
    size:24.000000, time:54.545403
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_SpecificPlatformInitClock/31 inlinable
  global time:     96.413792
  self size:       36
  global size:     36
  min size:       32
  self stack:      12
  global stack:    12
    size:17.000000, time:30.999332
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetSimLpoclksRegister_TrustedCall/30 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:17 stack: 0
    Clock_Ip_ReportClockErrors/65 function body not available
      loop depth: 0 freq:0.11 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant
    Clock_Ip_TimeoutExpired/64 function body not available
      loop depth: 1 freq:3.08 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    Clock_Ip_StartTimeout/63 function body not available
      loop depth: 0 freq:0.33 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant
    SetFircToResetValue_TrustedCall/29 function not considered for inlining
      loop depth: 0 freq:0.33 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for SetSimLpoclksRegister_TrustedCall/30 inlinable
  global time:     190.398183
  self size:       35
  global size:     35
  min size:       0
  self stack:      0
  global stack:    0
    size:27.000000, time:156.623637
    size:6.000000, time:15.592727,  executed if:(not inlined)
    size:0.500000, time:4.545455,  executed if:(not inlined),  nonconst if:(op0[ref offset: 56] changed) && (not inlined)
    size:0.500000, time:4.545455,  nonconst if:(op0[ref offset: 56] changed)
    size:0.500000, time:4.545455,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:0.500000, time:4.545455,  nonconst if:(op0[ref offset: 96] changed)
  calls:

IPA function summary for SetFircToResetValue_TrustedCall/29 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for DisableSafeClock/28 inlinable
  global time:     66.568988
  self size:       31
  global size:     31
  min size:       8
  self stack:      0
  global stack:    0
    size:5.000000, time:2.639589
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:13.000000, time:51.929399,  executed if:(op0 != 0B)
  calls:
    indirect call loop depth: 0 freq:0.33 size: 4 time: 16
    indirect call loop depth: 0 freq:0.17 size: 4 time: 16predicate: (op0 != 0B)


Flattening functions:
Overall time estimate: 1028.834370 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Clock_Ip_Command/41.
Enqueueing calls in Clock_Ip_ClockPowerModeChangeNotification/40.
Enqueueing calls in Clock_Ip_ClockInitializeObjects/39.
Enqueueing calls in getSlowDividerConfig/38.
Enqueueing calls in getBusDividerConfig/37.
Enqueueing calls in getCoreDividerConfig/36.
Enqueueing calls in getSelectorConfig/35.
Enqueueing calls in getSpllConfig/34.
Enqueueing calls in getSoscConfig/33.
Enqueueing calls in getFircConfig/32.
Enqueueing calls in Clock_Ip_SpecificPlatformInitClock/31.
Enqueueing calls in SetSimLpoclksRegister_TrustedCall/30.
Enqueueing calls in SetFircToResetValue_TrustedCall/29.
Enqueueing calls in DisableSafeClock/28.

Considering getSlowDividerConfig/38 with 42 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:976
 Estimated badness is -0.051542, frequency 1.00.

Considering getSlowDividerConfig/38 with 42 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:973
 Estimated badness is -0.051542, frequency 1.00.

Considering getSlowDividerConfig/38 with 42 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:974
 Estimated badness is -0.051542, frequency 1.00.

Considering getBusDividerConfig/37 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:968
 Estimated badness is -0.047629, frequency 1.00.

Considering getBusDividerConfig/37 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:970
 Estimated badness is -0.047629, frequency 1.00.

Considering getCoreDividerConfig/36 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:961
 Estimated badness is -0.047629, frequency 1.00.

Considering getCoreDividerConfig/36 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:962
 Estimated badness is -0.047629, frequency 1.00.

Considering getSelectorConfig/35 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:955
 Estimated badness is -0.047629, frequency 1.00.

Considering getBusDividerConfig/37 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:967
 Estimated badness is -0.047629, frequency 1.00.

Considering getSelectorConfig/35 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:956
 Estimated badness is -0.047629, frequency 1.00.

Considering getSelectorConfig/35 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:958
 Estimated badness is -0.047629, frequency 1.00.

Considering getCoreDividerConfig/36 with 45 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:964
 Estimated badness is -0.047629, frequency 1.00.

Considering getSoscConfig/33 with 20 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:943
 Estimated badness is -0.034323, frequency 1.00.

Considering getSpllConfig/34 with 27 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:945
 Estimated badness is -0.021886, frequency 1.00.

Considering getFircConfig/32 with 27 size
 to be inlined into Clock_Ip_ClockInitializeObjects/39 in ../RTD/src/Clock_Ip_Specific.c:942
 Estimated badness is -0.021886, frequency 1.00.

Considering DisableSafeClock/28 with 31 size
 to be inlined into Clock_Ip_Command/41 in ../RTD/src/Clock_Ip_Specific.c:1132
 Estimated badness is -0.011905, frequency 0.25.

Considering Clock_Ip_SpecificPlatformInitClock/31 with 36 size
 to be inlined into Clock_Ip_Command/41 in ../RTD/src/Clock_Ip_Specific.c:1129
 Estimated badness is -0.008922, frequency 0.25.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining Clock_Ip_ClockInitializeObjects size 322.
 Called once from Clock_Ip_Command 73 insns.
 Inlined into Clock_Ip_Command which now has 391 size
Overall time estimate: 491.883652 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :        3 calls, 0.880933 freq, 0 count
call is unlikely and code size would grow         :        2 calls, 0.332500 freq, 0 count
IPA function summary for Clock_Ip_Command/41 inlinable
  global time:     241.745469
  self size:       16
  global size:     391
  min size:       0
  self stack:      0
  global stack:    12
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op1 changed)
    size:5.000000, time:0.659897,  executed if:(op1 == 4)
    size:2.000000, time:0.500000,  executed if:(op1 == 4),  nonconst if:(op0 changed) && (op1 == 4)
    size:13.000000, time:12.982350,  executed if:(op0 != 0B) && (op1 == 4)
    size:17.000000, time:7.749833,  executed if:(op1 == 1)
    size:319.000000, time:195.999774,  executed if:(op1 == 2)
  calls:
    DisableSafeClock/28 inlined
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:15 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 4)
      indirect call loop depth: 0 freq:0.04 size: 4 time: 16predicate: (op0 != 0B) && (op1 == 4)
    Clock_Ip_SpecificPlatformInitClock/31 inlined
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:18 stack:12
      Stack frame offset 0, callee self size 12, callee size 12
      SetSimLpoclksRegister_TrustedCall/30 call is unlikely and code size would grow
        loop depth: 0 freq:0.25 size: 2 time: 11callee size:17 stack: 0 predicate: (op1 == 1)
      Clock_Ip_ReportClockErrors/65 function body not available
        loop depth: 0 freq:0.03 size: 3 time: 12 predicate: (op1 == 1)
         op0 is compile time invariant
         op1 is compile time invariant
      Clock_Ip_TimeoutExpired/64 function body not available
        loop depth: 1 freq:0.77 size: 5 time: 14 predicate: (op1 == 1)
         op0 is compile time invariant
         op1 is compile time invariant
      Clock_Ip_StartTimeout/63 function body not available
        loop depth: 0 freq:0.08 size: 5 time: 14 predicate: (op1 == 1)
         op0 is compile time invariant
         op1 is compile time invariant
         op2 is compile time invariant
         op3 is compile time invariant
      SetFircToResetValue_TrustedCall/29 call is unlikely and code size would grow
        loop depth: 0 freq:0.08 size: 1 time: 10callee size: 3 stack: 0 predicate: (op1 == 1)
    Clock_Ip_ClockInitializeObjects/39 inlined
      loop depth: 0 freq:0.25 size: 1 time: 10callee size:161 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      getSlowDividerConfig/66 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:21 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSlowDividerConfig/38 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:21 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSlowDividerConfig/67 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:21 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getBusDividerConfig/69 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getBusDividerConfig/68 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getBusDividerConfig/37 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getCoreDividerConfig/36 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getCoreDividerConfig/71 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getCoreDividerConfig/70 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSelectorConfig/35 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSelectorConfig/73 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSelectorConfig/72 inlined
        loop depth: 0 freq:0.25 size: 3 time: 12callee size:22 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSpllConfig/34 inlined
        loop depth: 0 freq:0.25 size: 2 time: 11callee size:13 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getSoscConfig/33 inlined
        loop depth: 0 freq:0.25 size: 2 time: 11callee size:10 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      getFircConfig/32 inlined
        loop depth: 0 freq:0.25 size: 2 time: 11callee size:13 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for Clock_Ip_ClockPowerModeChangeNotification/40 inlinable
  global time:     53.740000
  self size:       197
  global size:     197
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.500000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:28.000000, time:2.380000,  executed if:(op1 == 2) && (op0 == 3)
    size:2.000000, time:0.500000,  executed if:(op0 <= 2) && (op0 >= 1),  nonconst if:(op1 changed) && (op0 <= 2) && (op0 >= 1)
    size:24.000000, time:3.000000,  executed if:(op1 == 0) && (op0 <= 2) && (op0 >= 1)
    size:2.000000, time:0.500000,  executed if:(op0 == 0),  nonconst if:(op1 changed) && (op0 == 0)
    size:28.000000, time:2.380000,  executed if:(op1 == 2) && (op0 == 0)
  calls:
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 3)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.08 size: 4 time: 16predicate: (op1 == 2) && (op0 == 0)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)
    indirect call loop depth: 0 freq:0.12 size: 4 time: 16predicate: (op1 == 0) && (op0 <= 2) && (op0 >= 1)

IPA function summary for SetSimLpoclksRegister_TrustedCall/30 inlinable
  global time:     190.398183
  self size:       35
  global size:     35
  min size:       27
  self stack:      0
  global stack:    0
  estimated growth:26
    size:27.000000, time:156.623637
    size:6.000000, time:15.592727,  executed if:(not inlined)
    size:0.500000, time:4.545455,  executed if:(not inlined),  nonconst if:(op0[ref offset: 56] changed) && (not inlined)
    size:0.500000, time:4.545455,  nonconst if:(op0[ref offset: 56] changed)
    size:0.500000, time:4.545455,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:0.500000, time:4.545455,  nonconst if:(op0[ref offset: 96] changed)
  calls:

IPA function summary for SetFircToResetValue_TrustedCall/29 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       4
  self stack:      0
  global stack:    0
  estimated growth:3
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

getSelectorConfig/73 (getSelectorConfig) @06dc6c40
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 72
  References: Clock_Ip_apConfig/1 (read)SelectorConfigurations.6170/58 (addr)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)
  Referring: 
  Function getSelectorConfig/73 is inline copy in Clock_Ip_Command/41
  Clone of getSelectorConfig/35
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSelectorConfig/72 (getSelectorConfig) @06dc68c0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 35
  previous sharing asm name: 73
  References: Clock_Ip_apConfig/1 (read)SelectorConfigurations.6170/58 (addr)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)
  Referring: 
  Function getSelectorConfig/72 is inline copy in Clock_Ip_Command/41
  Clone of getSelectorConfig/35
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getCoreDividerConfig/71 (getCoreDividerConfig) @06dc6540
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 70
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6191/60 (addr)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)
  Referring: 
  Function getCoreDividerConfig/71 is inline copy in Clock_Ip_Command/41
  Clone of getCoreDividerConfig/36
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getCoreDividerConfig/70 (getCoreDividerConfig) @06dc61c0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 36
  previous sharing asm name: 71
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6191/60 (addr)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)
  Referring: 
  Function getCoreDividerConfig/70 is inline copy in Clock_Ip_Command/41
  Clone of getCoreDividerConfig/36
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getBusDividerConfig/69 (getBusDividerConfig) @06db9e00
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 68
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6211/61 (addr)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)
  Referring: 
  Function getBusDividerConfig/69 is inline copy in Clock_Ip_Command/41
  Clone of getBusDividerConfig/37
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getBusDividerConfig/68 (getBusDividerConfig) @06db9a80
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 37
  previous sharing asm name: 69
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6211/61 (addr)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)
  Referring: 
  Function getBusDividerConfig/68 is inline copy in Clock_Ip_Command/41
  Clone of getBusDividerConfig/37
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSlowDividerConfig/67 (getSlowDividerConfig) @06db9700
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 66
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6231/62 (addr)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)
  Referring: 
  Function getSlowDividerConfig/67 is inline copy in Clock_Ip_Command/41
  Clone of getSlowDividerConfig/38
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSlowDividerConfig/66 (getSlowDividerConfig) @06db9380
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 38
  previous sharing asm name: 67
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6231/62 (addr)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)
  Referring: 
  Function getSlowDividerConfig/66 is inline copy in Clock_Ip_Command/41
  Clone of getSlowDividerConfig/38
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
Clock_Ip_ReportClockErrors/65 (Clock_Ip_ReportClockErrors) @06c96b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_SpecificPlatformInitClock/31 (29232621 (estimated locally),0.03 per call) 
  Calls: 
Clock_Ip_TimeoutExpired/64 (Clock_Ip_TimeoutExpired) @06c96a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_SpecificPlatformInitClock/31 (828078525 (estimated locally),0.77 per call) 
  Calls: 
Clock_Ip_StartTimeout/63 (Clock_Ip_StartTimeout) @06c969a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_SpecificPlatformInitClock/31 (88583701 (estimated locally),0.08 per call) 
  Calls: 
DividerConfigurations.6231/62 (DividerConfigurations) @06c9db40
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getSlowDividerConfig/38 (addr)getSlowDividerConfig/38 (write)getSlowDividerConfig/38 (write)getSlowDividerConfig/38 (write)getSlowDividerConfig/38 (write)getSlowDividerConfig/66 (addr)getSlowDividerConfig/66 (write)getSlowDividerConfig/66 (write)getSlowDividerConfig/66 (write)getSlowDividerConfig/66 (write)getSlowDividerConfig/67 (addr)getSlowDividerConfig/67 (write)getSlowDividerConfig/67 (write)getSlowDividerConfig/67 (write)getSlowDividerConfig/67 (write)
  Availability: available
  Varpool flags:
DividerConfigurations.6211/61 (DividerConfigurations) @06c9d3f0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getBusDividerConfig/37 (addr)getBusDividerConfig/37 (write)getBusDividerConfig/37 (write)getBusDividerConfig/37 (write)getBusDividerConfig/37 (write)getBusDividerConfig/68 (addr)getBusDividerConfig/68 (write)getBusDividerConfig/68 (write)getBusDividerConfig/68 (write)getBusDividerConfig/68 (write)getBusDividerConfig/69 (addr)getBusDividerConfig/69 (write)getBusDividerConfig/69 (write)getBusDividerConfig/69 (write)getBusDividerConfig/69 (write)
  Availability: available
  Varpool flags:
DividerConfigurations.6191/60 (DividerConfigurations) @06c94c60
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getCoreDividerConfig/36 (addr)getCoreDividerConfig/36 (write)getCoreDividerConfig/36 (write)getCoreDividerConfig/36 (write)getCoreDividerConfig/36 (write)getCoreDividerConfig/70 (addr)getCoreDividerConfig/70 (write)getCoreDividerConfig/70 (write)getCoreDividerConfig/70 (write)getCoreDividerConfig/70 (write)getCoreDividerConfig/71 (addr)getCoreDividerConfig/71 (write)getCoreDividerConfig/71 (write)getCoreDividerConfig/71 (write)getCoreDividerConfig/71 (write)
  Availability: available
  Varpool flags:
ClockSource.6173/59 (ClockSource) @06c94510
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getSelectorConfig/35 (read)getSelectorConfig/35 (read)getSelectorConfig/35 (read)getSelectorConfig/72 (read)getSelectorConfig/72 (read)getSelectorConfig/72 (read)getSelectorConfig/73 (read)getSelectorConfig/73 (read)getSelectorConfig/73 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SelectorConfigurations.6170/58 (SelectorConfigurations) @06c944c8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getSelectorConfig/35 (addr)getSelectorConfig/35 (write)getSelectorConfig/35 (write)getSelectorConfig/35 (write)getSelectorConfig/35 (write)getSelectorConfig/72 (addr)getSelectorConfig/72 (write)getSelectorConfig/72 (write)getSelectorConfig/72 (write)getSelectorConfig/72 (write)getSelectorConfig/73 (addr)getSelectorConfig/73 (write)getSelectorConfig/73 (write)getSelectorConfig/73 (write)getSelectorConfig/73 (write)
  Availability: available
  Varpool flags:
SpllConfiguration.6162/57 (SpllConfiguration) @06c8bd38
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getSpllConfig/34 (write)getSpllConfig/34 (write)getSpllConfig/34 (write)getSpllConfig/34 (write)getSpllConfig/34 (addr)
  Availability: available
  Varpool flags:
SoscConfiguration.6153/56 (SoscConfiguration) @06c8b870
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getSoscConfig/33 (write)getSoscConfig/33 (write)getSoscConfig/33 (write)getSoscConfig/33 (addr)
  Availability: available
  Varpool flags:
FircConfiguration.6144/55 (FircConfiguration) @06c8b3a8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getFircConfig/32 (write)getFircConfig/32 (write)getFircConfig/32 (write)getFircConfig/32 (write)getFircConfig/32 (addr)
  Availability: available
  Varpool flags:
Clock_Ip_axDividerCallbacks/54 (Clock_Ip_axDividerCallbacks) @06c61a68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerCallbackIndex/53 (Clock_Ip_au8DividerCallbackIndex) @06c61a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axSelectorCallbacks/52 (Clock_Ip_axSelectorCallbacks) @06c619d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (addr)Clock_Ip_ClockInitializeObjects/39 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8SelectorCallbackIndex/51 (Clock_Ip_au8SelectorCallbackIndex) @06c61990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axIntOscCallbacks/50 (Clock_Ip_axIntOscCallbacks) @06c61948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: DisableSafeClock/28 (read)DisableSafeClock/28 (read)Clock_Ip_ClockInitializeObjects/39 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/49 (Clock_Ip_au8IrcoscCallbackIndex) @06c61900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: DisableSafeClock/28 (read)DisableSafeClock/28 (read)Clock_Ip_ClockInitializeObjects/39 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axExtOscCallbacks/48 (Clock_Ip_axExtOscCallbacks) @06c618b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8XoscCallbackIndex/47 (Clock_Ip_au8XoscCallbackIndex) @06c61870
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPllCallbacks/46 (Clock_Ip_axPllCallbacks) @06c61828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (addr)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PllCallbackIndex/45 (Clock_Ip_au8PllCallbackIndex) @06c617e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_bObjsAreInitialized.6250/44 (Clock_Ip_bObjsAreInitialized) @06c61798
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (read)Clock_Ip_ClockInitializeObjects/39 (write)
  Availability: available
  Varpool flags: initialized
Clock_Ip_au8SelectorEntryPcsHardwareValue/43 (Clock_Ip_au8SelectorEntryPcsHardwareValue) @06c5a0d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetSimLpoclksRegister_TrustedCall/30 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au16SelectorEntryHardwareValue/42 (Clock_Ip_au16SelectorEntryHardwareValue) @06c5a090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetSimLpoclksRegister_TrustedCall/30 (read)
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_Command/41 (Clock_Ip_Command) @06c552a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DisableSafeClock/28 (inlined) (268435456 (estimated locally),0.25 per call) Clock_Ip_SpecificPlatformInitClock/31 (inlined) (268435456 (estimated locally),0.25 per call) Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
Clock_Ip_ClockPowerModeChangeNotification/40 (Clock_Ip_ClockPowerModeChangeNotification) @06c55000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxScsRunClockSelector/5 (read)Clock_Ip_pxScsConfigVlprMode/13 (read)Clock_Ip_pxCoreRunClockDivider/6 (read)Clock_Ip_pxCoreConfigVlprMode/15 (read)Clock_Ip_pxBusRunClockDivider/7 (read)Clock_Ip_pxBusConfigVlprMode/17 (read)Clock_Ip_pxSlowRunClockDivider/8 (read)Clock_Ip_pxSlowConfigVlprMode/19 (read)Clock_Ip_pxSpllClock/2 (read)Clock_Ip_pxSpllConfig/11 (read)Clock_Ip_pxSoscClock/3 (read)Clock_Ip_pxSoscConfig/10 (read)Clock_Ip_pxFircClock/4 (read)Clock_Ip_pxFircConfig/9 (read)Clock_Ip_pxFircClock/4 (read)Clock_Ip_pxFircConfig/9 (read)Clock_Ip_pxSoscClock/3 (read)Clock_Ip_pxSoscConfig/10 (read)Clock_Ip_pxSoscClock/3 (read)Clock_Ip_pxSoscConfig/10 (read)Clock_Ip_pxSpllClock/2 (read)Clock_Ip_pxSpllConfig/11 (read)Clock_Ip_pxSpllClock/2 (read)Clock_Ip_pxSpllConfig/11 (read)Clock_Ip_pxScsRunClockSelector/5 (read)Clock_Ip_pxScsConfigRunMode/12 (read)Clock_Ip_pxCoreRunClockDivider/6 (read)Clock_Ip_pxCoreConfigRunMode/14 (read)Clock_Ip_pxBusRunClockDivider/7 (read)Clock_Ip_pxBusConfigRunMode/16 (read)Clock_Ip_pxSlowRunClockDivider/8 (read)Clock_Ip_pxSlowConfigRunMode/18 (read)Clock_Ip_pxFircClock/4 (read)Clock_Ip_pxFircConfig/9 (read)Clock_Ip_pxSoscClock/3 (read)Clock_Ip_pxSoscConfig/10 (read)Clock_Ip_pxSoscClock/3 (read)Clock_Ip_pxSoscConfig/10 (read)Clock_Ip_pxSpllClock/2 (read)Clock_Ip_pxSpllConfig/11 (read)Clock_Ip_pxSpllClock/2 (read)Clock_Ip_pxSpllConfig/11 (read)Clock_Ip_pxScsHsrunClockSelector/20 (read)Clock_Ip_pxScsConfigHsrunMode/24 (read)Clock_Ip_pxCoreHsrunClockDivider/21 (read)Clock_Ip_pxCoreConfigHsrunMode/25 (read)Clock_Ip_pxBusHsrunClockDivider/22 (read)Clock_Ip_pxBusConfigHsrunMode/26 (read)Clock_Ip_pxSlowHsrunClockDivider/23 (read)Clock_Ip_pxSlowConfigHsrunMode/27 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(91268055 (estimated locally),0.08 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
   Indirect call(134217728 (estimated locally),0.12 per call) 
Clock_Ip_ClockInitializeObjects/39 (Clock_Ip_ClockInitializeObjects) @06c29b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_bObjsAreInitialized.6250/44 (read)Clock_Ip_bObjsAreInitialized.6250/44 (write)Clock_Ip_au8PllCallbackIndex/45 (read)Clock_Ip_axPllCallbacks/46 (addr)Clock_Ip_pxSpllClock/2 (write)Clock_Ip_au8XoscCallbackIndex/47 (read)Clock_Ip_axExtOscCallbacks/48 (addr)Clock_Ip_pxSoscClock/3 (write)Clock_Ip_au8IrcoscCallbackIndex/49 (read)Clock_Ip_axIntOscCallbacks/50 (addr)Clock_Ip_pxFircClock/4 (write)Clock_Ip_au8SelectorCallbackIndex/51 (read)Clock_Ip_axSelectorCallbacks/52 (addr)Clock_Ip_pxScsRunClockSelector/5 (write)Clock_Ip_au8SelectorCallbackIndex/51 (read)Clock_Ip_axSelectorCallbacks/52 (addr)Clock_Ip_pxScsHsrunClockSelector/20 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxCoreRunClockDivider/6 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxCoreHsrunClockDivider/21 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxBusRunClockDivider/7 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxBusHsrunClockDivider/22 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxSlowRunClockDivider/8 (write)Clock_Ip_au8DividerCallbackIndex/53 (read)Clock_Ip_axDividerCallbacks/54 (addr)Clock_Ip_pxSlowHsrunClockDivider/23 (write)Clock_Ip_pxFircConfig/9 (write)Clock_Ip_pxSoscConfig/10 (write)Clock_Ip_pxSpllConfig/11 (write)Clock_Ip_pxScsConfigRunMode/12 (write)Clock_Ip_pxScsConfigVlprMode/13 (write)Clock_Ip_pxScsConfigHsrunMode/24 (write)Clock_Ip_pxCoreConfigRunMode/14 (write)Clock_Ip_pxCoreConfigVlprMode/15 (write)Clock_Ip_pxCoreConfigHsrunMode/25 (write)Clock_Ip_pxBusConfigRunMode/16 (write)Clock_Ip_pxBusConfigVlprMode/17 (write)Clock_Ip_pxBusConfigHsrunMode/26 (write)Clock_Ip_pxSlowConfigRunMode/18 (write)Clock_Ip_pxSlowConfigVlprMode/19 (write)Clock_Ip_pxSlowConfigHsrunMode/27 (write)
  Referring: 
  Function Clock_Ip_ClockInitializeObjects/39 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_Command/41 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: getSlowDividerConfig/66 (inlined) (268435456 (estimated locally),0.25 per call) getSlowDividerConfig/38 (inlined) (268435456 (estimated locally),0.25 per call) getSlowDividerConfig/67 (inlined) (268435456 (estimated locally),0.25 per call) getBusDividerConfig/69 (inlined) (268435456 (estimated locally),0.25 per call) getBusDividerConfig/68 (inlined) (268435456 (estimated locally),0.25 per call) getBusDividerConfig/37 (inlined) (268435456 (estimated locally),0.25 per call) getCoreDividerConfig/36 (inlined) (268435456 (estimated locally),0.25 per call) getCoreDividerConfig/71 (inlined) (268435456 (estimated locally),0.25 per call) getCoreDividerConfig/70 (inlined) (268435456 (estimated locally),0.25 per call) getSelectorConfig/35 (inlined) (268435456 (estimated locally),0.25 per call) getSelectorConfig/73 (inlined) (268435456 (estimated locally),0.25 per call) getSelectorConfig/72 (inlined) (268435456 (estimated locally),0.25 per call) getSpllConfig/34 (inlined) (268435456 (estimated locally),0.25 per call) getSoscConfig/33 (inlined) (268435456 (estimated locally),0.25 per call) getFircConfig/32 (inlined) (268435456 (estimated locally),0.25 per call) 
getSlowDividerConfig/38 (getSlowDividerConfig) @06c29620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 66
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6231/62 (addr)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)DividerConfigurations.6231/62 (write)
  Referring: 
  Function getSlowDividerConfig/38 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getBusDividerConfig/37 (getBusDividerConfig) @06c290e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 68
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6211/61 (addr)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)DividerConfigurations.6211/61 (write)
  Referring: 
  Function getBusDividerConfig/37 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getCoreDividerConfig/36 (getCoreDividerConfig) @06c29d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 70
  References: Clock_Ip_apConfig/1 (read)DividerConfigurations.6191/60 (addr)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)DividerConfigurations.6191/60 (write)
  Referring: 
  Function getCoreDividerConfig/36 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSelectorConfig/35 (getSelectorConfig) @06c29a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 72
  References: Clock_Ip_apConfig/1 (read)SelectorConfigurations.6170/58 (addr)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)ClockSource.6173/59 (read)SelectorConfigurations.6170/58 (write)
  Referring: 
  Function getSelectorConfig/35 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSpllConfig/34 (getSpllConfig) @06c297e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_apConfig/1 (read)SpllConfiguration.6162/57 (write)SpllConfiguration.6162/57 (write)SpllConfiguration.6162/57 (write)SpllConfiguration.6162/57 (write)SpllConfiguration.6162/57 (addr)
  Referring: 
  Function getSpllConfig/34 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getSoscConfig/33 (getSoscConfig) @06c29540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_apConfig/1 (read)SoscConfiguration.6153/56 (write)SoscConfiguration.6153/56 (write)SoscConfiguration.6153/56 (write)SoscConfiguration.6153/56 (addr)
  Referring: 
  Function getSoscConfig/33 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
getFircConfig/32 (getFircConfig) @06c292a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_apConfig/1 (read)FircConfiguration.6144/55 (write)FircConfiguration.6144/55 (write)FircConfiguration.6144/55 (write)FircConfiguration.6144/55 (write)FircConfiguration.6144/55 (addr)
  Referring: 
  Function getFircConfig/32 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_ClockInitializeObjects/39 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
Clock_Ip_SpecificPlatformInitClock/31 (Clock_Ip_SpecificPlatformInitClock) @06c29000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_apConfig/1 (write)Clock_Ip_bFircWasEnabledBeforeMcuInit/0 (write)Clock_Ip_bFircWasEnabledBeforeMcuInit/0 (write)
  Referring: 
  Function Clock_Ip_SpecificPlatformInitClock/31 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_Command/41 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: SetSimLpoclksRegister_TrustedCall/30 (268435456 (estimated locally),0.25 per call) Clock_Ip_ReportClockErrors/65 (29232621 (estimated locally),0.03 per call) Clock_Ip_TimeoutExpired/64 (828078525 (estimated locally),0.77 per call) Clock_Ip_StartTimeout/63 (88583701 (estimated locally),0.08 per call) SetFircToResetValue_TrustedCall/29 (88583701 (estimated locally),0.08 per call) 
SetSimLpoclksRegister_TrustedCall/30 (SetSimLpoclksRegister_TrustedCall) @0690b620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au16SelectorEntryHardwareValue/42 (read)Clock_Ip_au8SelectorEntryPcsHardwareValue/43 (read)
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: Clock_Ip_SpecificPlatformInitClock/31 (268435456 (estimated locally),0.25 per call) 
  Calls: 
SetFircToResetValue_TrustedCall/29 (SetFircToResetValue_TrustedCall) @0690bd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: Clock_Ip_SpecificPlatformInitClock/31 (88583701 (estimated locally),0.08 per call) 
  Calls: 
DisableSafeClock/28 (DisableSafeClock) @0690b7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_au8IrcoscCallbackIndex/49 (read)Clock_Ip_axIntOscCallbacks/50 (read)Clock_Ip_apConfig/1 (read)Clock_Ip_bFircWasEnabledBeforeMcuInit/0 (read)Clock_Ip_au8IrcoscCallbackIndex/49 (read)Clock_Ip_axIntOscCallbacks/50 (read)
  Referring: 
  Function DisableSafeClock/28 is inline copy in Clock_Ip_Command/41
  Availability: local
  Function flags: count:268435456 (estimated locally) body local optimize_size
  Called by: Clock_Ip_Command/41 (inlined) (268435456 (estimated locally),0.25 per call) 
  Calls: 
   Indirect call(88569899 (estimated locally),0.08 per call) 
   Indirect call(45647829 (estimated locally),0.04 per call) 
Clock_Ip_pxSlowConfigHsrunMode/27 (Clock_Ip_pxSlowConfigHsrunMode) @06907ab0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigHsrunMode/26 (Clock_Ip_pxBusConfigHsrunMode) @06907a20
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigHsrunMode/25 (Clock_Ip_pxCoreConfigHsrunMode) @06907990
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigHsrunMode/24 (Clock_Ip_pxScsConfigHsrunMode) @06907900
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowHsrunClockDivider/23 (Clock_Ip_pxSlowHsrunClockDivider) @06907870
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusHsrunClockDivider/22 (Clock_Ip_pxBusHsrunClockDivider) @069077e0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreHsrunClockDivider/21 (Clock_Ip_pxCoreHsrunClockDivider) @06907750
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsHsrunClockSelector/20 (Clock_Ip_pxScsHsrunClockSelector) @069076c0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowConfigVlprMode/19 (Clock_Ip_pxSlowConfigVlprMode) @06907630
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowConfigRunMode/18 (Clock_Ip_pxSlowConfigRunMode) @069075a0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigVlprMode/17 (Clock_Ip_pxBusConfigVlprMode) @06907510
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusConfigRunMode/16 (Clock_Ip_pxBusConfigRunMode) @06907480
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigVlprMode/15 (Clock_Ip_pxCoreConfigVlprMode) @069073f0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreConfigRunMode/14 (Clock_Ip_pxCoreConfigRunMode) @06907360
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigVlprMode/13 (Clock_Ip_pxScsConfigVlprMode) @069072d0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsConfigRunMode/12 (Clock_Ip_pxScsConfigRunMode) @06907240
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSpllConfig/11 (Clock_Ip_pxSpllConfig) @06907120
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSoscConfig/10 (Clock_Ip_pxSoscConfig) @06907090
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxFircConfig/9 (Clock_Ip_pxFircConfig) @06907000
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSlowRunClockDivider/8 (Clock_Ip_pxSlowRunClockDivider) @069e8f30
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxBusRunClockDivider/7 (Clock_Ip_pxBusRunClockDivider) @069e8ea0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxCoreRunClockDivider/6 (Clock_Ip_pxCoreRunClockDivider) @069e8e10
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxScsRunClockSelector/5 (Clock_Ip_pxScsRunClockSelector) @069e8d80
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxFircClock/4 (Clock_Ip_pxFircClock) @069e8ca8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSoscClock/3 (Clock_Ip_pxSoscClock) @069e8c18
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_pxSpllClock/2 (Clock_Ip_pxSpllClock) @069e8b88
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/39 (write)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)Clock_Ip_ClockPowerModeChangeNotification/40 (read)
  Availability: available
  Varpool flags:
Clock_Ip_apConfig/1 (Clock_Ip_apConfig) @069e8af8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: getBusDividerConfig/37 (read)getFircConfig/32 (read)getSpllConfig/34 (read)getSlowDividerConfig/38 (read)getSoscConfig/33 (read)getCoreDividerConfig/36 (read)getSelectorConfig/35 (read)DisableSafeClock/28 (read)Clock_Ip_SpecificPlatformInitClock/31 (write)getSlowDividerConfig/66 (read)getSlowDividerConfig/67 (read)getBusDividerConfig/68 (read)getBusDividerConfig/69 (read)getCoreDividerConfig/70 (read)getCoreDividerConfig/71 (read)getSelectorConfig/72 (read)getSelectorConfig/73 (read)
  Availability: available
  Varpool flags:
Clock_Ip_bFircWasEnabledBeforeMcuInit/0 (Clock_Ip_bFircWasEnabledBeforeMcuInit) @069e8a68
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: DisableSafeClock/28 (read)Clock_Ip_SpecificPlatformInitClock/31 (write)Clock_Ip_SpecificPlatformInitClock/31 (write)
  Availability: available
  Varpool flags:

;; Function SetFircToResetValue_TrustedCall (SetFircToResetValue_TrustedCall, funcdef_no=1, decl_uid=6102, cgraph_uid=2, symbol_order=29)

SetFircToResetValue_TrustedCall ()
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].FIRCCFG ={v} 0;
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCSR;
  _2 = _1 | 1;
  MEM[(struct SCG_Type *)1074151424B].FIRCCSR ={v} _2;
  return;

}



;; Function SetSimLpoclksRegister_TrustedCall (SetSimLpoclksRegister_TrustedCall, funcdef_no=2, decl_uid=6104, cgraph_uid=3, symbol_order=30)

SetSimLpoclksRegister_TrustedCall (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 SimLpoValue;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  long unsigned int _12;
  <unnamed type> _13;
  short unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  short unsigned int _17;
  long unsigned int _18;
  unsigned char _19;
  long unsigned int _20;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG SimLpoValue => 3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 8>; [100.00%]

  <bb 3> [local count: 955630220]:
  # DEBUG BEGIN_STMT
  _1 = Config_30(D)->Selectors[Index_27].Name;
  if (_1 == 40)
    goto <bb 4>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 4> [local count: 324914275]:
  # DEBUG BEGIN_STMT
  _2 = Config_30(D)->Selectors[Index_27].Value;
  _3 = Clock_Ip_au16SelectorEntryHardwareValue[_2];
  _4 = (long unsigned int) _3;
  _5 = _4 << 4;
  SimLpoValue_35 = _5 | SimLpoValue_23;
  # DEBUG SimLpoValue => SimLpoValue_35

  <bb 5> [local count: 955630222]:
  # SimLpoValue_21 = PHI <SimLpoValue_23(3), SimLpoValue_35(4)>
  # DEBUG SimLpoValue => SimLpoValue_21
  # DEBUG BEGIN_STMT
  if (_1 == 41)
    goto <bb 6>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 6> [local count: 324914275]:
  # DEBUG BEGIN_STMT
  _7 = Config_30(D)->Selectors[Index_27].Value;
  _8 = Clock_Ip_au8SelectorEntryPcsHardwareValue[_7];
  _9 = (long unsigned int) _8;
  _10 = _9 << 2;
  SimLpoValue_36 = _10 | SimLpoValue_21;
  # DEBUG SimLpoValue => SimLpoValue_36

  <bb 7> [local count: 955630222]:
  # SimLpoValue_22 = PHI <SimLpoValue_21(5), SimLpoValue_36(6)>
  # DEBUG SimLpoValue => SimLpoValue_22
  # DEBUG BEGIN_STMT
  Index_37 = Index_27 + 1;
  # DEBUG Index => Index_37

  <bb 8> [local count: 1073741821]:
  # SimLpoValue_23 = PHI <3(2), SimLpoValue_22(7)>
  # Index_27 = PHI <0(2), Index_37(7)>
  # DEBUG Index => Index_27
  # DEBUG SimLpoValue => SimLpoValue_23
  # DEBUG BEGIN_STMT
  _11 = Config_30(D)->SelectorsCount;
  _12 = (long unsigned int) _11;
  if (_12 > Index_27)
    goto <bb 3>; [89.00%]
  else
    goto <bb 17>; [11.00%]

  <bb 17> [local count: 118111600]:
  goto <bb 15>; [100.00%]

  <bb 10> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _13 = Config_30(D)->Gates[Index_28].Name;
  if (_13 == 18)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [local count: 324914276]:
  # DEBUG BEGIN_STMT
  _14 = Config_30(D)->Gates[Index_28].Enable;
  _15 = (long unsigned int) _14;
  _16 = _15 << 1;
  SimLpoValue_32 = _16 | SimLpoValue_26;
  # DEBUG SimLpoValue => SimLpoValue_32

  <bb 12> [local count: 955630224]:
  # SimLpoValue_24 = PHI <SimLpoValue_26(10), SimLpoValue_32(11)>
  # DEBUG SimLpoValue => SimLpoValue_24
  # DEBUG BEGIN_STMT
  if (_13 == 19)
    goto <bb 13>; [34.00%]
  else
    goto <bb 14>; [66.00%]

  <bb 13> [local count: 324914276]:
  # DEBUG BEGIN_STMT
  _17 = Config_30(D)->Gates[Index_28].Enable;
  _18 = (long unsigned int) _17;
  SimLpoValue_33 = _18 | SimLpoValue_24;
  # DEBUG SimLpoValue => SimLpoValue_33

  <bb 14> [local count: 955630224]:
  # SimLpoValue_25 = PHI <SimLpoValue_24(12), SimLpoValue_33(13)>
  # DEBUG SimLpoValue => SimLpoValue_25
  # DEBUG BEGIN_STMT
  Index_34 = Index_28 + 1;
  # DEBUG Index => Index_34

  <bb 15> [local count: 1073741824]:
  # SimLpoValue_26 = PHI <SimLpoValue_25(14), SimLpoValue_23(17)>
  # Index_28 = PHI <Index_34(14), 0(17)>
  # DEBUG Index => Index_28
  # DEBUG SimLpoValue => SimLpoValue_26
  # DEBUG BEGIN_STMT
  _19 = Config_30(D)->GatesCount;
  _20 = (long unsigned int) _19;
  if (_20 > Index_28)
    goto <bb 10>; [89.00%]
  else
    goto <bb 16>; [11.00%]

  <bb 16> [local count: 118111601]:
  # SimLpoValue_6 = PHI <SimLpoValue_26(15)>
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} SimLpoValue_6;
  return;

}



;; Function Clock_Ip_ClockPowerModeChangeNotification (Clock_Ip_ClockPowerModeChangeNotification, funcdef_no=12, decl_uid=6034, cgraph_uid=13, symbol_order=40)

Clock_Ip_ClockPowerModeChangeNotification (Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.0_1;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _2;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigVlprMode.1_3;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.2_4;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _5;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigVlprMode.3_6;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.4_7;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _8;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigVlprMode.5_9;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.6_10;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _11;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigVlprMode.7_12;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.8_13;
  void (*<T55d>) (Clock_Ip_NameType) _14;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.9_15;
  <unnamed type> _16;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.10_17;
  void (*<T55d>) (Clock_Ip_NameType) _18;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.11_19;
  <unnamed type> _20;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.12_21;
  void (*<T55d>) (Clock_Ip_NameType) _22;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.13_23;
  <unnamed type> _24;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.14_25;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _26;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.15_27;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.16_28;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _29;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.17_30;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.18_31;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _32;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.19_33;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.20_34;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _35;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.21_36;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.22_37;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _38;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.23_39;
  <unnamed type> _40;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsRunClockSelector.24_41;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _42;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigRunMode.25_43;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreRunClockDivider.26_44;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _45;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigRunMode.27_46;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusRunClockDivider.28_47;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _48;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigRunMode.29_49;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowRunClockDivider.30_50;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _51;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigRunMode.31_52;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircClock.32_53;
  void (*<T55a>) (const struct Clock_Ip_IrcoscConfigType *) _54;
  const struct Clock_Ip_IrcoscConfigType * Clock_Ip_pxFircConfig.33_55;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.34_56;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _57;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.35_58;
  const struct Clock_Ip_ExtOscCallbackType * Clock_Ip_pxSoscClock.36_59;
  void (*<T569>) (const struct Clock_Ip_XoscConfigType *) _60;
  const struct Clock_Ip_XoscConfigType * Clock_Ip_pxSoscConfig.37_61;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.38_62;
  void (*<T59f>) (const struct Clock_Ip_PllConfigType *) _63;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.39_64;
  const struct Clock_Ip_PllCallbackType * Clock_Ip_pxSpllClock.40_65;
  Clock_Ip_PllStatusReturnType (*<T5a5>) (Clock_Ip_NameType) _66;
  const struct Clock_Ip_PllConfigType * Clock_Ip_pxSpllConfig.41_67;
  <unnamed type> _68;
  const struct Clock_Ip_SelectorCallbackType * Clock_Ip_pxScsHsrunClockSelector.42_69;
  void (*<T5b2>) (const struct Clock_Ip_SelectorConfigType *) _70;
  const struct Clock_Ip_SelectorConfigType * Clock_Ip_pxScsConfigHsrunMode.43_71;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxCoreHsrunClockDivider.44_72;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _73;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxCoreConfigHsrunMode.45_74;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxBusHsrunClockDivider.46_75;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _76;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxBusConfigHsrunMode.47_77;
  const struct Clock_Ip_DividerCallbackType * Clock_Ip_pxSlowHsrunClockDivider.48_78;
  void (*<T577>) (const struct Clock_Ip_DividerConfigType *) _79;
  const struct Clock_Ip_DividerConfigType * Clock_Ip_pxSlowConfigHsrunMode.49_80;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  switch (PowerMode_82(D)) <default: <L12> [25.00%], case 0: <L4> [25.00%], case 1 ... 2: <L0> [25.00%], case 3: <L7> [25.00%]>

  <bb 3> [local count: 268435456]:
<L0>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 4> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsRunClockSelector.0_1 = Clock_Ip_pxScsRunClockSelector;
  _2 = Clock_Ip_pxScsRunClockSelector.0_1->Set;
  Clock_Ip_pxScsConfigVlprMode.1_3 = Clock_Ip_pxScsConfigVlprMode;
  _2 (Clock_Ip_pxScsConfigVlprMode.1_3);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreRunClockDivider.2_4 = Clock_Ip_pxCoreRunClockDivider;
  _5 = Clock_Ip_pxCoreRunClockDivider.2_4->Set;
  Clock_Ip_pxCoreConfigVlprMode.3_6 = Clock_Ip_pxCoreConfigVlprMode;
  _5 (Clock_Ip_pxCoreConfigVlprMode.3_6);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusRunClockDivider.4_7 = Clock_Ip_pxBusRunClockDivider;
  _8 = Clock_Ip_pxBusRunClockDivider.4_7->Set;
  Clock_Ip_pxBusConfigVlprMode.5_9 = Clock_Ip_pxBusConfigVlprMode;
  _8 (Clock_Ip_pxBusConfigVlprMode.5_9);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowRunClockDivider.6_10 = Clock_Ip_pxSlowRunClockDivider;
  _11 = Clock_Ip_pxSlowRunClockDivider.6_10->Set;
  Clock_Ip_pxSlowConfigVlprMode.7_12 = Clock_Ip_pxSlowConfigVlprMode;
  _11 (Clock_Ip_pxSlowConfigVlprMode.7_12);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.8_13 = Clock_Ip_pxSpllClock;
  _14 = Clock_Ip_pxSpllClock.8_13->Disable;
  Clock_Ip_pxSpllConfig.9_15 = Clock_Ip_pxSpllConfig;
  _16 = Clock_Ip_pxSpllConfig.9_15->Name;
  _14 (_16);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.10_17 = Clock_Ip_pxSoscClock;
  _18 = Clock_Ip_pxSoscClock.10_17->Disable;
  Clock_Ip_pxSoscConfig.11_19 = Clock_Ip_pxSoscConfig;
  _20 = Clock_Ip_pxSoscConfig.11_19->Name;
  _18 (_20);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.12_21 = Clock_Ip_pxFircClock;
  _22 = Clock_Ip_pxFircClock.12_21->Disable;
  Clock_Ip_pxFircConfig.13_23 = Clock_Ip_pxFircConfig;
  _24 = Clock_Ip_pxFircConfig.13_23->Name;
  _22 (_24);
  goto <bb 9>; [100.00%]

  <bb 5> [local count: 268435456]:
<L4>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 2)
    goto <bb 6>; [34.00%]
  else
    goto <bb 9>; [66.00%]

  <bb 6> [local count: 91268055]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.14_25 = Clock_Ip_pxFircClock;
  _26 = Clock_Ip_pxFircClock.14_25->Enable;
  Clock_Ip_pxFircConfig.15_27 = Clock_Ip_pxFircConfig;
  _26 (Clock_Ip_pxFircConfig.15_27);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.16_28 = Clock_Ip_pxSoscClock;
  _29 = Clock_Ip_pxSoscClock.16_28->Enable;
  Clock_Ip_pxSoscConfig.17_30 = Clock_Ip_pxSoscConfig;
  _29 (Clock_Ip_pxSoscConfig.17_30);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.18_31 = Clock_Ip_pxSoscClock;
  _32 = Clock_Ip_pxSoscClock.18_31->Complete;
  Clock_Ip_pxSoscConfig.19_33 = Clock_Ip_pxSoscConfig;
  _32 (Clock_Ip_pxSoscConfig.19_33);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.20_34 = Clock_Ip_pxSpllClock;
  _35 = Clock_Ip_pxSpllClock.20_34->Enable;
  Clock_Ip_pxSpllConfig.21_36 = Clock_Ip_pxSpllConfig;
  _35 (Clock_Ip_pxSpllConfig.21_36);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.22_37 = Clock_Ip_pxSpllClock;
  _38 = Clock_Ip_pxSpllClock.22_37->Complete;
  Clock_Ip_pxSpllConfig.23_39 = Clock_Ip_pxSpllConfig;
  _40 = Clock_Ip_pxSpllConfig.23_39->Name;
  _38 (_40);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsRunClockSelector.24_41 = Clock_Ip_pxScsRunClockSelector;
  _42 = Clock_Ip_pxScsRunClockSelector.24_41->Set;
  Clock_Ip_pxScsConfigRunMode.25_43 = Clock_Ip_pxScsConfigRunMode;
  _42 (Clock_Ip_pxScsConfigRunMode.25_43);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreRunClockDivider.26_44 = Clock_Ip_pxCoreRunClockDivider;
  _45 = Clock_Ip_pxCoreRunClockDivider.26_44->Set;
  Clock_Ip_pxCoreConfigRunMode.27_46 = Clock_Ip_pxCoreConfigRunMode;
  _45 (Clock_Ip_pxCoreConfigRunMode.27_46);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusRunClockDivider.28_47 = Clock_Ip_pxBusRunClockDivider;
  _48 = Clock_Ip_pxBusRunClockDivider.28_47->Set;
  Clock_Ip_pxBusConfigRunMode.29_49 = Clock_Ip_pxBusConfigRunMode;
  _48 (Clock_Ip_pxBusConfigRunMode.29_49);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowRunClockDivider.30_50 = Clock_Ip_pxSlowRunClockDivider;
  _51 = Clock_Ip_pxSlowRunClockDivider.30_50->Set;
  Clock_Ip_pxSlowConfigRunMode.31_52 = Clock_Ip_pxSlowConfigRunMode;
  _51 (Clock_Ip_pxSlowConfigRunMode.31_52);
  goto <bb 9>; [100.00%]

  <bb 7> [local count: 268435456]:
<L7>:
  # DEBUG BEGIN_STMT
  if (Notification_84(D) == 2)
    goto <bb 8>; [34.00%]
  else
    goto <bb 9>; [66.00%]

  <bb 8> [local count: 91268055]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircClock.32_53 = Clock_Ip_pxFircClock;
  _54 = Clock_Ip_pxFircClock.32_53->Enable;
  Clock_Ip_pxFircConfig.33_55 = Clock_Ip_pxFircConfig;
  _54 (Clock_Ip_pxFircConfig.33_55);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.34_56 = Clock_Ip_pxSoscClock;
  _57 = Clock_Ip_pxSoscClock.34_56->Enable;
  Clock_Ip_pxSoscConfig.35_58 = Clock_Ip_pxSoscConfig;
  _57 (Clock_Ip_pxSoscConfig.35_58);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSoscClock.36_59 = Clock_Ip_pxSoscClock;
  _60 = Clock_Ip_pxSoscClock.36_59->Complete;
  Clock_Ip_pxSoscConfig.37_61 = Clock_Ip_pxSoscConfig;
  _60 (Clock_Ip_pxSoscConfig.37_61);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.38_62 = Clock_Ip_pxSpllClock;
  _63 = Clock_Ip_pxSpllClock.38_62->Enable;
  Clock_Ip_pxSpllConfig.39_64 = Clock_Ip_pxSpllConfig;
  _63 (Clock_Ip_pxSpllConfig.39_64);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSpllClock.40_65 = Clock_Ip_pxSpllClock;
  _66 = Clock_Ip_pxSpllClock.40_65->Complete;
  Clock_Ip_pxSpllConfig.41_67 = Clock_Ip_pxSpllConfig;
  _68 = Clock_Ip_pxSpllConfig.41_67->Name;
  _66 (_68);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxScsHsrunClockSelector.42_69 = Clock_Ip_pxScsHsrunClockSelector;
  _70 = Clock_Ip_pxScsHsrunClockSelector.42_69->Set;
  Clock_Ip_pxScsConfigHsrunMode.43_71 = Clock_Ip_pxScsConfigHsrunMode;
  _70 (Clock_Ip_pxScsConfigHsrunMode.43_71);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxCoreHsrunClockDivider.44_72 = Clock_Ip_pxCoreHsrunClockDivider;
  _73 = Clock_Ip_pxCoreHsrunClockDivider.44_72->Set;
  Clock_Ip_pxCoreConfigHsrunMode.45_74 = Clock_Ip_pxCoreConfigHsrunMode;
  _73 (Clock_Ip_pxCoreConfigHsrunMode.45_74);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxBusHsrunClockDivider.46_75 = Clock_Ip_pxBusHsrunClockDivider;
  _76 = Clock_Ip_pxBusHsrunClockDivider.46_75->Set;
  Clock_Ip_pxBusConfigHsrunMode.47_77 = Clock_Ip_pxBusConfigHsrunMode;
  _76 (Clock_Ip_pxBusConfigHsrunMode.47_77);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSlowHsrunClockDivider.48_78 = Clock_Ip_pxSlowHsrunClockDivider;
  _79 = Clock_Ip_pxSlowHsrunClockDivider.48_78->Set;
  Clock_Ip_pxSlowConfigHsrunMode.49_80 = Clock_Ip_pxSlowConfigHsrunMode;
  _79 (Clock_Ip_pxSlowConfigHsrunMode.49_80);

  <bb 9> [local count: 1073741824]:
<L12>:
  return;

}



;; Function Clock_Ip_Command (Clock_Ip_Command, funcdef_no=13, decl_uid=6045, cgraph_uid=14, symbol_order=41)

Removing basic block 13
Removing basic block 23
Removing basic block 24
Removing basic block 30
Removing basic block 39
Removing basic block 41
Removing basic block 45
Removing basic block 46
Removing basic block 56
Removing basic block 57
Removing basic block 61
Removing basic block 71
Removing basic block 72
Removing basic block 78
Removing basic block 87
Removing basic block 89
Removing basic block 93
Removing basic block 94
Removing basic block 104
Removing basic block 105
Removing basic block 109
Removing basic block 119
Removing basic block 120
Removing basic block 126
Removing basic block 135
Removing basic block 137
Removing basic block 141
Removing basic block 142
Removing basic block 152
Removing basic block 153
Removing basic block 157
Removing basic block 167
Removing basic block 168
Removing basic block 174
Removing basic block 183
Removing basic block 185
Removing basic block 189
Removing basic block 190
Removing basic block 200
Removing basic block 201

Symbols to be put in SSA form
{ D.6384 D.6424 D.6436 D.6448 D.6460 D.6472 D.6484 D.6496 D.6508 D.6520 D.6532 D.6544 D.6556 D.6566 D.6569 D.6572 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 254
Number of blocks to update: 213 ( 84%)


Removing basic block 3
Removing basic block 4
Removing basic block 5
Removing basic block 7
Merging blocks 10 and 224
Removing basic block 12
Removing basic block 14
Removing basic block 16
Merging blocks 22 and 25
Merging blocks 26 and 11
Removing basic block 28
Removing basic block 29
Removing basic block 32
Merging blocks 38 and 40
Merging blocks 42 and 27
Removing basic block 44
Removing basic block 48
Merging blocks 54 and 55
Merging blocks 58 and 43
Removing basic block 60
Removing basic block 62
Removing basic block 64
Merging blocks 70 and 73
Merging blocks 74 and 59
Removing basic block 76
Removing basic block 77
Removing basic block 80
Merging blocks 86 and 88
Merging blocks 90 and 75
Removing basic block 92
Removing basic block 96
Merging blocks 102 and 103
Merging blocks 106 and 91
Removing basic block 108
Removing basic block 110
Removing basic block 112
Merging blocks 118 and 121
Merging blocks 122 and 107
Removing basic block 124
Removing basic block 125
Removing basic block 128
Merging blocks 134 and 136
Merging blocks 138 and 123
Removing basic block 140
Removing basic block 144
Merging blocks 150 and 151
Merging blocks 154 and 139
Removing basic block 156
Removing basic block 158
Removing basic block 160
Merging blocks 166 and 169
Merging blocks 170 and 155
Removing basic block 172
Removing basic block 173
Removing basic block 176
Merging blocks 182 and 184
Merging blocks 186 and 171
Removing basic block 188
Removing basic block 192
Merging blocks 198 and 199
Merging blocks 202 and 187
Removing basic block 205
Merging blocks 212 and 203
Removing basic block 215
Merging blocks 222 and 213
Removing basic block 225
Merging blocks 232 and 223
Removing basic block 233
Removing basic block 238
Removing basic block 243
Removing basic block 245
Merging blocks 42 and 15
Merging blocks 58 and 31
Merging blocks 74 and 47
Merging blocks 90 and 63
Merging blocks 106 and 79
Merging blocks 122 and 95
Merging blocks 138 and 111
Merging blocks 154 and 127
Merging blocks 170 and 143
Merging blocks 186 and 159
Merging blocks 202 and 175
Merging blocks 212 and 191
Merging blocks 222 and 204
Merging blocks 232 and 214
;; 18 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
;;
;; Loop 16
;;  header 113, latch 114
;;  depth 1, outer 0
;;  nodes: 113 114
;;
;; Loop 1
;;  header 107, latch 106
;;  depth 1, outer 0
;;  nodes: 107 106 104
;;
;; Loop 2
;;  header 100, latch 99
;;  depth 1, outer 0
;;  nodes: 100 99 97
;;
;; Loop 3
;;  header 93, latch 92
;;  depth 1, outer 0
;;  nodes: 93 92 90
;;
;; Loop 4
;;  header 86, latch 85
;;  depth 1, outer 0
;;  nodes: 86 85 83
;;
;; Loop 5
;;  header 79, latch 78
;;  depth 1, outer 0
;;  nodes: 79 78 76
;;
;; Loop 6
;;  header 72, latch 71
;;  depth 1, outer 0
;;  nodes: 72 71 69
;;
;; Loop 7
;;  header 65, latch 64
;;  depth 1, outer 0
;;  nodes: 65 64 62
;;
;; Loop 8
;;  header 58, latch 57
;;  depth 1, outer 0
;;  nodes: 58 57 55
;;
;; Loop 9
;;  header 51, latch 50
;;  depth 1, outer 0
;;  nodes: 51 50 48
;;
;; Loop 10
;;  header 44, latch 43
;;  depth 1, outer 0
;;  nodes: 44 43 41
;;
;; Loop 11
;;  header 37, latch 36
;;  depth 1, outer 0
;;  nodes: 37 36 34
;;
;; Loop 12
;;  header 30, latch 29
;;  depth 1, outer 0
;;  nodes: 30 29 27
;;
;; Loop 13
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22 20
;;
;; Loop 14
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15 13
;;
;; Loop 15
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 6
;;
;; Loop 17
;;  header 124, latch 123
;;  depth 1, outer 0
;;  nodes: 124 123 120
;; 2 succs { 128 111 3 119 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 9 11 }
;; 6 succs { 7 8 }
;; 7 succs { 10 }
;; 8 succs { 9 }
;; 9 succs { 6 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 16 18 }
;; 13 succs { 14 15 }
;; 14 succs { 17 }
;; 15 succs { 16 }
;; 16 succs { 13 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 23 25 }
;; 20 succs { 21 22 }
;; 21 succs { 24 }
;; 22 succs { 23 }
;; 23 succs { 20 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 30 32 }
;; 27 succs { 28 29 }
;; 28 succs { 31 }
;; 29 succs { 30 }
;; 30 succs { 27 31 }
;; 31 succs { 32 33 }
;; 32 succs { 33 }
;; 33 succs { 37 39 }
;; 34 succs { 35 36 }
;; 35 succs { 38 }
;; 36 succs { 37 }
;; 37 succs { 34 38 }
;; 38 succs { 39 40 }
;; 39 succs { 40 }
;; 40 succs { 44 46 }
;; 41 succs { 42 43 }
;; 42 succs { 45 }
;; 43 succs { 44 }
;; 44 succs { 41 45 }
;; 45 succs { 46 47 }
;; 46 succs { 47 }
;; 47 succs { 51 53 }
;; 48 succs { 49 50 }
;; 49 succs { 52 }
;; 50 succs { 51 }
;; 51 succs { 48 52 }
;; 52 succs { 53 54 }
;; 53 succs { 54 }
;; 54 succs { 58 60 }
;; 55 succs { 56 57 }
;; 56 succs { 59 }
;; 57 succs { 58 }
;; 58 succs { 55 59 }
;; 59 succs { 60 61 }
;; 60 succs { 61 }
;; 61 succs { 65 67 }
;; 62 succs { 63 64 }
;; 63 succs { 66 }
;; 64 succs { 65 }
;; 65 succs { 62 66 }
;; 66 succs { 67 68 }
;; 67 succs { 68 }
;; 68 succs { 72 74 }
;; 69 succs { 70 71 }
;; 70 succs { 73 }
;; 71 succs { 72 }
;; 72 succs { 69 73 }
;; 73 succs { 74 75 }
;; 74 succs { 75 }
;; 75 succs { 79 81 }
;; 76 succs { 77 78 }
;; 77 succs { 80 }
;; 78 succs { 79 }
;; 79 succs { 76 80 }
;; 80 succs { 81 82 }
;; 81 succs { 82 }
;; 82 succs { 86 88 }
;; 83 succs { 84 85 }
;; 84 succs { 87 }
;; 85 succs { 86 }
;; 86 succs { 83 87 }
;; 87 succs { 88 89 }
;; 88 succs { 89 }
;; 89 succs { 93 95 }
;; 90 succs { 91 92 }
;; 91 succs { 94 }
;; 92 succs { 93 }
;; 93 succs { 90 94 }
;; 94 succs { 95 96 }
;; 95 succs { 96 }
;; 96 succs { 100 102 }
;; 97 succs { 98 99 }
;; 98 succs { 101 }
;; 99 succs { 100 }
;; 100 succs { 97 101 }
;; 101 succs { 102 103 }
;; 102 succs { 103 }
;; 103 succs { 107 109 }
;; 104 succs { 105 106 }
;; 105 succs { 108 }
;; 106 succs { 107 }
;; 107 succs { 104 108 }
;; 108 succs { 109 110 }
;; 109 succs { 110 }
;; 110 succs { 128 }
;; 111 succs { 112 117 }
;; 112 succs { 113 }
;; 113 succs { 114 115 }
;; 114 succs { 113 115 }
;; 115 succs { 116 118 }
;; 116 succs { 118 }
;; 117 succs { 118 }
;; 118 succs { 128 }
;; 119 succs { 124 125 }
;; 120 succs { 121 123 }
;; 121 succs { 122 127 }
;; 122 succs { 127 }
;; 123 succs { 124 }
;; 124 succs { 120 125 }
;; 125 succs { 126 127 }
;; 126 succs { 127 }
;; 127 succs { 128 }
;; 128 succs { 1 }
Clock_Ip_Command (const struct Clock_Ip_ClockConfigType * Config, Clock_Ip_CommandType Command)
{
  uint32 Index;
  boolean TimeoutOccurred;
  uint32 StartTime;
  uint32 ElapsedTime;
  uint32 TimeoutTicks;
  uint32 IrcoscStatus;
  uint32 Index;
  const struct Clock_Ip_IrcoscConfigType * ReturnValue;
  const struct Clock_Ip_IrcoscConfigType * D.6572;
  static struct Clock_Ip_IrcoscConfigType FircConfiguration;
  uint32 Index;
  const struct Clock_Ip_XoscConfigType * ReturnValue;
  const struct Clock_Ip_XoscConfigType * D.6569;
  static struct Clock_Ip_XoscConfigType SoscConfiguration;
  uint32 Index;
  const struct Clock_Ip_PllConfigType * ReturnValue;
  const struct Clock_Ip_PllConfigType * D.6566;
  static struct Clock_Ip_PllConfigType SpllConfiguration;
  const struct Clock_Ip_SelectorConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_SelectorConfigType * D.6556;
  static const Clock_Ip_NameType ClockSource[7] = {0, 8, 2, 5, 0, 0, 9};
  static struct Clock_Ip_SelectorConfigType SelectorConfigurations[3];
  const struct Clock_Ip_SelectorConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_SelectorConfigType * D.6544;
  static const Clock_Ip_NameType ClockSource[7] = {0, 8, 2, 5, 0, 0, 9};
  static struct Clock_Ip_SelectorConfigType SelectorConfigurations[3];
  const struct Clock_Ip_SelectorConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_SelectorConfigType * D.6532;
  static const Clock_Ip_NameType ClockSource[7] = {0, 8, 2, 5, 0, 0, 9};
  static struct Clock_Ip_SelectorConfigType SelectorConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6520;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6508;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6496;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6484;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6472;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6460;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6448;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6436;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  const struct Clock_Ip_DividerConfigType * ReturnValue;
  uint32 Index;
  const struct Clock_Ip_DividerConfigType * D.6424;
  static struct Clock_Ip_DividerConfigType DividerConfigurations[3];
  static boolean Clock_Ip_bObjsAreInitialized = 0;
  _Bool Clock_Ip_bObjsAreInitialized.50_8;
  unsigned char _9;
  int _10;
  const struct Clock_Ip_PllCallbackType * _11;
  unsigned char _12;
  int _13;
  const struct Clock_Ip_ExtOscCallbackType * _14;
  unsigned char _15;
  int _16;
  const struct Clock_Ip_IntOscCallbackType * _17;
  unsigned char _18;
  int _19;
  const struct Clock_Ip_SelectorCallbackType * _20;
  unsigned char _21;
  int _22;
  const struct Clock_Ip_SelectorCallbackType * _23;
  unsigned char _24;
  int _25;
  const struct Clock_Ip_DividerCallbackType * _26;
  unsigned char _27;
  int _28;
  const struct Clock_Ip_DividerCallbackType * _29;
  unsigned char _30;
  int _31;
  const struct Clock_Ip_DividerCallbackType * _32;
  unsigned char _33;
  int _34;
  const struct Clock_Ip_DividerCallbackType * _35;
  unsigned char _36;
  int _37;
  const struct Clock_Ip_DividerCallbackType * _38;
  unsigned char _39;
  int _40;
  const struct Clock_Ip_DividerCallbackType * _41;
  const struct Clock_Ip_IrcoscConfigType * _42;
  const struct Clock_Ip_XoscConfigType * _43;
  const struct Clock_Ip_PllConfigType * _44;
  const struct Clock_Ip_SelectorConfigType * _45;
  const struct Clock_Ip_SelectorConfigType * _46;
  const struct Clock_Ip_SelectorConfigType * _47;
  const struct Clock_Ip_DividerConfigType * _48;
  const struct Clock_Ip_DividerConfigType * _49;
  const struct Clock_Ip_DividerConfigType * _50;
  const struct Clock_Ip_DividerConfigType * _51;
  const struct Clock_Ip_DividerConfigType * _52;
  const struct Clock_Ip_DividerConfigType * _53;
  const struct Clock_Ip_DividerConfigType * _54;
  const struct Clock_Ip_DividerConfigType * _55;
  const struct Clock_Ip_DividerConfigType * _56;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.75_57;
  <unnamed type> _59;
  unsigned char _63;
  long unsigned int _64;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.75_78;
  <unnamed type> _80;
  unsigned char _84;
  long unsigned int _85;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.75_99;
  <unnamed type> _101;
  unsigned char _105;
  long unsigned int _106;
  long unsigned int _110;
  long unsigned int _111;
  long unsigned int _112;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.71_120;
  <unnamed type> _122;
  unsigned char _126;
  long unsigned int _127;
  long unsigned int _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _142;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.71_144;
  <unnamed type> _146;
  unsigned char _150;
  long unsigned int _151;
  long unsigned int _159;
  long unsigned int _160;
  long unsigned int _161;
  long unsigned int _162;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.71_168;
  <unnamed type> _170;
  unsigned char _174;
  long unsigned int _175;
  long unsigned int _179;
  long unsigned int _180;
  long unsigned int _181;
  long unsigned int _182;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.67_192;
  <unnamed type> _194;
  unsigned char _198;
  long unsigned int _199;
  long unsigned int _211;
  long unsigned int _212;
  long unsigned int _213;
  long unsigned int _214;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.67_216;
  <unnamed type> _218;
  unsigned char _222;
  long unsigned int _223;
  long unsigned int _231;
  long unsigned int _232;
  long unsigned int _233;
  long unsigned int _234;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.67_240;
  <unnamed type> _242;
  unsigned char _246;
  long unsigned int _247;
  long unsigned int _251;
  long unsigned int _252;
  long unsigned int _253;
  long unsigned int _254;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.63_264;
  <unnamed type> _266;
  unsigned char _270;
  long unsigned int _271;
  long unsigned int _283;
  long unsigned int _284;
  long unsigned int _285;
  <unnamed type> _286;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.63_288;
  <unnamed type> _290;
  unsigned char _294;
  long unsigned int _295;
  long unsigned int _303;
  long unsigned int _304;
  long unsigned int _305;
  <unnamed type> _306;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.63_312;
  <unnamed type> _314;
  unsigned char _318;
  long unsigned int _319;
  long unsigned int _323;
  long unsigned int _324;
  long unsigned int _325;
  <unnamed type> _326;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.59_336;
  <unnamed type> _338;
  unsigned char _342;
  long unsigned int _343;
  long unsigned int _345;
  short unsigned int _346;
  short unsigned int _347;
  long unsigned int _348;
  long unsigned int _349;
  unsigned char _350;
  unsigned char _351;
  long unsigned int _352;
  long unsigned int _353;
  unsigned char _354;
  unsigned char _355;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.55_357;
  <unnamed type> _359;
  unsigned char _363;
  long unsigned int _364;
  long unsigned int _366;
  short unsigned int _367;
  short unsigned int _368;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.51_370;
  <unnamed type> _372;
  unsigned char _376;
  long unsigned int _377;
  long unsigned int _379;
  short unsigned int _380;
  short unsigned int _381;
  long unsigned int _382;
  unsigned char _383;
  unsigned char _384;
  long unsigned int _385;
  int _386;
  int _387;
  int _388;
  unsigned char _389;
  unsigned char _390;
  long unsigned int _392;
  long unsigned int _393;
  long unsigned int _394;
  long unsigned int _395;
  long unsigned int TimeoutTicks.79_397;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.82_400;
  <unnamed type> _402;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_apConfig.82_403;
  short unsigned int _405;
  unsigned char _406;
  int _407;
  void (*<T55d>) (Clock_Ip_NameType) _408;
  unsigned char _410;
  long unsigned int _411;
  _Bool Clock_Ip_bFircWasEnabledBeforeMcuInit.83_412;
  unsigned char _413;
  int _414;
  void (*<T55d>) (Clock_Ip_NameType) _415;

  <bb 2> [local count: 656363041]:
  # DEBUG BEGIN_STMT
  switch (Command_2(D)) <default: <L5> [25.00%], case 1: <L91> [25.00%], case 2: <L90> [25.00%], case 4: <L92> [25.00%]>

  <bb 3> [local count: 164090760]:
<L90>:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY Clock_Ip_ClockInitializeObjects
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjsAreInitialized.50_8 = Clock_Ip_bObjsAreInitialized;
  if (Clock_Ip_bObjsAreInitialized.50_8 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 82045380]:
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjsAreInitialized = 1;
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_au8PllCallbackIndex[1];
  _10 = (int) _9;
  _11 = &Clock_Ip_axPllCallbacks[_10];
  Clock_Ip_pxSpllClock = _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_au8XoscCallbackIndex[1];
  _13 = (int) _12;
  _14 = &Clock_Ip_axExtOscCallbacks[_13];
  Clock_Ip_pxSoscClock = _14;
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _16 = (int) _15;
  _17 = &Clock_Ip_axIntOscCallbacks[_16];
  Clock_Ip_pxFircClock = _17;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_au8SelectorCallbackIndex[5];
  _19 = (int) _18;
  _20 = &Clock_Ip_axSelectorCallbacks[_19];
  Clock_Ip_pxScsRunClockSelector = _20;
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_au8SelectorCallbackIndex[7];
  _22 = (int) _21;
  _23 = &Clock_Ip_axSelectorCallbacks[_22];
  Clock_Ip_pxScsHsrunClockSelector = _23;
  # DEBUG BEGIN_STMT
  _24 = Clock_Ip_au8DividerCallbackIndex[6];
  _25 = (int) _24;
  _26 = &Clock_Ip_axDividerCallbacks[_25];
  Clock_Ip_pxCoreRunClockDivider = _26;
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_au8DividerCallbackIndex[8];
  _28 = (int) _27;
  _29 = &Clock_Ip_axDividerCallbacks[_28];
  Clock_Ip_pxCoreHsrunClockDivider = _29;
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_au8DividerCallbackIndex[9];
  _31 = (int) _30;
  _32 = &Clock_Ip_axDividerCallbacks[_31];
  Clock_Ip_pxBusRunClockDivider = _32;
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_au8DividerCallbackIndex[11];
  _34 = (int) _33;
  _35 = &Clock_Ip_axDividerCallbacks[_34];
  Clock_Ip_pxBusHsrunClockDivider = _35;
  # DEBUG BEGIN_STMT
  _36 = Clock_Ip_au8DividerCallbackIndex[12];
  _37 = (int) _36;
  _38 = &Clock_Ip_axDividerCallbacks[_37];
  Clock_Ip_pxSlowRunClockDivider = _38;
  # DEBUG BEGIN_STMT
  _39 = Clock_Ip_au8DividerCallbackIndex[14];
  _40 = (int) _39;
  _41 = &Clock_Ip_axDividerCallbacks[_40];
  Clock_Ip_pxSlowHsrunClockDivider = _41;

  <bb 5> [local count: 164090760]:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY getFircConfig
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.51_370 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.51_370 != 0B)
    goto <bb 9>; [70.00%]
  else
    goto <bb 11>; [30.00%]

  <bb 6> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  _372 = Clock_Ip_apConfig.51_370->Ircoscs[Index_371].Name;
  if (_372 == 5)
    goto <bb 7>; [5.50%]
  else
    goto <bb 8>; [94.50%]

  <bb 7> [local count: 55807731]:
  # Index_373 = PHI <Index_371(6)>
  # DEBUG BEGIN_STMT
  ReturnValue_374 = &Clock_Ip_apConfig.51_370->Ircoscs[Index_373];
  # DEBUG ReturnValue => ReturnValue_374
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 8> [local count: 958878294]:
  # DEBUG BEGIN_STMT
  Index_375 = Index_371 + 1;
  # DEBUG Index => Index_375

  <bb 9> [local count: 1073741824]:
  # Index_371 = PHI <0(5), Index_375(8)>
  # DEBUG Index => Index_371
  # DEBUG BEGIN_STMT
  _376 = Clock_Ip_apConfig.51_370->IrcoscsCount;
  _377 = (long unsigned int) _376;
  if (Index_371 < _377)
    goto <bb 6>; [94.50%]
  else
    goto <bb 10>; [5.50%]

  <bb 10> [local count: 114863532]:
  # ReturnValue_378 = PHI <ReturnValue_374(7), 0B(9)>
  # DEBUG ReturnValue => ReturnValue_378
  # DEBUG BEGIN_STMT
  if (ReturnValue_378 == 0B)
    goto <bb 11>; [30.00%]
  else
    goto <bb 12>; [70.00%]

  <bb 11> [local count: 83686288]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => &FircConfiguration
  # DEBUG BEGIN_STMT
  FircConfiguration.Name = 5;
  # DEBUG BEGIN_STMT
  _379 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCSR;
  _380 = (short unsigned int) _379;
  _381 = _380 & 1;
  FircConfiguration.Enable = _381;
  # DEBUG BEGIN_STMT
  _382 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCFG;
  _383 = (unsigned char) _382;
  _384 = _383 & 3;
  FircConfiguration.Range = _384;
  # DEBUG BEGIN_STMT
  _385 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCSR;
  _386 = (int) _385;
  _387 = _386 >> 3;
  _388 = _387 & 31;
  _389 = (unsigned char) _388;
  _390 = _389 & 1;
  FircConfiguration.Regulator = _390;

  <bb 12> [local count: 164090760]:
  # ReturnValue_391 = PHI <ReturnValue_378(10), &FircConfiguration(11)>
  # DEBUG ReturnValue => ReturnValue_391
  # DEBUG BEGIN_STMT
  _453 = ReturnValue_391;
  # DEBUG ReturnValue => NULL
  # DEBUG Index => NULL
  _42 = _453;
  Clock_Ip_pxFircConfig = _42;
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY getSoscConfig
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.55_357 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.55_357 != 0B)
    goto <bb 16>; [70.00%]
  else
    goto <bb 18>; [30.00%]

  <bb 13> [local count: 1014686022]:
  # DEBUG BEGIN_STMT
  _359 = Clock_Ip_apConfig.55_357->Xoscs[Index_358].Name;
  if (_359 == 8)
    goto <bb 14>; [5.50%]
  else
    goto <bb 15>; [94.50%]

  <bb 14> [local count: 55807731]:
  # Index_360 = PHI <Index_358(13)>
  # DEBUG BEGIN_STMT
  ReturnValue_361 = &Clock_Ip_apConfig.55_357->Xoscs[Index_360];
  # DEBUG ReturnValue => ReturnValue_361
  # DEBUG BEGIN_STMT
  goto <bb 17>; [100.00%]

  <bb 15> [local count: 958878290]:
  # DEBUG BEGIN_STMT
  Index_362 = Index_358 + 1;
  # DEBUG Index => Index_362

  <bb 16> [local count: 1073741823]:
  # Index_358 = PHI <0(12), Index_362(15)>
  # DEBUG Index => Index_358
  # DEBUG BEGIN_STMT
  _363 = Clock_Ip_apConfig.55_357->XoscsCount;
  _364 = (long unsigned int) _363;
  if (Index_358 < _364)
    goto <bb 13>; [94.50%]
  else
    goto <bb 17>; [5.50%]

  <bb 17> [local count: 114863531]:
  # ReturnValue_365 = PHI <ReturnValue_361(14), 0B(16)>
  # DEBUG ReturnValue => ReturnValue_365
  # DEBUG BEGIN_STMT
  if (ReturnValue_365 == 0B)
    goto <bb 18>; [30.00%]
  else
    goto <bb 19>; [70.00%]

  <bb 18> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => &SoscConfiguration
  # DEBUG BEGIN_STMT
  SoscConfiguration.Name = 8;
  # DEBUG BEGIN_STMT
  _366 ={v} MEM[(struct SCG_Type *)1074151424B].SOSCCSR;
  _367 = (short unsigned int) _366;
  _368 = _367 & 1;
  SoscConfiguration.Enable = _368;
  # DEBUG BEGIN_STMT
  SoscConfiguration.Freq = 40000000;

  <bb 19> [local count: 164090759]:
  # ReturnValue_369 = PHI <ReturnValue_365(17), &SoscConfiguration(18)>
  # DEBUG ReturnValue => ReturnValue_369
  # DEBUG BEGIN_STMT
  _458 = ReturnValue_369;
  # DEBUG ReturnValue => NULL
  # DEBUG Index => NULL
  _43 = _458;
  Clock_Ip_pxSoscConfig = _43;
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY getSpllConfig
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.59_336 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.59_336 != 0B)
    goto <bb 23>; [70.00%]
  else
    goto <bb 25>; [30.00%]

  <bb 20> [local count: 1014686019]:
  # DEBUG BEGIN_STMT
  _338 = Clock_Ip_apConfig.59_336->Plls[Index_337].Name;
  if (_338 == 9)
    goto <bb 21>; [5.50%]
  else
    goto <bb 22>; [94.50%]

  <bb 21> [local count: 55807731]:
  # Index_339 = PHI <Index_337(20)>
  # DEBUG BEGIN_STMT
  ReturnValue_340 = &Clock_Ip_apConfig.59_336->Plls[Index_339];
  # DEBUG ReturnValue => ReturnValue_340
  # DEBUG BEGIN_STMT
  goto <bb 24>; [100.00%]

  <bb 22> [local count: 958878288]:
  # DEBUG BEGIN_STMT
  Index_341 = Index_337 + 1;
  # DEBUG Index => Index_341

  <bb 23> [local count: 1073741820]:
  # Index_337 = PHI <0(19), Index_341(22)>
  # DEBUG Index => Index_337
  # DEBUG BEGIN_STMT
  _342 = Clock_Ip_apConfig.59_336->PllsCount;
  _343 = (long unsigned int) _342;
  if (Index_337 < _343)
    goto <bb 20>; [94.50%]
  else
    goto <bb 24>; [5.50%]

  <bb 24> [local count: 114863531]:
  # ReturnValue_344 = PHI <ReturnValue_340(21), 0B(23)>
  # DEBUG ReturnValue => ReturnValue_344
  # DEBUG BEGIN_STMT
  if (ReturnValue_344 == 0B)
    goto <bb 25>; [30.00%]
  else
    goto <bb 26>; [70.00%]

  <bb 25> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => &SpllConfiguration
  # DEBUG BEGIN_STMT
  SpllConfiguration.Name = 9;
  # DEBUG BEGIN_STMT
  _345 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _346 = (short unsigned int) _345;
  _347 = _346 & 1;
  SpllConfiguration.Enable = _347;
  # DEBUG BEGIN_STMT
  _348 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _349 = _348 >> 8;
  _350 = (unsigned char) _349;
  _351 = _350 & 7;
  SpllConfiguration.Predivider = _351;
  # DEBUG BEGIN_STMT
  _352 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _353 = _352 >> 16;
  _354 = (unsigned char) _353;
  _355 = _354 & 31;
  SpllConfiguration.MulFactorDiv = _355;

  <bb 26> [local count: 164090759]:
  # ReturnValue_356 = PHI <ReturnValue_344(24), &SpllConfiguration(25)>
  # DEBUG ReturnValue => ReturnValue_356
  # DEBUG BEGIN_STMT
  _464 = ReturnValue_356;
  # DEBUG ReturnValue => NULL
  # DEBUG Index => NULL
  _44 = _464;
  Clock_Ip_pxSpllConfig = _44;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 25
  # DEBUG INLINE_ENTRY getSelectorConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG SelectorConfigIndex => 0
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.63_312 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.63_312 != 0B)
    goto <bb 30>; [70.00%]
  else
    goto <bb 32>; [30.00%]

  <bb 27> [local count: 1014686017]:
  # DEBUG BEGIN_STMT
  _314 = Clock_Ip_apConfig.63_312->Selectors[Index_313].Name;
  if (_314 == 25)
    goto <bb 28>; [5.50%]
  else
    goto <bb 29>; [94.50%]

  <bb 28> [local count: 55807731]:
  # Index_315 = PHI <Index_313(27)>
  # DEBUG BEGIN_STMT
  ReturnValue_316 = &Clock_Ip_apConfig.63_312->Selectors[Index_315];
  # DEBUG ReturnValue => ReturnValue_316
  # DEBUG BEGIN_STMT
  goto <bb 31>; [100.00%]

  <bb 29> [local count: 958878286]:
  # DEBUG BEGIN_STMT
  Index_317 = Index_313 + 1;
  # DEBUG Index => Index_317

  <bb 30> [local count: 1073741818]:
  # Index_313 = PHI <0(26), Index_317(29)>
  # DEBUG Index => Index_313
  # DEBUG BEGIN_STMT
  _318 = Clock_Ip_apConfig.63_312->SelectorsCount;
  _319 = (long unsigned int) _318;
  if (Index_313 < _319)
    goto <bb 27>; [94.50%]
  else
    goto <bb 31>; [5.50%]

  <bb 31> [local count: 114863531]:
  # ReturnValue_320 = PHI <ReturnValue_316(28), 0B(30)>
  # DEBUG ReturnValue => ReturnValue_320
  # DEBUG BEGIN_STMT
  if (ReturnValue_320 == 0B)
    goto <bb 32>; [30.00%]
  else
    goto <bb 33>; [70.00%]

  <bb 32> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_322 = &SelectorConfigurations[0];
  # DEBUG ReturnValue => ReturnValue_322
  # DEBUG BEGIN_STMT
  SelectorConfigurations[0].Name = 25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _323 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  _324 = _323 >> 24;
  _325 = _324 & 15;
  _326 = ClockSource[_325];
  SelectorConfigurations[0].Value = _326;
  # DEBUG BEGIN_STMT

  <bb 33> [local count: 164090759]:
  # ReturnValue_335 = PHI <ReturnValue_320(31), ReturnValue_322(32)>
<L89>:
  # DEBUG ReturnValue => ReturnValue_335
  # DEBUG BEGIN_STMT
  _468 = ReturnValue_335;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG SelectorConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _45 = _468;
  Clock_Ip_pxScsConfigRunMode = _45;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 26
  # DEBUG INLINE_ENTRY getSelectorConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG SelectorConfigIndex => 1
  # DEBUG BEGIN_STMT
  # DEBUG SelectorConfigIndex => 1
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.63_288 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.63_288 != 0B)
    goto <bb 37>; [70.00%]
  else
    goto <bb 39>; [30.00%]

  <bb 34> [local count: 1014686014]:
  # DEBUG BEGIN_STMT
  _290 = Clock_Ip_apConfig.63_288->Selectors[Index_289].Name;
  if (_290 == 26)
    goto <bb 35>; [5.50%]
  else
    goto <bb 36>; [94.50%]

  <bb 35> [local count: 55807731]:
  # Index_291 = PHI <Index_289(34)>
  # DEBUG BEGIN_STMT
  ReturnValue_292 = &Clock_Ip_apConfig.63_288->Selectors[Index_291];
  # DEBUG ReturnValue => ReturnValue_292
  # DEBUG BEGIN_STMT
  goto <bb 38>; [100.00%]

  <bb 36> [local count: 958878283]:
  # DEBUG BEGIN_STMT
  Index_293 = Index_289 + 1;
  # DEBUG Index => Index_293

  <bb 37> [local count: 1073741814]:
  # Index_289 = PHI <0(33), Index_293(36)>
  # DEBUG Index => Index_289
  # DEBUG BEGIN_STMT
  _294 = Clock_Ip_apConfig.63_288->SelectorsCount;
  _295 = (long unsigned int) _294;
  if (Index_289 < _295)
    goto <bb 34>; [94.50%]
  else
    goto <bb 38>; [5.50%]

  <bb 38> [local count: 114863530]:
  # ReturnValue_296 = PHI <ReturnValue_292(35), 0B(37)>
  # DEBUG ReturnValue => ReturnValue_296
  # DEBUG BEGIN_STMT
  if (ReturnValue_296 == 0B)
    goto <bb 39>; [30.00%]
  else
    goto <bb 40>; [70.00%]

  <bb 39> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_298 = &SelectorConfigurations[1];
  # DEBUG ReturnValue => ReturnValue_298
  # DEBUG BEGIN_STMT
  SelectorConfigurations[1].Name = 26;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _303 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  _304 = _303 >> 24;
  _305 = _304 & 15;
  _306 = ClockSource[_305];
  SelectorConfigurations[1].Value = _306;
  # DEBUG BEGIN_STMT

  <bb 40> [local count: 164090758]:
  # ReturnValue_311 = PHI <ReturnValue_296(38), ReturnValue_298(39)>
<L82>:
  # DEBUG ReturnValue => ReturnValue_311
  # DEBUG BEGIN_STMT
  _472 = ReturnValue_311;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG SelectorConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _46 = _472;
  Clock_Ip_pxScsConfigVlprMode = _46;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 27
  # DEBUG INLINE_ENTRY getSelectorConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG SelectorConfigIndex => 2
  # DEBUG BEGIN_STMT
  # DEBUG SelectorConfigIndex => 2
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.63_264 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.63_264 != 0B)
    goto <bb 44>; [70.00%]
  else
    goto <bb 46>; [30.00%]

  <bb 41> [local count: 1014686013]:
  # DEBUG BEGIN_STMT
  _266 = Clock_Ip_apConfig.63_264->Selectors[Index_265].Name;
  if (_266 == 27)
    goto <bb 42>; [5.50%]
  else
    goto <bb 43>; [94.50%]

  <bb 42> [local count: 55807731]:
  # Index_267 = PHI <Index_265(41)>
  # DEBUG BEGIN_STMT
  ReturnValue_268 = &Clock_Ip_apConfig.63_264->Selectors[Index_267];
  # DEBUG ReturnValue => ReturnValue_268
  # DEBUG BEGIN_STMT
  goto <bb 45>; [100.00%]

  <bb 43> [local count: 958878283]:
  # DEBUG BEGIN_STMT
  Index_269 = Index_265 + 1;
  # DEBUG Index => Index_269

  <bb 44> [local count: 1073741813]:
  # Index_265 = PHI <0(40), Index_269(43)>
  # DEBUG Index => Index_265
  # DEBUG BEGIN_STMT
  _270 = Clock_Ip_apConfig.63_264->SelectorsCount;
  _271 = (long unsigned int) _270;
  if (Index_265 < _271)
    goto <bb 41>; [94.50%]
  else
    goto <bb 45>; [5.50%]

  <bb 45> [local count: 114863530]:
  # ReturnValue_272 = PHI <ReturnValue_268(42), 0B(44)>
  # DEBUG ReturnValue => ReturnValue_272
  # DEBUG BEGIN_STMT
  if (ReturnValue_272 == 0B)
    goto <bb 46>; [30.00%]
  else
    goto <bb 47>; [70.00%]

  <bb 46> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_274 = &SelectorConfigurations[2];
  # DEBUG ReturnValue => ReturnValue_274
  # DEBUG BEGIN_STMT
  SelectorConfigurations[2].Name = 27;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _283 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  _284 = _283 >> 24;
  _285 = _284 & 15;
  _286 = ClockSource[_285];
  SelectorConfigurations[2].Value = _286;
  # DEBUG BEGIN_STMT

  <bb 47> [local count: 164090758]:
  # ReturnValue_287 = PHI <ReturnValue_272(45), ReturnValue_274(46)>
<L75>:
  # DEBUG ReturnValue => ReturnValue_287
  # DEBUG BEGIN_STMT
  _476 = ReturnValue_287;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG SelectorConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _47 = _476;
  Clock_Ip_pxScsConfigHsrunMode = _47;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 29
  # DEBUG INLINE_ENTRY getCoreDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.67_240 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.67_240 != 0B)
    goto <bb 51>; [70.00%]
  else
    goto <bb 53>; [30.00%]

  <bb 48> [local count: 1014686013]:
  # DEBUG BEGIN_STMT
  _242 = Clock_Ip_apConfig.67_240->Dividers[Index_241].Name;
  if (_242 == 29)
    goto <bb 49>; [5.50%]
  else
    goto <bb 50>; [94.50%]

  <bb 49> [local count: 55807731]:
  # Index_243 = PHI <Index_241(48)>
  # DEBUG BEGIN_STMT
  ReturnValue_244 = &Clock_Ip_apConfig.67_240->Dividers[Index_243];
  # DEBUG ReturnValue => ReturnValue_244
  # DEBUG BEGIN_STMT
  goto <bb 52>; [100.00%]

  <bb 50> [local count: 958878283]:
  # DEBUG BEGIN_STMT
  Index_245 = Index_241 + 1;
  # DEBUG Index => Index_245

  <bb 51> [local count: 1073741813]:
  # Index_241 = PHI <0(47), Index_245(50)>
  # DEBUG Index => Index_241
  # DEBUG BEGIN_STMT
  _246 = Clock_Ip_apConfig.67_240->DividersCount;
  _247 = (long unsigned int) _246;
  if (Index_241 < _247)
    goto <bb 48>; [94.50%]
  else
    goto <bb 52>; [5.50%]

  <bb 52> [local count: 114863530]:
  # ReturnValue_248 = PHI <ReturnValue_244(49), 0B(51)>
  # DEBUG ReturnValue => ReturnValue_248
  # DEBUG BEGIN_STMT
  if (ReturnValue_248 == 0B)
    goto <bb 53>; [30.00%]
  else
    goto <bb 54>; [70.00%]

  <bb 53> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_250 = &DividerConfigurations[0];
  # DEBUG ReturnValue => ReturnValue_250
  # DEBUG BEGIN_STMT
  DividerConfigurations[0].Name = 29;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _251 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  _252 = _251 >> 16;
  _253 = _252 & 15;
  _254 = _253 + 1;
  DividerConfigurations[0].Value = _254;
  # DEBUG BEGIN_STMT

  <bb 54> [local count: 164090758]:
  # ReturnValue_263 = PHI <ReturnValue_248(52), ReturnValue_250(53)>
<L68>:
  # DEBUG ReturnValue => ReturnValue_263
  # DEBUG BEGIN_STMT
  _480 = ReturnValue_263;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _48 = _480;
  Clock_Ip_pxCoreConfigRunMode = _48;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 30
  # DEBUG INLINE_ENTRY getCoreDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.67_216 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.67_216 != 0B)
    goto <bb 58>; [70.00%]
  else
    goto <bb 60>; [30.00%]

  <bb 55> [local count: 1014686011]:
  # DEBUG BEGIN_STMT
  _218 = Clock_Ip_apConfig.67_216->Dividers[Index_217].Name;
  if (_218 == 30)
    goto <bb 56>; [5.50%]
  else
    goto <bb 57>; [94.50%]

  <bb 56> [local count: 55807731]:
  # Index_219 = PHI <Index_217(55)>
  # DEBUG BEGIN_STMT
  ReturnValue_220 = &Clock_Ip_apConfig.67_216->Dividers[Index_219];
  # DEBUG ReturnValue => ReturnValue_220
  # DEBUG BEGIN_STMT
  goto <bb 59>; [100.00%]

  <bb 57> [local count: 958878280]:
  # DEBUG BEGIN_STMT
  Index_221 = Index_217 + 1;
  # DEBUG Index => Index_221

  <bb 58> [local count: 1073741811]:
  # Index_217 = PHI <0(54), Index_221(57)>
  # DEBUG Index => Index_217
  # DEBUG BEGIN_STMT
  _222 = Clock_Ip_apConfig.67_216->DividersCount;
  _223 = (long unsigned int) _222;
  if (Index_217 < _223)
    goto <bb 55>; [94.50%]
  else
    goto <bb 59>; [5.50%]

  <bb 59> [local count: 114863530]:
  # ReturnValue_224 = PHI <ReturnValue_220(56), 0B(58)>
  # DEBUG ReturnValue => ReturnValue_224
  # DEBUG BEGIN_STMT
  if (ReturnValue_224 == 0B)
    goto <bb 60>; [30.00%]
  else
    goto <bb 61>; [70.00%]

  <bb 60> [local count: 83686287]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_226 = &DividerConfigurations[1];
  # DEBUG ReturnValue => ReturnValue_226
  # DEBUG BEGIN_STMT
  DividerConfigurations[1].Name = 30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _231 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  _232 = _231 >> 16;
  _233 = _232 & 15;
  _234 = _233 + 1;
  DividerConfigurations[1].Value = _234;
  # DEBUG BEGIN_STMT

  <bb 61> [local count: 164090758]:
  # ReturnValue_239 = PHI <ReturnValue_224(59), ReturnValue_226(60)>
<L61>:
  # DEBUG ReturnValue => ReturnValue_239
  # DEBUG BEGIN_STMT
  _484 = ReturnValue_239;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _49 = _484;
  Clock_Ip_pxCoreConfigVlprMode = _49;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 31
  # DEBUG INLINE_ENTRY getCoreDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.67_192 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.67_192 != 0B)
    goto <bb 65>; [70.00%]
  else
    goto <bb 67>; [30.00%]

  <bb 62> [local count: 1014686009]:
  # DEBUG BEGIN_STMT
  _194 = Clock_Ip_apConfig.67_192->Dividers[Index_193].Name;
  if (_194 == 31)
    goto <bb 63>; [5.50%]
  else
    goto <bb 64>; [94.50%]

  <bb 63> [local count: 55807731]:
  # Index_195 = PHI <Index_193(62)>
  # DEBUG BEGIN_STMT
  ReturnValue_196 = &Clock_Ip_apConfig.67_192->Dividers[Index_195];
  # DEBUG ReturnValue => ReturnValue_196
  # DEBUG BEGIN_STMT
  goto <bb 66>; [100.00%]

  <bb 64> [local count: 958878279]:
  # DEBUG BEGIN_STMT
  Index_197 = Index_193 + 1;
  # DEBUG Index => Index_197

  <bb 65> [local count: 1073741809]:
  # Index_193 = PHI <0(61), Index_197(64)>
  # DEBUG Index => Index_193
  # DEBUG BEGIN_STMT
  _198 = Clock_Ip_apConfig.67_192->DividersCount;
  _199 = (long unsigned int) _198;
  if (Index_193 < _199)
    goto <bb 62>; [94.50%]
  else
    goto <bb 66>; [5.50%]

  <bb 66> [local count: 114863530]:
  # ReturnValue_200 = PHI <ReturnValue_196(63), 0B(65)>
  # DEBUG ReturnValue => ReturnValue_200
  # DEBUG BEGIN_STMT
  if (ReturnValue_200 == 0B)
    goto <bb 67>; [30.00%]
  else
    goto <bb 68>; [70.00%]

  <bb 67> [local count: 83686286]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_202 = &DividerConfigurations[2];
  # DEBUG ReturnValue => ReturnValue_202
  # DEBUG BEGIN_STMT
  DividerConfigurations[2].Name = 31;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _211 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  _212 = _211 >> 16;
  _213 = _212 & 15;
  _214 = _213 + 1;
  DividerConfigurations[2].Value = _214;
  # DEBUG BEGIN_STMT

  <bb 68> [local count: 164090757]:
  # ReturnValue_215 = PHI <ReturnValue_200(66), ReturnValue_202(67)>
<L54>:
  # DEBUG ReturnValue => ReturnValue_215
  # DEBUG BEGIN_STMT
  _488 = ReturnValue_215;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _50 = _488;
  Clock_Ip_pxCoreConfigHsrunMode = _50;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 33
  # DEBUG INLINE_ENTRY getBusDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.71_168 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.71_168 != 0B)
    goto <bb 72>; [70.00%]
  else
    goto <bb 74>; [30.00%]

  <bb 69> [local count: 1014686007]:
  # DEBUG BEGIN_STMT
  _170 = Clock_Ip_apConfig.71_168->Dividers[Index_169].Name;
  if (_170 == 33)
    goto <bb 70>; [5.50%]
  else
    goto <bb 71>; [94.50%]

  <bb 70> [local count: 55807730]:
  # Index_171 = PHI <Index_169(69)>
  # DEBUG BEGIN_STMT
  ReturnValue_172 = &Clock_Ip_apConfig.71_168->Dividers[Index_171];
  # DEBUG ReturnValue => ReturnValue_172
  # DEBUG BEGIN_STMT
  goto <bb 73>; [100.00%]

  <bb 71> [local count: 958878277]:
  # DEBUG BEGIN_STMT
  Index_173 = Index_169 + 1;
  # DEBUG Index => Index_173

  <bb 72> [local count: 1073741807]:
  # Index_169 = PHI <0(68), Index_173(71)>
  # DEBUG Index => Index_169
  # DEBUG BEGIN_STMT
  _174 = Clock_Ip_apConfig.71_168->DividersCount;
  _175 = (long unsigned int) _174;
  if (Index_169 < _175)
    goto <bb 69>; [94.50%]
  else
    goto <bb 73>; [5.50%]

  <bb 73> [local count: 114863530]:
  # ReturnValue_176 = PHI <ReturnValue_172(70), 0B(72)>
  # DEBUG ReturnValue => ReturnValue_176
  # DEBUG BEGIN_STMT
  if (ReturnValue_176 == 0B)
    goto <bb 74>; [30.00%]
  else
    goto <bb 75>; [70.00%]

  <bb 74> [local count: 83686286]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_178 = &DividerConfigurations[0];
  # DEBUG ReturnValue => ReturnValue_178
  # DEBUG BEGIN_STMT
  DividerConfigurations[0].Name = 33;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _179 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  _180 = _179 >> 4;
  _181 = _180 & 15;
  _182 = _181 + 1;
  DividerConfigurations[0].Value = _182;
  # DEBUG BEGIN_STMT

  <bb 75> [local count: 164090757]:
  # ReturnValue_191 = PHI <ReturnValue_176(73), ReturnValue_178(74)>
<L47>:
  # DEBUG ReturnValue => ReturnValue_191
  # DEBUG BEGIN_STMT
  _492 = ReturnValue_191;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _51 = _492;
  Clock_Ip_pxBusConfigRunMode = _51;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 34
  # DEBUG INLINE_ENTRY getBusDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.71_144 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.71_144 != 0B)
    goto <bb 79>; [70.00%]
  else
    goto <bb 81>; [30.00%]

  <bb 76> [local count: 1014686003]:
  # DEBUG BEGIN_STMT
  _146 = Clock_Ip_apConfig.71_144->Dividers[Index_145].Name;
  if (_146 == 34)
    goto <bb 77>; [5.50%]
  else
    goto <bb 78>; [94.50%]

  <bb 77> [local count: 55807730]:
  # Index_147 = PHI <Index_145(76)>
  # DEBUG BEGIN_STMT
  ReturnValue_148 = &Clock_Ip_apConfig.71_144->Dividers[Index_147];
  # DEBUG ReturnValue => ReturnValue_148
  # DEBUG BEGIN_STMT
  goto <bb 80>; [100.00%]

  <bb 78> [local count: 958878273]:
  # DEBUG BEGIN_STMT
  Index_149 = Index_145 + 1;
  # DEBUG Index => Index_149

  <bb 79> [local count: 1073741803]:
  # Index_145 = PHI <0(75), Index_149(78)>
  # DEBUG Index => Index_145
  # DEBUG BEGIN_STMT
  _150 = Clock_Ip_apConfig.71_144->DividersCount;
  _151 = (long unsigned int) _150;
  if (Index_145 < _151)
    goto <bb 76>; [94.50%]
  else
    goto <bb 80>; [5.50%]

  <bb 80> [local count: 114863529]:
  # ReturnValue_152 = PHI <ReturnValue_148(77), 0B(79)>
  # DEBUG ReturnValue => ReturnValue_152
  # DEBUG BEGIN_STMT
  if (ReturnValue_152 == 0B)
    goto <bb 81>; [30.00%]
  else
    goto <bb 82>; [70.00%]

  <bb 81> [local count: 83686286]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_154 = &DividerConfigurations[1];
  # DEBUG ReturnValue => ReturnValue_154
  # DEBUG BEGIN_STMT
  DividerConfigurations[1].Name = 34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _159 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  _160 = _159 >> 4;
  _161 = _160 & 15;
  _162 = _161 + 1;
  DividerConfigurations[1].Value = _162;
  # DEBUG BEGIN_STMT

  <bb 82> [local count: 164090757]:
  # ReturnValue_167 = PHI <ReturnValue_152(80), ReturnValue_154(81)>
<L40>:
  # DEBUG ReturnValue => ReturnValue_167
  # DEBUG BEGIN_STMT
  _496 = ReturnValue_167;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _52 = _496;
  Clock_Ip_pxBusConfigVlprMode = _52;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 35
  # DEBUG INLINE_ENTRY getBusDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.71_120 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.71_120 != 0B)
    goto <bb 86>; [70.00%]
  else
    goto <bb 88>; [30.00%]

  <bb 83> [local count: 1014686001]:
  # DEBUG BEGIN_STMT
  _122 = Clock_Ip_apConfig.71_120->Dividers[Index_121].Name;
  if (_122 == 35)
    goto <bb 84>; [5.50%]
  else
    goto <bb 85>; [94.50%]

  <bb 84> [local count: 55807730]:
  # Index_123 = PHI <Index_121(83)>
  # DEBUG BEGIN_STMT
  ReturnValue_124 = &Clock_Ip_apConfig.71_120->Dividers[Index_123];
  # DEBUG ReturnValue => ReturnValue_124
  # DEBUG BEGIN_STMT
  goto <bb 87>; [100.00%]

  <bb 85> [local count: 958878272]:
  # DEBUG BEGIN_STMT
  Index_125 = Index_121 + 1;
  # DEBUG Index => Index_125

  <bb 86> [local count: 1073741800]:
  # Index_121 = PHI <0(82), Index_125(85)>
  # DEBUG Index => Index_121
  # DEBUG BEGIN_STMT
  _126 = Clock_Ip_apConfig.71_120->DividersCount;
  _127 = (long unsigned int) _126;
  if (Index_121 < _127)
    goto <bb 83>; [94.50%]
  else
    goto <bb 87>; [5.50%]

  <bb 87> [local count: 114863529]:
  # ReturnValue_128 = PHI <ReturnValue_124(84), 0B(86)>
  # DEBUG ReturnValue => ReturnValue_128
  # DEBUG BEGIN_STMT
  if (ReturnValue_128 == 0B)
    goto <bb 88>; [30.00%]
  else
    goto <bb 89>; [70.00%]

  <bb 88> [local count: 83686286]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_130 = &DividerConfigurations[2];
  # DEBUG ReturnValue => ReturnValue_130
  # DEBUG BEGIN_STMT
  DividerConfigurations[2].Name = 35;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _139 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  _140 = _139 >> 4;
  _141 = _140 & 15;
  _142 = _141 + 1;
  DividerConfigurations[2].Value = _142;
  # DEBUG BEGIN_STMT

  <bb 89> [local count: 164090756]:
  # ReturnValue_143 = PHI <ReturnValue_128(87), ReturnValue_130(88)>
<L33>:
  # DEBUG ReturnValue => ReturnValue_143
  # DEBUG BEGIN_STMT
  _500 = ReturnValue_143;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _53 = _500;
  Clock_Ip_pxBusConfigHsrunMode = _53;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 37
  # DEBUG INLINE_ENTRY getSlowDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.75_99 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.75_99 != 0B)
    goto <bb 93>; [70.00%]
  else
    goto <bb 95>; [30.00%]

  <bb 90> [local count: 1014686000]:
  # DEBUG BEGIN_STMT
  _101 = Clock_Ip_apConfig.75_99->Dividers[Index_100].Name;
  if (_101 == 37)
    goto <bb 91>; [5.50%]
  else
    goto <bb 92>; [94.50%]

  <bb 91> [local count: 55807730]:
  # Index_102 = PHI <Index_100(90)>
  # DEBUG BEGIN_STMT
  ReturnValue_103 = &Clock_Ip_apConfig.75_99->Dividers[Index_102];
  # DEBUG ReturnValue => ReturnValue_103
  # DEBUG BEGIN_STMT
  goto <bb 94>; [100.00%]

  <bb 92> [local count: 958878269]:
  # DEBUG BEGIN_STMT
  Index_104 = Index_100 + 1;
  # DEBUG Index => Index_104

  <bb 93> [local count: 1073741798]:
  # Index_100 = PHI <0(89), Index_104(92)>
  # DEBUG Index => Index_100
  # DEBUG BEGIN_STMT
  _105 = Clock_Ip_apConfig.75_99->DividersCount;
  _106 = (long unsigned int) _105;
  if (Index_100 < _106)
    goto <bb 90>; [94.50%]
  else
    goto <bb 94>; [5.50%]

  <bb 94> [local count: 114863529]:
  # ReturnValue_107 = PHI <ReturnValue_103(91), 0B(93)>
  # DEBUG ReturnValue => ReturnValue_107
  # DEBUG BEGIN_STMT
  if (ReturnValue_107 == 0B)
    goto <bb 95>; [30.00%]
  else
    goto <bb 96>; [70.00%]

  <bb 95> [local count: 83686285]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_109 = &DividerConfigurations[0];
  # DEBUG ReturnValue => ReturnValue_109
  # DEBUG BEGIN_STMT
  DividerConfigurations[0].Name = 37;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _110 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  _111 = _110 & 15;
  _112 = _111 + 1;
  DividerConfigurations[0].Value = _112;
  # DEBUG BEGIN_STMT

  <bb 96> [local count: 164090756]:
  # ReturnValue_119 = PHI <ReturnValue_107(94), ReturnValue_109(95)>
<L26>:
  # DEBUG ReturnValue => ReturnValue_119
  # DEBUG BEGIN_STMT
  _504 = ReturnValue_119;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _54 = _504;
  Clock_Ip_pxSlowConfigRunMode = _54;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 38
  # DEBUG INLINE_ENTRY getSlowDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 1
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.75_78 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.75_78 != 0B)
    goto <bb 100>; [70.00%]
  else
    goto <bb 102>; [30.00%]

  <bb 97> [local count: 1014685996]:
  # DEBUG BEGIN_STMT
  _80 = Clock_Ip_apConfig.75_78->Dividers[Index_79].Name;
  if (_80 == 38)
    goto <bb 98>; [5.50%]
  else
    goto <bb 99>; [94.50%]

  <bb 98> [local count: 55807730]:
  # Index_81 = PHI <Index_79(97)>
  # DEBUG BEGIN_STMT
  ReturnValue_82 = &Clock_Ip_apConfig.75_78->Dividers[Index_81];
  # DEBUG ReturnValue => ReturnValue_82
  # DEBUG BEGIN_STMT
  goto <bb 101>; [100.00%]

  <bb 99> [local count: 958878266]:
  # DEBUG BEGIN_STMT
  Index_83 = Index_79 + 1;
  # DEBUG Index => Index_83

  <bb 100> [local count: 1073741796]:
  # Index_79 = PHI <0(96), Index_83(99)>
  # DEBUG Index => Index_79
  # DEBUG BEGIN_STMT
  _84 = Clock_Ip_apConfig.75_78->DividersCount;
  _85 = (long unsigned int) _84;
  if (Index_79 < _85)
    goto <bb 97>; [94.50%]
  else
    goto <bb 101>; [5.50%]

  <bb 101> [local count: 114863528]:
  # ReturnValue_86 = PHI <ReturnValue_82(98), 0B(100)>
  # DEBUG ReturnValue => ReturnValue_86
  # DEBUG BEGIN_STMT
  if (ReturnValue_86 == 0B)
    goto <bb 102>; [30.00%]
  else
    goto <bb 103>; [70.00%]

  <bb 102> [local count: 83686285]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_88 = &DividerConfigurations[1];
  # DEBUG ReturnValue => ReturnValue_88
  # DEBUG BEGIN_STMT
  DividerConfigurations[1].Name = 38;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _92 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  _93 = _92 & 15;
  _94 = _93 + 1;
  DividerConfigurations[1].Value = _94;
  # DEBUG BEGIN_STMT

  <bb 103> [local count: 164090755]:
  # ReturnValue_98 = PHI <ReturnValue_86(101), ReturnValue_88(102)>
<L19>:
  # DEBUG ReturnValue => ReturnValue_98
  # DEBUG BEGIN_STMT
  _508 = ReturnValue_98;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _55 = _508;
  Clock_Ip_pxSlowConfigVlprMode = _55;
  # DEBUG BEGIN_STMT
  # DEBUG Name => 39
  # DEBUG INLINE_ENTRY getSlowDividerConfig
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  # DEBUG DividerConfigIndex => 2
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.75_57 = Clock_Ip_apConfig;
  if (Clock_Ip_apConfig.75_57 != 0B)
    goto <bb 107>; [70.00%]
  else
    goto <bb 109>; [30.00%]

  <bb 104> [local count: 1014685994]:
  # DEBUG BEGIN_STMT
  _59 = Clock_Ip_apConfig.75_57->Dividers[Index_58].Name;
  if (_59 == 39)
    goto <bb 105>; [5.50%]
  else
    goto <bb 106>; [94.50%]

  <bb 105> [local count: 55807730]:
  # Index_60 = PHI <Index_58(104)>
  # DEBUG BEGIN_STMT
  ReturnValue_61 = &Clock_Ip_apConfig.75_57->Dividers[Index_60];
  # DEBUG ReturnValue => ReturnValue_61
  # DEBUG BEGIN_STMT
  goto <bb 108>; [100.00%]

  <bb 106> [local count: 958878264]:
  # DEBUG BEGIN_STMT
  Index_62 = Index_58 + 1;
  # DEBUG Index => Index_62

  <bb 107> [local count: 1073741792]:
  # Index_58 = PHI <0(103), Index_62(106)>
  # DEBUG Index => Index_58
  # DEBUG BEGIN_STMT
  _63 = Clock_Ip_apConfig.75_57->DividersCount;
  _64 = (long unsigned int) _63;
  if (Index_58 < _64)
    goto <bb 104>; [94.50%]
  else
    goto <bb 108>; [5.50%]

  <bb 108> [local count: 114863528]:
  # ReturnValue_65 = PHI <ReturnValue_61(105), 0B(107)>
  # DEBUG ReturnValue => ReturnValue_65
  # DEBUG BEGIN_STMT
  if (ReturnValue_65 == 0B)
    goto <bb 109>; [30.00%]
  else
    goto <bb 110>; [70.00%]

  <bb 109> [local count: 83686285]:
  # DEBUG ReturnValue => NULL
  # DEBUG BEGIN_STMT
  ReturnValue_67 = &DividerConfigurations[2];
  # DEBUG ReturnValue => ReturnValue_67
  # DEBUG BEGIN_STMT
  DividerConfigurations[2].Name = 39;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _74 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  _75 = _74 & 15;
  _76 = _75 + 1;
  DividerConfigurations[2].Value = _76;
  # DEBUG BEGIN_STMT

  <bb 110> [local count: 164090755]:
  # ReturnValue_77 = PHI <ReturnValue_65(108), ReturnValue_67(109)>
<L12>:
  # DEBUG ReturnValue => ReturnValue_77
  # DEBUG BEGIN_STMT
  _512 = ReturnValue_77;
  # DEBUG Name => NULL
  # DEBUG Index => NULL
  # DEBUG DividerConfigIndex => NULL
  # DEBUG ReturnValue => NULL
  _56 = _512;
  Clock_Ip_pxSlowConfigHsrunMode = _56;
  goto <bb 128>; [100.00%]

  <bb 111> [local count: 164090760]:
<L91>:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_4(D)
  # DEBUG INLINE_ENTRY Clock_Ip_SpecificPlatformInitClock
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig = Config_4(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _392 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCSR;
  _393 = _392 & 1;
  if (_393 == 0)
    goto <bb 112>; [33.00%]
  else
    goto <bb 117>; [67.00%]

  <bb 112> [local count: 54149951]:
  # DEBUG BEGIN_STMT
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 0;
  # DEBUG BEGIN_STMT
  SetFircToResetValue_TrustedCall ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 113> [local count: 506192575]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _394 ={v} MEM[(struct SCG_Type *)1074151424B].FIRCCSR;
  _395 = _394 >> 24;
  IrcoscStatus_396 = _395 & 1;
  # DEBUG IrcoscStatus => IrcoscStatus_396
  # DEBUG BEGIN_STMT
  TimeoutTicks.79_397 = TimeoutTicks;
  TimeoutOccurred_398 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.79_397);
  # DEBUG TimeoutOccurred => TimeoutOccurred_398
  # DEBUG BEGIN_STMT
  if (IrcoscStatus_396 == 0)
    goto <bb 114>; [94.50%]
  else
    goto <bb 115>; [5.50%]

  <bb 114> [local count: 478351983]:
  if (TimeoutOccurred_398 != 0)
    goto <bb 115>; [5.50%]
  else
    goto <bb 113>; [94.50%]

  <bb 115> [local count: 54149951]:
  # TimeoutOccurred_399 = PHI <TimeoutOccurred_398(113), TimeoutOccurred_398(114)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_399 != 0)
    goto <bb 116>; [33.00%]
  else
    goto <bb 118>; [67.00%]

  <bb 116> [local count: 17869484]:
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 5);
  goto <bb 118>; [100.00%]

  <bb 117> [local count: 109940809]:
  # DEBUG BEGIN_STMT
  Clock_Ip_bFircWasEnabledBeforeMcuInit = 1;

  <bb 118> [local count: 164090760]:
  # DEBUG BEGIN_STMT
  SetSimLpoclksRegister_TrustedCall (Config_4(D));
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  goto <bb 128>; [100.00%]

  <bb 119> [local count: 164090760]:
<L92>:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_4(D)
  # DEBUG INLINE_ENTRY DisableSafeClock
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG FircConfigFound => 0
  # DEBUG BEGIN_STMT
  if (Config_4(D) != 0B)
    goto <bb 124>; [70.00%]
  else
    goto <bb 125>; [30.00%]

  <bb 120> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  _402 = Clock_Ip_apConfig.82_400->Ircoscs[Index_401].Name;
  if (_402 == 5)
    goto <bb 121>; [5.50%]
  else
    goto <bb 123>; [94.50%]

  <bb 121> [local count: 55807731]:
  # Clock_Ip_apConfig.82_403 = PHI <Clock_Ip_apConfig.82_400(120)>
  # Index_404 = PHI <Index_401(120)>
  # DEBUG BEGIN_STMT
  # DEBUG FircConfigFound => 1
  # DEBUG BEGIN_STMT
  _405 = Clock_Ip_apConfig.82_403->Ircoscs[Index_404].Enable;
  if (_405 == 0)
    goto <bb 122>; [50.00%]
  else
    goto <bb 127>; [50.00%]

  <bb 122> [local count: 27903866]:
  # DEBUG BEGIN_STMT
  _406 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _407 = (int) _406;
  _408 = Clock_Ip_axIntOscCallbacks[_407].Disable;
  _408 (5);
  # DEBUG FircConfigFound => 1
  # DEBUG BEGIN_STMT
  goto <bb 127>; [100.00%]

  <bb 123> [local count: 958878294]:
  # DEBUG BEGIN_STMT
  Index_409 = Index_401 + 1;
  # DEBUG Index => Index_409

  <bb 124> [local count: 1073741824]:
  # Index_401 = PHI <0(119), Index_409(123)>
  # DEBUG Index => Index_401
  # DEBUG BEGIN_STMT
  Clock_Ip_apConfig.82_400 = Clock_Ip_apConfig;
  _410 = Clock_Ip_apConfig.82_400->IrcoscsCount;
  _411 = (long unsigned int) _410;
  if (Index_401 < _411)
    goto <bb 120>; [94.50%]
  else
    goto <bb 125>; [5.50%]

  <bb 125> [local count: 108283028]:
  # DEBUG FircConfigFound => NULL
  Clock_Ip_bFircWasEnabledBeforeMcuInit.83_412 = Clock_Ip_bFircWasEnabledBeforeMcuInit;
  if (Clock_Ip_bFircWasEnabledBeforeMcuInit.83_412 != 0)
    goto <bb 127>; [50.00%]
  else
    goto <bb 126>; [50.00%]

  <bb 126> [local count: 54141514]:
  # DEBUG BEGIN_STMT
  _413 = Clock_Ip_au8IrcoscCallbackIndex[4];
  _414 = (int) _413;
  _415 = Clock_Ip_axIntOscCallbacks[_414].Disable;
  _415 (5);

  <bb 127> [local count: 164090760]:
  # DEBUG FircConfigFound => NULL

  <bb 128> [local count: 656363035]:
<L5>:
  # DEBUG Config => NULL
  # DEBUG Index => NULL
  # DEBUG Config => NULL
  # DEBUG IrcoscStatus => NULL
  # DEBUG TimeoutTicks => NULL
  # DEBUG ElapsedTime => NULL
  # DEBUG StartTime => NULL
  # DEBUG TimeoutOccurred => NULL
  return;

}


