Clock_Ip_SetSimTraceDivMul_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SIM_Type *)1074036736B].CLKDIV4;
  _2 = Config_13(D)->Value;
  _3 = _2 + 4294967295;
  _4 = _3 << 1;
  _5 = _4 & 14;
  _6 = Config_13(D)->Options[0];
  _7 = (long unsigned int) _6;
  _8 = _7 + 4294967295;
  _9 = _8 & 1;
  _10 = _5 | _9;
  _11 = _1 | _10;
  MEM[(struct SIM_Type *)1074036736B].CLKDIV4 ={v} _11;
  return;

}


Clock_Ip_SetPccPcdDivFrac_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_13(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][5];
  _3 = (int) _2;
  RegValue_14 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[_3];
  # DEBUG RegValue => RegValue_14
  # DEBUG BEGIN_STMT
  RegValue_15 = RegValue_14 & 4294967280;
  # DEBUG RegValue => RegValue_15
  # DEBUG BEGIN_STMT
  _4 = Config_13(D)->Value;
  _5 = _4 + 4294967295;
  _6 = _5 & 7;
  RegValue_16 = _6 | RegValue_15;
  # DEBUG RegValue => RegValue_16
  # DEBUG BEGIN_STMT
  _7 = Config_13(D)->Options[0];
  _8 = (long unsigned int) _7;
  _9 = _8 + 4294967295;
  _10 = _9 << 3;
  _11 = _10 & 8;
  RegValue_17 = _11 | RegValue_16;
  # DEBUG RegValue => RegValue_17
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[_3] ={v} RegValue_17;
  return;

}


Clock_Ip_SetSimClkoutDiv_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_6 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  RegValue_7 = RegValue_6 & 4294965503;
  # DEBUG RegValue => RegValue_7
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 8;
  _4 = _3 & 1792;
  RegValue_9 = _4 | RegValue_7;
  # DEBUG RegValue => RegValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} RegValue_9;
  return;

}


Clock_Ip_SetScgHsrunDivslow_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_4 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG RegValue => RegValue_4
  # DEBUG BEGIN_STMT
  RegValue_5 = RegValue_4 & 4294967280;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  _1 = Config_6(D)->Value;
  _2 = _1 + 4294967295;
  RegValue_7 = _2 | RegValue_5;
  # DEBUG RegValue => RegValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} RegValue_7;
  return;

}


Clock_Ip_SetScgHsrunDivbus_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4294967055;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 4;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgHsrunDivcore_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4293984255;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 16;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgVlprDivslow_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_4 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG RegValue => RegValue_4
  # DEBUG BEGIN_STMT
  RegValue_5 = RegValue_4 & 4294967280;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  _1 = Config_6(D)->Value;
  _2 = _1 + 4294967295;
  RegValue_7 = _2 | RegValue_5;
  # DEBUG RegValue => RegValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} RegValue_7;
  return;

}


Clock_Ip_SetScgVlprDivbus_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4294967055;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 4;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgVlprDivcore_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4293984255;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 16;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgRunDivslow_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_4 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG RegValue => RegValue_4
  # DEBUG BEGIN_STMT
  RegValue_5 = RegValue_4 & 4294967280;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  _1 = Config_6(D)->Value;
  _2 = _1 + 4294967295;
  RegValue_7 = _2 | RegValue_5;
  # DEBUG RegValue => RegValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} RegValue_7;
  return;

}


Clock_Ip_SetScgRunDivbus_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4294967055;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 4;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgRunDivcore_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG RegValue => RegValue_5
  # DEBUG BEGIN_STMT
  RegValue_6 = RegValue_5 & 4293984255;
  # DEBUG RegValue => RegValue_6
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Value;
  _2 = _1 + 4294967295;
  _3 = _2 << 16;
  RegValue_8 = _3 | RegValue_6;
  # DEBUG RegValue => RegValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} RegValue_8;
  return;

}


Clock_Ip_SetScgAsyncDiv2_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerValue;
  uint32 Instance;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  long unsigned int _3;
  unsigned char _4;
  volatile struct Clock_Ip_ScgPeriphAsyncDivType * _5;
  long unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_9 = (uint32) _2;
  # DEBUG Instance => Instance_9
  # DEBUG BEGIN_STMT
  _3 = Config_8(D)->Value;
  _4 = Clock_Ip_au8DividerValueHardwareValue[_3];
  DividerValue_10 = (uint32) _4;
  # DEBUG DividerValue => DividerValue_10
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxScgPeriphAsyncDivs[Instance_9];
  RegValue_11 ={v} _5->ASYNC_DIV;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  RegValue_12 = RegValue_11 & 4294965503;
  # DEBUG RegValue => RegValue_12
  # DEBUG BEGIN_STMT
  _6 = DividerValue_10 << 8;
  RegValue_13 = _6 | RegValue_12;
  # DEBUG RegValue => RegValue_13
  # DEBUG BEGIN_STMT
  _5->ASYNC_DIV ={v} RegValue_13;
  return;

}


Clock_Ip_SetScgAsyncDiv1_TrustedCall (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerValue;
  uint32 Instance;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  long unsigned int _3;
  unsigned char _4;
  volatile struct Clock_Ip_ScgPeriphAsyncDivType * _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_7(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_8 = (uint32) _2;
  # DEBUG Instance => Instance_8
  # DEBUG BEGIN_STMT
  _3 = Config_7(D)->Value;
  _4 = Clock_Ip_au8DividerValueHardwareValue[_3];
  DividerValue_9 = (uint32) _4;
  # DEBUG DividerValue => DividerValue_9
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxScgPeriphAsyncDivs[Instance_8];
  RegValue_10 ={v} _5->ASYNC_DIV;
  # DEBUG RegValue => RegValue_10
  # DEBUG BEGIN_STMT
  RegValue_11 = RegValue_10 & 4294967288;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  RegValue_12 = DividerValue_9 | RegValue_11;
  # DEBUG RegValue => RegValue_12
  # DEBUG BEGIN_STMT
  _5->ASYNC_DIV ={v} RegValue_12;
  return;

}


Clock_Ip_SetSimTraceDivMul (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetSimTraceDivMul_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetPccPcdDivFrac (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetPccPcdDivFrac_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetSimClkoutDiv (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetSimClkoutDiv_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgHsrunDivslow (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgHsrunDivslow_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgHsrunDivbus (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgHsrunDivbus_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgHsrunDivcore (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgHsrunDivcore_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgVlprDivslow (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgVlprDivslow_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgVlprDivbus (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgVlprDivbus_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgVlprDivcore (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgVlprDivcore_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgRunDivslow (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgRunDivslow_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgRunDivbus (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgRunDivbus_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgRunDivcore (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgRunDivcore_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgAsyncDiv2 (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgAsyncDiv2_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetScgAsyncDiv1 (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_SetScgAsyncDiv1_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_Callback_DividerEmpty (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


