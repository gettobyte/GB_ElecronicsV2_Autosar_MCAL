Histogram:
Power_Ip_InstallNotificationsCallback (void (*Power_Ip_ReportErrorsCallbackType) (Power_Ip_ReportErrorType, uint8) ReportErrorsCallback)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_pfReportErrorsCallback = ReportErrorsCallback_2(D);
  return;

}


Power_Ip_EnableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM4_EnableSleepOnExit ();
  return;

}


Power_Ip_DisableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM4_DisableSleepOnExit ();
  return;

}


Power_Ip_Init (const struct Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
  const struct Power_Ip_RCM_ConfigType * _1;
  const struct Power_Ip_PMC_ConfigType * _2;
  const struct Power_Ip_SMC_ConfigType * _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = HwIPsConfigPtr_5(D)->RCMConfigPtr;
  Power_Ip_RCM_ResetInit (_1);
  # DEBUG BEGIN_STMT
  _2 = HwIPsConfigPtr_5(D)->PMCConfigPtr;
  Power_Ip_PMC_PowerInit (_2);
  # DEBUG BEGIN_STMT
  _3 = HwIPsConfigPtr_5(D)->SMCConfigPtr;
  Power_Ip_SMC_AllowedModesConfig (_3);
  return;

}


Power_Ip_GetResetRawValue ()
{
  Power_Ip_RawResetType ResetReason;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetReason_3 = Power_Ip_RCM_GetResetRawValue ();
  # DEBUG ResetReason => ResetReason_3
  # DEBUG BEGIN_STMT
  return ResetReason_3;

}


Power_Ip_GetResetReason ()
{
  Power_Ip_ResetType ResetReason;
  static const Power_Ip_ResetType ResetReasonArray[15] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
  uint32 ResetVal;
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ResetReason => 14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetVal_3 = Power_Ip_RCM_GetResetReason ();
  # DEBUG ResetVal => ResetVal_3
  # DEBUG BEGIN_STMT
  # DEBUG ResetReasonIndex => ResetVal_3
  # DEBUG INLINE_ENTRY Power_Ip_ConvertIntergeToResetType
  # DEBUG BEGIN_STMT
  # DEBUG ResetReason => 12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = ResetReasonArray[ResetVal_3];
  if (_4 <= 14)
    goto <bb 3>; [65.00%]
  else
    goto <bb 4>; [35.00%]

  <bb 3> [local count: 697932186]:
  # DEBUG BEGIN_STMT
  # DEBUG ResetReason => _4

  <bb 4> [local count: 1073741824]:
  # ResetReason_5 = PHI <12(2), _4(3)>
  # DEBUG ResetReason => ResetReason_5
  # DEBUG BEGIN_STMT
  # DEBUG ResetReasonIndex => NULL
  # DEBUG ResetReason => NULL
  # DEBUG ResetReason => ResetReason_5
  # DEBUG BEGIN_STMT
  return ResetReason_5;

}


Power_Ip_SetMode (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  Power_Ip_PowerModeType PowerMode;
  uint32 PowerSwitchMode;
  <unnamed type> _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PowerMode_5 = ModeConfigPtr_4(D)->PowerMode;
  # DEBUG PowerMode => PowerMode_5
  # DEBUG BEGIN_STMT
  _1 = Power_Ip_SMC_ModeCheckEntry (PowerMode_5);
  if (_1 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  PowerSwitchMode_8 = Power_Ip_SMC_ModeConfig (ModeConfigPtr_4(D));
  # DEBUG PowerSwitchMode => PowerSwitchMode_8
  # DEBUG BEGIN_STMT
  if (PowerSwitchMode_8 == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 719407023]:
  # DEBUG PowerSwitchMode => NULL
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (3, 255);

  <bb 6> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


