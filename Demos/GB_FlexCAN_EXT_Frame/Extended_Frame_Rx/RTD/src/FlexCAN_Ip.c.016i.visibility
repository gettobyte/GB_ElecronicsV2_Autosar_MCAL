
Marking local functions: FlexCAN_ProcessSpuriousInterruptMB FlexCAN_IRQHandlerRxFIFO FlexCAN_SetRegDefaultVal FlexCAN_SetRxMaskType FlexCAN_SetTxArbitrationStartDelay FlexCAN_IsFreezeMode FlexCAN_SetRxIndividualMask FlexCAN_SetRxMsgBuffGlobalMask FlexCAN_GetMsgBuffIntStatusFlag FlexCAN_SetClkSrc RxFifoOcuppiedLastMsgBuff FlexCAN_IsListenOnlyModeEnabled FlexCAN_IsFDEnabled FlexCAN_SetSelfReception FlexCAN_EnableExtCbt FlexCAN_IsExCbtEnabled FlexCAN_GetFDTimeSegments FlexCAN_GetTimeSegments FlexCAN_GetExtendedTimeSegments FlexCAN_SetExtendedTimeSegments FlexCAN_SetTimeSegments FlexCAN_SetFDTimeSegments FlexCAN_GetBuffStatusImask FlexCAN_GetBuffStatusFlag FlexCAN_ClearMsgBuffIntStatusFlag FlexCAN_UnlockRxMsgBuff FlexCAN_SetListenOnlyMode FlexCAN_SetFDEnabled FlexCAN_IsEnabled FlexCAN_SetTDCOffset FlexCAN_SetRxFifoGlobalMask DevAssert


Marking externally visible functions: FlexCAN_Ip_ManualBusOffRecovery FlexCAN_Ip_GetListenOnlyMode FlexCAN_Ip_SetListenOnlyMode_Privileged FlexCAN_Ip_SetRxMb15Mask_Privileged FlexCAN_Ip_SetRxMb14Mask_Privileged FlexCAN_Ip_AbortTransfer FlexCAN_Ip_SetErrorInt_Privileged FlexCAN_Ip_DisableInterrupts_Privileged FlexCAN_Ip_EnableInterrupts_Privileged FlexCAN_Ip_ClearBuffStatusFlag FlexCAN_Ip_GetBuffStatusFlag FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged FlexCAN_Ip_SetTDCOffset_Privileged FlexCAN_Ip_GetBitrateFD FlexCAN_Ip_SetBitrateCbt_Privileged FlexCAN_Ip_GetTDCValue FlexCAN_Ip_GetTDCFail FlexCAN_Ip_ClearTDCFail FlexCAN_Ip_GetBitrate FlexCAN_Ip_SetBitrate_Privileged FlexCAN_Ip_SetRxMaskType_Privileged FlexCAN_Ip_SetStopMode_Privileged FlexCAN_Ip_SetStartMode_Privileged FlexCAN_Ip_GetStartMode_Privileged FlexCAN_Ip_GetStopMode_Privileged FlexCAN_Ip_MainFunctionWrite FlexCAN_Ip_MainFunctionBusOff_Privileged FlexCAN_Ip_MainFunctionRead FlexCAN_Ip_Deinit_Privileged FlexCAN_Ip_SetRxFifoGlobalMask_Privileged FlexCAN_Ip_SetRxIndividualMask_Privileged FlexCAN_Ip_ExitFreezeMode_Privileged FlexCAN_Ip_EnterFreezeMode_Privileged FlexCAN_Ip_SetRxMbGlobalMask_Privileged FlexCAN_Ip_SendBlocking FlexCAN_BusOff_IRQHandler FlexCAN_Error_IRQHandler FlexCAN_Ip_GetControllerRxErrorCounter FlexCAN_Ip_GetControllerTxErrorCounter FlexCAN_Ip_GetErrorStatus FlexCAN_Ip_ClearErrorStatus FlexCAN_IRQHandler FlexCAN_Ip_GetTransferStatus FlexCAN_Ip_ConfigRemoteResponseMb FlexCAN_Ip_ConfigRxFifo_Privileged FlexCAN_Ip_RxFifoBlocking FlexCAN_Ip_RxFifo FlexCAN_Ip_ReceiveBlocking FlexCAN_Ip_Receive FlexCAN_Ip_ConfigRxMb FlexCAN_Ip_Send FlexCAN_Ip_Init_Privileged


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20) @06f43d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20) @06f43c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10) @06f438c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10) @06f437e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 
  Calls: 
FlexCAN_SetErrIntCmd/147 (FlexCAN_SetErrIntCmd) @06f43380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 
  Calls: 
FlexCAN_DisableInterrupts/146 (FlexCAN_DisableInterrupts) @06f430e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/97 
  Calls: 
FlexCAN_EnableInterrupts/145 (FlexCAN_EnableInterrupts) @06f33ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_EnableInterrupts_Privileged/96 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/144 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17) @06f33a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/143 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17) @06f339a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/142 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16) @06f33700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/141 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16) @06f33620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/140 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15) @06f331c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/139 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15) @06f330e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/138 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09) @06f24d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/87 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/137 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09) @06f24c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/87 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/136 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14) @06f24700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/135 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14) @06f24620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/134 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08) @06f24380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/133 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08) @06f242a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/132 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07) @06f24000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/131 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07) @06f0fee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 
  Calls: 
FlexCAN_ExitFreezeMode/130 (FlexCAN_ExitFreezeMode) @06f0f380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 FlexCAN_Ip_ExitFreezeMode_Privileged/73 
  Calls: 
FlexCAN_SetRxFifoFilter/129 (FlexCAN_SetRxFifoFilter) @06ed9ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxFifo_Privileged/59 
  Calls: 
FlexCAN_Enable/128 (FlexCAN_Enable) @06ed9e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 FlexCAN_Ip_SetRxMb15Mask_Privileged/101 FlexCAN_Ip_SetRxMb14Mask_Privileged/100 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetRxMaskType_Privileged/84 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 FlexCAN_Ip_SetRxIndividualMask_Privileged/74 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 FlexCAN_Ip_ConfigRxFifo_Privileged/59 
  Calls: 
FlexCAN_SetRxMsgBuff/127 (FlexCAN_SetRxMsgBuff) @06ed97e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxMb/54 FlexCAN_Ip_ConfigRxMb/54 FlexCAN_Ip_ConfigRxMb/54 
  Calls: 
FlexCAN_SetOperationMode/126 (FlexCAN_SetOperationMode) @06ed90e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_Init_Privileged/52 
  Calls: 
FLEXCAN_ClearMsgBuffIntCmd/125 (FLEXCAN_ClearMsgBuffIntCmd) @06ec2e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_AbortTransfer/99 FlexCAN_AbortRxTransfer/51 
  Calls: 
FlexCAN_GetMsgBuffTimestamp/124 (FlexCAN_GetMsgBuffTimestamp) @06ec2b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/79 FlexCAN_IRQHandlerTxMB/47 
  Calls: 
FlexCAN_GetMsgBuff/123 (FlexCAN_GetMsgBuff) @06ec28c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_LockRxMsgBuff/122 (FlexCAN_LockRxMsgBuff) @06ec27e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_SetTxMsgBuff/121 (FlexCAN_SetTxMsgBuff) @06ec2460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_GetMsgBuffRegion/120 (FlexCAN_GetMsgBuffRegion) @06ec2380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_AbortRxTransfer/51 FlexCAN_AbortRxTransfer/51 FlexCAN_AbortTxTransfer/50 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_GetMbPayloadSize/119 (FlexCAN_GetMbPayloadSize) @06ec22a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_IsMbOutOfRange/118 (FlexCAN_IsMbOutOfRange) @06ec2000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRxMb/54 FlexCAN_StartSendData/44 FlexCAN_StartRxMessageBufferData/43 
  Calls: 
FlexCAN_ReadRxFifo/117 (FlexCAN_ReadRxFifo) @06e9ed20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerRxFIFO/48 
  Calls: 
FlexCAN_SetMsgBuffIntCmd/116 (FlexCAN_SetMsgBuffIntCmd) @06e9ea80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_CompleteRxMessageFifoData/62 FlexCAN_CompleteRxMessageFifoData/62 FlexCAN_CompleteRxMessageFifoData/62 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_Ip_Receive/55 FlexCAN_Ip_Send/53 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartRxMessageFifoData/45 FlexCAN_StartRxMessageFifoData/45 FlexCAN_StartRxMessageFifoData/45 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: 
OsIf_GetElapsed/115 (OsIf_GetElapsed) @06e9e9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_AbortTxTransfer/50 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: 
OsIf_GetCounter/114 (OsIf_GetCounter) @06e9e8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_AbortTxTransfer/50 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: 
OsIf_MicrosToTicks/113 (OsIf_MicrosToTicks) @06e9e7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_AbortTxTransfer/50 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: 
FlexCAN_ConfigCtrlOptions/112 (FlexCAN_ConfigCtrlOptions) @06e9e2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/41 
  Calls: 
FlexCAN_IsFDAvailable/111 (FlexCAN_IsFDAvailable) @06e9e1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_SetRegDefaultVal/36 FlexCAN_Ip_Init_Privileged/52 FlexCAN_InitController/41 
  Calls: 
FlexCAN_Init/110 (FlexCAN_Init) @06e9e0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/41 
  Calls: 
FlexCAN_SetMaxMsgBuffNum/109 (FlexCAN_SetMaxMsgBuffNum) @06e99380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/40 
  Calls: 
FlexCAN_SetPayloadSize/108 (FlexCAN_SetPayloadSize) @06e990e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/40 
  Calls: 
FlexCAN_Disable/107 (FlexCAN_Disable) @06e99ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 FlexCAN_Ip_SetRxMb15Mask_Privileged/101 FlexCAN_Ip_SetRxMb14Mask_Privileged/100 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetRxMaskType_Privileged/84 FlexCAN_Ip_SetStopMode_Privileged/83 FlexCAN_Ip_Deinit_Privileged/76 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 FlexCAN_Ip_SetRxIndividualMask_Privileged/74 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 FlexCAN_Ip_ConfigRxFifo_Privileged/59 FlexCAN_InitController/41 FlexCAN_InitController/41 FlexCAN_InitCtroll/40 FlexCAN_InitCtroll/40 
  Calls: 
FlexCAN_EnterFreezeMode/106 (FlexCAN_EnterFreezeMode) @06e99e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStopMode_Privileged/83 FlexCAN_Ip_Deinit_Privileged/76 FlexCAN_Ip_EnterFreezeMode_Privileged/72 FlexCAN_InitController/41 FlexCAN_InitController/41 FlexCAN_InitCtroll/40 FlexCAN_InitCtroll/40 
  Calls: 
FlexCAN_EnableRxFifo/105 (FlexCAN_EnableRxFifo) @06e99c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitRxFifo/39 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery/104 (FlexCAN_Ip_ManualBusOffRecovery) @06e997e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/115 OsIf_GetCounter/114 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 DevAssert/0 OsIf_MicrosToTicks/113 
FlexCAN_Ip_GetListenOnlyMode/103 (FlexCAN_Ip_GetListenOnlyMode) @06e99540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsListenOnlyModeEnabled/20 
FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (FlexCAN_Ip_SetListenOnlyMode_Privileged) @06e992a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 FlexCAN_SetListenOnlyMode/5 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (FlexCAN_Ip_SetRxMb15Mask_Privileged) @06e99000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (FlexCAN_Ip_SetRxMb14Mask_Privileged) @06d1ab60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_AbortTransfer/99 (FlexCAN_Ip_AbortTransfer) @06d1a620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_AbortRxTransfer/51 FlexCAN_AbortTxTransfer/50 FLEXCAN_ClearMsgBuffIntCmd/125 DevAssert/0 DevAssert/0 
FlexCAN_Ip_SetErrorInt_Privileged/98 (FlexCAN_Ip_SetErrorInt_Privileged) @06d1a0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 DevAssert/0 FlexCAN_SetErrIntCmd/147 FlexCAN_IsFreezeMode/33 FlexCAN_SetErrIntCmd/147 FlexCAN_IsFreezeMode/33 FlexCAN_SetErrIntCmd/147 FlexCAN_SetErrIntCmd/147 FlexCAN_SetErrIntCmd/147 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_DisableInterrupts_Privileged/97 (FlexCAN_Ip_DisableInterrupts_Privileged) @06d1ad20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_DisableInterrupts/146 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_EnableInterrupts_Privileged/96 (FlexCAN_Ip_EnableInterrupts_Privileged) @06d1aa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_EnableInterrupts/145 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_ClearBuffStatusFlag/95 (FlexCAN_Ip_ClearBuffStatusFlag) @06d1a7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 DevAssert/0 
FlexCAN_Ip_GetBuffStatusFlag/94 (FlexCAN_Ip_GetBuffStatusFlag) @06d1a540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetBuffStatusFlag/8 DevAssert/0 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @06d1a2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/144 FlexCAN_SetTxArbitrationStartDelay/34 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/143 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SetTDCOffset_Privileged/92 (FlexCAN_Ip_SetTDCOffset_Privileged) @06d1a000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/142 FlexCAN_SetTDCOffset/2 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/141 FlexCAN_IsFreezeMode/33 DevAssert/0 FlexCAN_IsFDAvailable/111 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_GetBitrateFD/91 (FlexCAN_Ip_GetBitrateFD) @06d13b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetFDTimeSegments/15 DevAssert/0 DevAssert/0 
FlexCAN_Ip_SetBitrateCbt_Privileged/90 (FlexCAN_Ip_SetBitrateCbt_Privileged) @06d13620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/140 FlexCAN_SetFDTimeSegments/10 FlexCAN_SetFDEnabled/4 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/139 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsFDEnabled/19 FlexCAN_IsEnabled/3 DevAssert/0 DevAssert/0 
FlexCAN_Ip_GetTDCValue/89 (FlexCAN_Ip_GetTDCValue) @06d130e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_Ip_GetTDCFail/88 (FlexCAN_Ip_GetTDCFail) @06d13d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_Ip_ClearTDCFail/87 (FlexCAN_Ip_ClearTDCFail) @06d13a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/138 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/137 DevAssert/0 
FlexCAN_Ip_GetBitrate/86 (FlexCAN_Ip_GetBitrate) @06d137e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetTimeSegments/14 FlexCAN_GetExtendedTimeSegments/13 FlexCAN_IsExCbtEnabled/16 DevAssert/0 DevAssert/0 
FlexCAN_Ip_SetBitrate_Privileged/85 (FlexCAN_Ip_SetBitrate_Privileged) @06d13540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/136 FlexCAN_SetTimeSegments/11 FlexCAN_SetExtendedTimeSegments/12 FlexCAN_IsExCbtEnabled/16 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/135 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 DevAssert/0 
FlexCAN_Ip_SetRxMaskType_Privileged/84 (FlexCAN_Ip_SetRxMaskType_Privileged) @06d132a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/134 FlexCAN_SetRxMaskType/35 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/133 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SetStopMode_Privileged/83 (FlexCAN_Ip_SetStopMode_Privileged) @06d13000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_EnterFreezeMode/106 DevAssert/0 
FlexCAN_Ip_SetStartMode_Privileged/82 (FlexCAN_Ip_SetStartMode_Privileged) @06d07b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/130 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/132 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/131 DevAssert/0 
FlexCAN_Ip_GetStartMode_Privileged/81 (FlexCAN_Ip_GetStartMode_Privileged) @06d07620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/80 (FlexCAN_Ip_GetStopMode_Privileged) @06d070e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/79 (FlexCAN_Ip_MainFunctionWrite) @06d07d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_UnlockRxMsgBuff/6 FlexCAN_GetMsgBuffTimestamp/124 FlexCAN_GetBuffStatusFlag/8 DevAssert/0 
FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @06d07a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
   Indirect call
FlexCAN_Ip_MainFunctionRead/77 (FlexCAN_Ip_MainFunctionRead) @06d077e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IRQHandlerRxMB/46 FlexCAN_GetBuffStatusFlag/8 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetBuffStatusFlag/8 DevAssert/0 DevAssert/0 
FlexCAN_Ip_Deinit_Privileged/76 (FlexCAN_Ip_Deinit_Privileged) @06d07540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_SetRegDefaultVal/36 FlexCAN_EnterFreezeMode/106 DevAssert/0 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @06d072a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_SetRxFifoGlobalMask/1 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @06d07000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_SetRxIndividualMask/32 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_ExitFreezeMode_Privileged/73 (FlexCAN_Ip_ExitFreezeMode_Privileged) @06cfab60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/130 
FlexCAN_Ip_EnterFreezeMode_Privileged/72 (FlexCAN_Ip_EnterFreezeMode_Privileged) @06cfa620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_EnterFreezeMode/106 
FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (FlexCAN_Ip_SetRxMbGlobalMask_Privileged) @06cfa0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_SetRxMsgBuffGlobalMask/31 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_SendBlocking/70 (FlexCAN_Ip_SendBlocking) @06cfad20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetBuffStatusFlag/8 OsIf_GetElapsed/115 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 FlexCAN_GetMsgBuffRegion/120 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetBuffStatusFlag/8 OsIf_GetElapsed/115 OsIf_GetCounter/114 FlexCAN_StartSendData/44 DevAssert/0 DevAssert/0 OsIf_MicrosToTicks/113 
FlexCAN_BusOff_IRQHandler/69 (FlexCAN_BusOff_IRQHandler) @06cfaa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
   Indirect call
   Indirect call
   Indirect call
FlexCAN_Error_IRQHandler/68 (FlexCAN_Error_IRQHandler) @06cfa7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
   Indirect call
   Indirect call
FlexCAN_Ip_GetControllerRxErrorCounter/67 (FlexCAN_Ip_GetControllerRxErrorCounter) @06cfa540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_Ip_GetControllerTxErrorCounter/66 (FlexCAN_Ip_GetControllerTxErrorCounter) @06cfa2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_Ip_GetErrorStatus/65 (FlexCAN_Ip_GetErrorStatus) @06cfa000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_Ip_ClearErrorStatus/64 (FlexCAN_Ip_ClearErrorStatus) @06cebb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
FlexCAN_IRQHandler/63 (FlexCAN_IRQHandler) @06ceb620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_ProcessSpuriousInterruptMB/49 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetMsgBuffIntStatusFlag/30 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetMsgBuffIntStatusFlag/30 FlexCAN_GetMsgBuffIntStatusFlag/30 DevAssert/0 DevAssert/0 
FlexCAN_CompleteRxMessageFifoData/62 (FlexCAN_CompleteRxMessageFifoData) @06ceb0e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandlerRxFIFO/48 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 DevAssert/0 
FlexCAN_Ip_GetTransferStatus/61 (FlexCAN_Ip_GetTransferStatus) @06cebd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 DevAssert/0 
FlexCAN_Ip_ConfigRemoteResponseMb/60 (FlexCAN_Ip_ConfigRemoteResponseMb) @06ceba80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetTxMsgBuff/121 FlexCAN_GetMsgBuffRegion/120 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_IsMbOutOfRange/118 DevAssert/0 FlexCAN_GetMbPayloadSize/119 DevAssert/0 DevAssert/0 DevAssert/0 
FlexCAN_Ip_ConfigRxFifo_Privileged/59 (FlexCAN_Ip_ConfigRxFifo_Privileged) @06ceb7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/107 FlexCAN_SetRxFifoFilter/129 FlexCAN_IsFreezeMode/33 FlexCAN_Enable/128 FlexCAN_IsEnabled/3 DevAssert/0 
FlexCAN_Ip_RxFifoBlocking/58 (FlexCAN_Ip_RxFifoBlocking) @06ceb540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_StartRxMessageFifoData/45 DevAssert/0 
FlexCAN_Ip_RxFifo/57 (FlexCAN_Ip_RxFifo) @06ceb2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_StartRxMessageFifoData/45 DevAssert/0 
FlexCAN_Ip_ReceiveBlocking/56 (FlexCAN_Ip_ReceiveBlocking) @06ceb000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 OsIf_GetElapsed/115 FlexCAN_IRQHandlerRxMB/46 FlexCAN_GetBuffStatusFlag/8 OsIf_GetCounter/114 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_StartRxMessageBufferData/43 DevAssert/0 OsIf_MicrosToTicks/113 
FlexCAN_Ip_Receive/55 (FlexCAN_Ip_Receive) @06cdab60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_StartRxMessageBufferData/43 DevAssert/0 
FlexCAN_Ip_ConfigRxMb/54 (FlexCAN_Ip_ConfigRxMb) @06cda620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetRxMsgBuff/127 FlexCAN_SetRxMsgBuff/127 FlexCAN_SetRxMsgBuff/127 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_IsMbOutOfRange/118 DevAssert/0 DevAssert/0 
FlexCAN_Ip_Send/53 (FlexCAN_Ip_Send) @06cda0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_StartSendData/44 FlexCAN_IsListenOnlyModeEnabled/20 DevAssert/0 DevAssert/0 
FlexCAN_Ip_Init_Privileged/52 (FlexCAN_Ip_Init_Privileged) @06cdad20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetOperationMode/126 FlexCAN_SetTimeSegments/11 FlexCAN_SetFDTimeSegments/10 FlexCAN_SetExtendedTimeSegments/12 FlexCAN_EnableExtCbt/17 FlexCAN_InitController/41 DevAssert/0 FlexCAN_IsFDAvailable/111 DevAssert/0 DevAssert/0 
FlexCAN_AbortRxTransfer/51 (FlexCAN_AbortRxTransfer) @06cdaa80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/99 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetMsgBuffRegion/120 FLEXCAN_ClearMsgBuffIntCmd/125 FlexCAN_GetMsgBuffRegion/120 RxFifoOcuppiedLastMsgBuff/21 
FlexCAN_AbortTxTransfer/50 (FlexCAN_AbortTxTransfer) @06cda7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/99 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetBuffStatusFlag/8 OsIf_GetElapsed/115 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 FlexCAN_GetMsgBuffRegion/120 
FlexCAN_ProcessSpuriousInterruptMB/49 (FlexCAN_ProcessSpuriousInterruptMB) @06cda540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/63 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetBuffStatusImask/9 FlexCAN_GetBuffStatusFlag/8 
FlexCAN_IRQHandlerRxFIFO/48 (FlexCAN_IRQHandlerRxFIFO) @06cda2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionRead/77 FlexCAN_IRQHandler/63 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_CompleteRxMessageFifoData/62 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_ReadRxFifo/117 
   Indirect call
   Indirect call
   Indirect call
FlexCAN_IRQHandlerTxMB/47 (FlexCAN_IRQHandlerTxMB) @06cda000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandler/63 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_UnlockRxMsgBuff/6 FlexCAN_GetMsgBuffTimestamp/124 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_UnlockRxMsgBuff/6 FlexCAN_GetMsgBuff/123 FlexCAN_LockRxMsgBuff/122 
   Indirect call
FlexCAN_IRQHandlerRxMB/46 (FlexCAN_IRQHandlerRxMB) @06cc3b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_MainFunctionRead/77 FlexCAN_IRQHandler/63 FlexCAN_Ip_ReceiveBlocking/56 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_UnlockRxMsgBuff/6 FlexCAN_GetMsgBuffRegion/120 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_GetMsgBuff/123 FlexCAN_LockRxMsgBuff/122 
   Indirect call
FlexCAN_StartRxMessageFifoData/45 (FlexCAN_StartRxMessageFifoData) @06cc3620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/58 FlexCAN_Ip_RxFifo/57 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 DevAssert/0 
FlexCAN_StartSendData/44 (FlexCAN_StartSendData) @06cc30e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_Send/53 
  Calls: FlexCAN_SetTxMsgBuff/121 FlexCAN_GetMsgBuffRegion/120 FlexCAN_ClearMsgBuffIntStatusFlag/7 FlexCAN_IsMbOutOfRange/118 DevAssert/0 FlexCAN_GetMbPayloadSize/119 DevAssert/0 DevAssert/0 
FlexCAN_StartRxMessageBufferData/43 (FlexCAN_StartRxMessageBufferData) @06cc3d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_Ip_Receive/55 
  Calls: FlexCAN_IsMbOutOfRange/118 DevAssert/0 
FlexCAN_ProccessLegacyRxFIFO/42 (FlexCAN_ProccessLegacyRxFIFO) @06cc3a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/58 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 OsIf_GetElapsed/115 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetBuffStatusFlag/8 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 
FlexCAN_InitController/41 (FlexCAN_InitController) @06cc37e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_Init_Privileged/52 
  Calls: FlexCAN_InitCtroll/40 FlexCAN_ConfigCtrlOptions/112 FlexCAN_SetFDEnabled/4 FlexCAN_IsFDAvailable/111 FlexCAN_Disable/107 FlexCAN_EnterFreezeMode/106 FlexCAN_Init/110 FlexCAN_SetClkSrc/29 FlexCAN_Disable/107 FlexCAN_EnterFreezeMode/106 FlexCAN_IsEnabled/3 
FlexCAN_InitCtroll/40 (FlexCAN_InitCtroll) @06cc3540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitController/41 
  Calls: FlexCAN_Disable/107 FlexCAN_EnterFreezeMode/106 FlexCAN_SetMaxMsgBuffNum/109 FlexCAN_SetPayloadSize/108 FlexCAN_Disable/107 FlexCAN_EnterFreezeMode/106 FlexCAN_InitRxFifo/39 FlexCAN_SetSelfReception/18 
FlexCAN_InitRxFifo/39 (FlexCAN_InitRxFifo) @06cc32a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitCtroll/40 
  Calls: FlexCAN_EnableRxFifo/105 
Flexcan_Ip_apxState/38 (Flexcan_Ip_apxState) @06c94558
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_ProccessLegacyRxFIFO/42 (read)FlexCAN_IRQHandlerRxFIFO/48 (read)FlexCAN_StartRxMessageBufferData/43 (read)FlexCAN_StartSendData/44 (read)FlexCAN_StartRxMessageFifoData/45 (read)FlexCAN_IRQHandlerRxMB/46 (read)FlexCAN_IRQHandlerTxMB/47 (read)FlexCAN_AbortTxTransfer/50 (read)FlexCAN_AbortRxTransfer/51 (read)FlexCAN_Ip_Init_Privileged/52 (write)FlexCAN_Ip_Send/53 (read)FlexCAN_Ip_ConfigRxMb/54 (read)FlexCAN_Ip_Receive/55 (read)FlexCAN_Ip_ReceiveBlocking/56 (read)FlexCAN_Ip_ConfigRemoteResponseMb/60 (read)FlexCAN_Ip_GetTransferStatus/61 (read)FlexCAN_CompleteRxMessageFifoData/62 (read)FlexCAN_IRQHandler/63 (read)FlexCAN_ProcessSpuriousInterruptMB/49 (read)FlexCAN_Error_IRQHandler/68 (read)FlexCAN_BusOff_IRQHandler/69 (read)FlexCAN_Ip_SendBlocking/70 (read)FlexCAN_Ip_Deinit_Privileged/76 (write)FlexCAN_Ip_MainFunctionRead/77 (read)FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (read)FlexCAN_Ip_MainFunctionWrite/79 (read)FlexCAN_Ip_EnableInterrupts_Privileged/96 (read)FlexCAN_Ip_DisableInterrupts_Privileged/97 (read)FlexCAN_Ip_AbortTransfer/99 (read)
  Availability: available
  Varpool flags:
Flexcan_Ip_apxBase/37 (Flexcan_Ip_apxBase) @06c944c8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_ProccessLegacyRxFIFO/42 (read)FlexCAN_IRQHandlerRxFIFO/48 (read)FlexCAN_StartRxMessageBufferData/43 (read)FlexCAN_StartSendData/44 (read)FlexCAN_StartRxMessageFifoData/45 (read)FlexCAN_IRQHandlerRxMB/46 (read)FlexCAN_IRQHandlerTxMB/47 (read)FlexCAN_AbortTxTransfer/50 (read)FlexCAN_AbortRxTransfer/51 (read)FlexCAN_Ip_Init_Privileged/52 (read)FlexCAN_Ip_Send/53 (read)FlexCAN_Ip_ConfigRxMb/54 (read)FlexCAN_Ip_Receive/55 (read)FlexCAN_Ip_ReceiveBlocking/56 (read)FlexCAN_Ip_ConfigRxFifo_Privileged/59 (read)FlexCAN_Ip_ConfigRemoteResponseMb/60 (read)FlexCAN_CompleteRxMessageFifoData/62 (read)FlexCAN_IRQHandler/63 (read)FlexCAN_ProcessSpuriousInterruptMB/49 (read)FlexCAN_Ip_ClearErrorStatus/64 (read)FlexCAN_Ip_GetErrorStatus/65 (read)FlexCAN_Ip_GetControllerTxErrorCounter/66 (read)FlexCAN_Ip_GetControllerRxErrorCounter/67 (read)FlexCAN_Error_IRQHandler/68 (read)FlexCAN_BusOff_IRQHandler/69 (read)FlexCAN_Ip_SendBlocking/70 (read)FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (read)FlexCAN_Ip_EnterFreezeMode_Privileged/72 (read)FlexCAN_Ip_ExitFreezeMode_Privileged/73 (read)FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (read)FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (read)FlexCAN_Ip_Deinit_Privileged/76 (read)FlexCAN_Ip_MainFunctionRead/77 (read)FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (read)FlexCAN_Ip_MainFunctionWrite/79 (read)FlexCAN_Ip_GetStopMode_Privileged/80 (read)FlexCAN_Ip_GetStartMode_Privileged/81 (read)FlexCAN_Ip_SetStartMode_Privileged/82 (read)FlexCAN_Ip_SetStopMode_Privileged/83 (read)FlexCAN_Ip_SetRxMaskType_Privileged/84 (read)FlexCAN_Ip_SetBitrate_Privileged/85 (read)FlexCAN_Ip_GetBitrate/86 (read)FlexCAN_Ip_ClearTDCFail/87 (read)FlexCAN_Ip_GetTDCFail/88 (read)FlexCAN_Ip_GetTDCValue/89 (read)FlexCAN_Ip_SetBitrateCbt_Privileged/90 (read)FlexCAN_Ip_GetBitrateFD/91 (read)FlexCAN_Ip_SetTDCOffset_Privileged/92 (read)FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (read)FlexCAN_Ip_GetBuffStatusFlag/94 (read)FlexCAN_Ip_ClearBuffStatusFlag/95 (read)FlexCAN_Ip_EnableInterrupts_Privileged/96 (read)FlexCAN_Ip_DisableInterrupts_Privileged/97 (read)FlexCAN_Ip_SetErrorInt_Privileged/98 (read)FlexCAN_Ip_AbortTransfer/99 (read)FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (read)FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (read)FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (read)FlexCAN_Ip_GetListenOnlyMode/103 (read)FlexCAN_Ip_ManualBusOffRecovery/104 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_SetRegDefaultVal/36 (FlexCAN_SetRegDefaultVal) @06df4d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_Deinit_Privileged/76 
  Calls: FlexCAN_IsFDAvailable/111 
FlexCAN_SetRxMaskType/35 (FlexCAN_SetRxMaskType) @06df49a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 
  Calls: 
FlexCAN_SetTxArbitrationStartDelay/34 (FlexCAN_SetTxArbitrationStartDelay) @06df4540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 
  Calls: 
FlexCAN_IsFreezeMode/33 (FlexCAN_IsFreezeMode) @06df41c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 FlexCAN_Ip_SetRxMb15Mask_Privileged/101 FlexCAN_Ip_SetRxMb14Mask_Privileged/100 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetRxMaskType_Privileged/84 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 FlexCAN_Ip_SetRxIndividualMask_Privileged/74 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 FlexCAN_Ip_ConfigRxFifo_Privileged/59 
  Calls: 
FlexCAN_SetRxIndividualMask/32 (FlexCAN_SetRxIndividualMask) @06defee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxIndividualMask_Privileged/74 
  Calls: 
FlexCAN_SetRxMsgBuffGlobalMask/31 (FlexCAN_SetRxMsgBuffGlobalMask) @06defc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/30 (FlexCAN_GetMsgBuffIntStatusFlag) @06def9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/63 FlexCAN_IRQHandler/63 FlexCAN_IRQHandler/63 
  Calls: 
FlexCAN_SetClkSrc/29 (FlexCAN_SetClkSrc) @06def700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitController/41 
  Calls: 
RxFifoOcuppiedLastMsgBuff/21 (RxFifoOcuppiedLastMsgBuff) @06de79a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_AbortRxTransfer/51 
  Calls: 
FlexCAN_IsListenOnlyModeEnabled/20 (FlexCAN_IsListenOnlyModeEnabled) @06de7700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetListenOnlyMode/103 FlexCAN_Ip_Send/53 
  Calls: 
FlexCAN_IsFDEnabled/19 (FlexCAN_IsFDEnabled) @06de7460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 
  Calls: 
FlexCAN_SetSelfReception/18 (FlexCAN_SetSelfReception) @06de71c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitCtroll/40 
  Calls: 
FlexCAN_EnableExtCbt/17 (FlexCAN_EnableExtCbt) @06de2d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_Init_Privileged/52 
  Calls: 
FlexCAN_IsExCbtEnabled/16 (FlexCAN_IsExCbtEnabled) @06de29a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/86 FlexCAN_Ip_SetBitrate_Privileged/85 
  Calls: 
FlexCAN_GetFDTimeSegments/15 (FlexCAN_GetFDTimeSegments) @06de2700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrateFD/91 
  Calls: 
FlexCAN_GetTimeSegments/14 (FlexCAN_GetTimeSegments) @06de2460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/86 
  Calls: 
FlexCAN_GetExtendedTimeSegments/13 (FlexCAN_GetExtendedTimeSegments) @06de21c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/86 
  Calls: 
FlexCAN_SetExtendedTimeSegments/12 (FlexCAN_SetExtendedTimeSegments) @06ddeee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_Init_Privileged/52 
  Calls: DevAssert/0 
FlexCAN_SetTimeSegments/11 (FlexCAN_SetTimeSegments) @06dde7e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_Init_Privileged/52 
  Calls: DevAssert/0 
FlexCAN_SetFDTimeSegments/10 (FlexCAN_SetFDTimeSegments) @06dde0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_Init_Privileged/52 
  Calls: DevAssert/0 
FlexCAN_GetBuffStatusImask/9 (FlexCAN_GetBuffStatusImask) @06dd89a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ProcessSpuriousInterruptMB/49 
  Calls: 
FlexCAN_GetBuffStatusFlag/8 (FlexCAN_GetBuffStatusFlag) @06dd8700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBuffStatusFlag/94 FlexCAN_Ip_MainFunctionWrite/79 FlexCAN_Ip_MainFunctionRead/77 FlexCAN_Ip_MainFunctionRead/77 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_ProcessSpuriousInterruptMB/49 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_AbortTxTransfer/50 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: 
FlexCAN_ClearMsgBuffIntStatusFlag/7 (FlexCAN_ClearMsgBuffIntStatusFlag) @06dd8460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_ClearBuffStatusFlag/95 FlexCAN_Ip_MainFunctionWrite/79 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_ProcessSpuriousInterruptMB/49 FlexCAN_IRQHandler/63 FlexCAN_IRQHandler/63 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRxMb/54 FlexCAN_AbortRxTransfer/51 FlexCAN_AbortTxTransfer/50 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartSendData/44 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_IRQHandlerRxFIFO/48 
  Calls: 
FlexCAN_UnlockRxMsgBuff/6 (FlexCAN_UnlockRxMsgBuff) @06dd81c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionWrite/79 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_SetListenOnlyMode/5 (FlexCAN_SetListenOnlyMode) @06dd5e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 
  Calls: 
FlexCAN_SetFDEnabled/4 (FlexCAN_SetFDEnabled) @06dd5a80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_InitController/41 
  Calls: 
FlexCAN_IsEnabled/3 (FlexCAN_IsEnabled) @06dd5620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 FlexCAN_Ip_SetRxMb15Mask_Privileged/101 FlexCAN_Ip_SetRxMb14Mask_Privileged/100 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_DisableInterrupts_Privileged/97 FlexCAN_Ip_EnableInterrupts_Privileged/96 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetRxMaskType_Privileged/84 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 FlexCAN_Ip_SetRxIndividualMask_Privileged/74 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 FlexCAN_Ip_ConfigRxFifo_Privileged/59 FlexCAN_InitController/41 
  Calls: 
FlexCAN_SetTDCOffset/2 (FlexCAN_SetTDCOffset) @06dd51c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 
  Calls: 
FlexCAN_SetRxFifoGlobalMask/1 (FlexCAN_SetRxFifoGlobalMask) @06dcee00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 
  Calls: 
DevAssert/0 (DevAssert) @06c77d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 FlexCAN_Ip_SetListenOnlyMode_Privileged/102 FlexCAN_Ip_SetRxMb15Mask_Privileged/101 FlexCAN_Ip_SetRxMb14Mask_Privileged/100 FlexCAN_Ip_AbortTransfer/99 FlexCAN_Ip_AbortTransfer/99 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_SetErrorInt_Privileged/98 FlexCAN_Ip_DisableInterrupts_Privileged/97 FlexCAN_Ip_EnableInterrupts_Privileged/96 FlexCAN_Ip_ClearBuffStatusFlag/95 FlexCAN_Ip_GetBuffStatusFlag/94 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_SetTDCOffset_Privileged/92 FlexCAN_Ip_GetBitrateFD/91 FlexCAN_Ip_GetBitrateFD/91 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_SetBitrateCbt_Privileged/90 FlexCAN_Ip_GetTDCValue/89 FlexCAN_Ip_GetTDCFail/88 FlexCAN_Ip_ClearTDCFail/87 FlexCAN_Ip_GetBitrate/86 FlexCAN_Ip_GetBitrate/86 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetBitrate_Privileged/85 FlexCAN_Ip_SetRxMaskType_Privileged/84 FlexCAN_Ip_SetStopMode_Privileged/83 FlexCAN_Ip_SetStartMode_Privileged/82 FlexCAN_Ip_MainFunctionWrite/79 FlexCAN_Ip_MainFunctionBusOff_Privileged/78 FlexCAN_Ip_MainFunctionRead/77 FlexCAN_Ip_MainFunctionRead/77 FlexCAN_Ip_Deinit_Privileged/76 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 FlexCAN_Ip_SetRxIndividualMask_Privileged/74 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 FlexCAN_Ip_SendBlocking/70 FlexCAN_Ip_SendBlocking/70 FlexCAN_BusOff_IRQHandler/69 FlexCAN_Error_IRQHandler/68 FlexCAN_Ip_GetControllerRxErrorCounter/67 FlexCAN_Ip_GetControllerTxErrorCounter/66 FlexCAN_Ip_GetErrorStatus/65 FlexCAN_Ip_ClearErrorStatus/64 FlexCAN_IRQHandler/63 FlexCAN_IRQHandler/63 FlexCAN_CompleteRxMessageFifoData/62 FlexCAN_Ip_GetTransferStatus/61 FlexCAN_Ip_GetTransferStatus/61 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRemoteResponseMb/60 FlexCAN_Ip_ConfigRxFifo_Privileged/59 FlexCAN_Ip_RxFifoBlocking/58 FlexCAN_Ip_RxFifo/57 FlexCAN_Ip_ReceiveBlocking/56 FlexCAN_Ip_Receive/55 FlexCAN_Ip_ConfigRxMb/54 FlexCAN_Ip_ConfigRxMb/54 FlexCAN_Ip_Send/53 FlexCAN_Ip_Send/53 FlexCAN_SetTimeSegments/11 FlexCAN_SetFDTimeSegments/10 FlexCAN_SetExtendedTimeSegments/12 FlexCAN_Ip_Init_Privileged/52 FlexCAN_Ip_Init_Privileged/52 FlexCAN_Ip_Init_Privileged/52 FlexCAN_StartRxMessageFifoData/45 FlexCAN_StartSendData/44 FlexCAN_StartSendData/44 FlexCAN_StartSendData/44 FlexCAN_StartRxMessageBufferData/43 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  Flexcan_Ip_StatusType D.8188;
  long unsigned int D.8185;

  <bb 2> :
  _1 = (int) Instance;
  Base = Flexcan_Ip_apxBase[_1];
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  RetVal = 1;
  _2 = Instance <= 2;
  DevAssert (_2);
  _3 = Base->CTRL1;
  _4 = _3 & 64;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  RetVal = 0;
  _5 = Base->ESR1;
  _6 = _5 & 32;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  _7 = Base->CTRL1;
  _8 = _7 & 4294967231;
  Base->CTRL1 = _8;
  _9 = Base->CTRL1;
  _10 = _9 | 64;
  Base->CTRL1 = _10;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  goto <bb 7>; [INV]

  <bb 5> :
  D.8185 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.8185 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  RetVal = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  _12 = Base->ESR1;
  _13 = _12 & 32;
  if (_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.8188 = RetVal;
  timeStart = {CLOBBER};

  <bb 9> :
<L10>:
  return D.8188;

}


FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.8179;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  D.8179 = FlexCAN_IsListenOnlyModeEnabled (base);

  <bb 3> :
<L0>:
  return D.8179;

}


FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8173;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  FlexCAN_SetListenOnlyMode (pBase, enable);
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8173 = result;

  <bb 13> :
<L12>:
  return D.8173;

}


FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8159;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  freeze = 0;
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  pBase->RX15MASK = mask;

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8159 = result;

  <bb 13> :
<L12>:
  return D.8159;

}


FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8145;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  freeze = 0;
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  pBase->RX14MASK = mask;

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8145 = result;

  <bb 13> :
<L12>:
  return D.8145;

}


FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.8131;
  int iftmp.8;

  <bb 2> :
  _1 = u8Instance <= 2;
  DevAssert (_1);
  if (mb_idx <= 31)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx == 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.8 = 0;

  <bb 6> :
  _2 = (_Bool) iftmp.8;
  DevAssert (_2);
  _3 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_3];
  _4 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_4];
  result = 0;
  if (mb_idx <= 31)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  _5 = (int) mb_idx;
  _6 = state->mbs[_5].state;
  if (_6 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result = 5;
  goto <bb 13>; [INV]

  <bb 9> :
  _7 = (long unsigned int) mb_idx;
  _8 = state->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase, u8Instance, _7, _8);
  _9 = (int) mb_idx;
  _10 = state->mbs[_9].state;
  if (_10 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  result = FlexCAN_AbortTxTransfer (u8Instance, mb_idx);

  <bb 11> :
  _11 = (int) mb_idx;
  _12 = state->mbs[_11].state;
  if (_12 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  FlexCAN_AbortRxTransfer (u8Instance, mb_idx);

  <bb 13> :
  D.8131 = result;

  <bb 14> :
<L13>:
  return D.8131;

}


FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8115;

  <bb 2> :
  _1 = u8Instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 5> :
  switch (type) <default: <L14> [INV], case 0: <L6> [INV], case 1: <L10> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  FlexCAN_SetErrIntCmd (pBase, 32768, enable);
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  FlexCAN_SetErrIntCmd (pBase, 16384, enable);
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  FlexCAN_SetErrIntCmd (pBase, 16385, enable);
  goto <bb 18>; [INV]

  <bb 9> :
<L6>:
  _8 = FlexCAN_IsFreezeMode (pBase);
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  result = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  FlexCAN_SetErrIntCmd (pBase, 1024, enable);

  <bb 12> :
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  _10 = FlexCAN_IsFreezeMode (pBase);
  _11 = ~_10;
  if (_11 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result = 1;
  goto <bb 16>; [INV]

  <bb 15> :
  FlexCAN_SetErrIntCmd (pBase, 2048, enable);

  <bb 16> :
  goto <bb 18>; [INV]

  <bb 17> :
<L14>:
  DevAssert (0);

  <bb 18> :
  if (disabled != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  result = status;

  <bb 21> :
  D.8115 = result;

  <bb 22> :
<L21>:
  return D.8115;

}


FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.8099;

  <bb 2> :
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  result = 1;
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = u8Instance <= 2;
  DevAssert (_3);
  _4 = FlexCAN_IsEnabled (pBase);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_DisableInterrupts (pBase);
  state->isIntActive = 0;
  result = 0;

  <bb 4> :
  D.8099 = result;

  <bb 5> :
<L2>:
  return D.8099;

}


FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.8095;

  <bb 2> :
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  result = 1;
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = u8Instance <= 2;
  DevAssert (_3);
  _4 = FlexCAN_IsEnabled (pBase);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_EnableInterrupts (pBase, u8Instance);
  state->isIntActive = 1;
  result = 0;

  <bb 4> :
  D.8095 = result;

  <bb 5> :
<L2>:
  return D.8095;

}


FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = (long unsigned int) msgBuffIdx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _3);
  return;

}


FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  boolean D.8091;

  <bb 2> :
  returnResult = 1;
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = (long unsigned int) msgBuffIdx;
  _4 = FlexCAN_GetBuffStatusFlag (pBase, _3);
  returnResult = _4 == 1;
  D.8091 = returnResult;

  <bb 3> :
<L0>:
  return D.8091;

}


FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8089;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  FlexCAN_SetTxArbitrationStartDelay (pBase, value);
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8089 = result;

  <bb 13> :
<L12>:
  return D.8089;

}


FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8073;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  _8 = FlexCAN_IsFDAvailable (pBase);
  _9 = _8;
  DevAssert (_9);
  freeze = FlexCAN_IsFreezeMode (pBase);
  _10 = ~freeze;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  FlexCAN_SetTDCOffset (pBase, enable, offset);
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8073 = result;

  <bb 13> :
<L12>:
  return D.8073;

}


FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.8059;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = bitrate != 0B;
  DevAssert (_2);
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  enhCbt = 0;
  FlexCAN_GetFDTimeSegments (pBase, bitrate);
  D.8059 = enhCbt;

  <bb 3> :
<L0>:
  return D.8059;

}


FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean freeze;
  boolean fd_enable;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8055;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = bitrate != 0B;
  DevAssert (_2);
  result = 0;
  status = 0;
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = (int) _4;
  _6 = _5 != 0;
  _7 = ~_6;
  _8 = (int) _7;
  disabled = (boolean) _8;
  fd_enable = FlexCAN_IsFDEnabled (pBase);
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _9 = ~fd_enable;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _10 = ~freeze;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (result == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  result = 1;

  <bb 8> :
  if (result == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  FlexCAN_SetFDEnabled (pBase, fd_enable, bitRateSwitch);
  FlexCAN_SetFDTimeSegments (pBase, bitrate);
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 10> :
  if (disabled != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  result = status;

  <bb 13> :
  D.8055 = result;

  <bb 14> :
<L12>:
  return D.8055;

}


FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  uint8 D.8041;

  <bb 2> :
  value = 0;
  _1 = u8Instance <= 2;
  DevAssert (_1);
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = pBase->FDCTRL;
  _4 = (unsigned char) _3;
  value = _4 & 63;
  D.8041 = value;

  <bb 3> :
<L0>:
  return D.8041;

}


FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  boolean D.8039;

  <bb 2> :
  value = 0;
  _1 = u8Instance <= 2;
  DevAssert (_1);
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = pBase->FDCTRL;
  _4 = _3 & 16384;
  value = _4 == 16384;
  D.8039 = value;

  <bb 3> :
<L0>:
  return D.8039;

}


FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  _1 = u8Instance <= 2;
  DevAssert (_1);
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  _3 = pBase->FDCTRL;
  _4 = _3 | 16384;
  pBase->FDCTRL = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}


FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.8037;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = bitrate != 0B;
  DevAssert (_2);
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  enhCbt = 0;
  _4 = FlexCAN_IsExCbtEnabled (pBase);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_GetExtendedTimeSegments (pBase, bitrate);
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_GetTimeSegments (pBase, bitrate);

  <bb 5> :
  D.8037 = enhCbt;

  <bb 6> :
<L3>:
  return D.8037;

}


FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8030;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = bitrate != 0B;
  DevAssert (_2);
  result = 0;
  status = 0;
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = (int) _4;
  _6 = _5 != 0;
  _7 = ~_6;
  _8 = (int) _7;
  disabled = (boolean) _8;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _9 = ~freeze;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  _10 = FlexCAN_IsExCbtEnabled (pBase);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_SetExtendedTimeSegments (pBase, bitrate);
  goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_SetTimeSegments (pBase, bitrate);

  <bb 11> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 12> :
  if (disabled != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result = status;

  <bb 15> :
  D.8030 = result;

  <bb 16> :
<L15>:
  return D.8030;

}


FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.8010;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  FlexCAN_SetRxMaskType (pBase, type);
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.8010 = result;

  <bb 13> :
<L12>:
  return D.8010;

}


FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7996;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  status = FlexCAN_EnterFreezeMode (pBase);
  if (status == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  status = FlexCAN_Disable (pBase);

  <bb 4> :
  D.7996 = status;

  <bb 5> :
<L2>:
  return D.7996;

}


FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7992;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  _3 = pBase->MCR;
  _4 = _3 & 2147483647;
  pBase->MCR = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  D.7992 = FlexCAN_ExitFreezeMode (pBase);

  <bb 3> :
<L0>:
  return D.7992;

}


FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.7990;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = base->MCR;
  _3 = _2 & 17825792;
  D.7990 = _3 == 0;

  <bb 3> :
<L0>:
  return D.7990;

}


FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.7988;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = base->MCR;
  _3 = _2 & 1048576;
  D.7988 = _3 == 1048576;

  <bb 3> :
<L0>:
  return D.7988;

}


FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = (long unsigned int) mb_idx;
  _5 = FlexCAN_GetBuffStatusFlag (base, _4);
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = (long unsigned int) mb_idx;
  _7 = (int) mb_idx;
  _8 = FlexCAN_GetMsgBuffTimestamp (base, _6);
  state->mbs[_7].time_stamp = _8;
  FlexCAN_UnlockRxMsgBuff (base);
  _9 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _9);
  _10 = (int) mb_idx;
  state->mbs[_10].state = 0;

  <bb 4> :
  return;

}


FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  Flexcan_Ip_StatusType D.7984;

  <bb 2> :
  eRetVal = 1;
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  u32ErrStatus = 0;
  _3 = instance <= 2;
  DevAssert (_3);
  u32ErrStatus = base->ESR1;
  _4 = u32ErrStatus & 4;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _5 = state->error_callback;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = state->error_callback;
  _6 (instance, 7, u32ErrStatus, state);

  <bb 5> :
  base->ESR1 = 4;
  eRetVal = 0;

  <bb 6> :
  D.7984 = eRetVal;

  <bb 7> :
<L4>:
  return D.7984;

}


FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = mb_idx <= 31;
  DevAssert (_4);
  _5 = state->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (mb_idx <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (mb_idx == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _6 = FlexCAN_GetBuffStatusFlag (base, 5);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerRxFIFO (instance, 5);

  <bb 7> :
  goto <bb 11>; [INV]

  <bb 8> :
  _7 = (long unsigned int) mb_idx;
  _8 = FlexCAN_GetBuffStatusFlag (base, _7);
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _9 = (int) mb_idx;
  _10 = state->mbs[_9].state;
  if (_10 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _11 = (long unsigned int) mb_idx;
  FlexCAN_IRQHandlerRxMB (instance, _11);

  <bb 11> :
  return;

}


FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7964;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  result = 1;
  _2 = instance <= 2;
  DevAssert (_2);
  result = FlexCAN_EnterFreezeMode (base);
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetRegDefaultVal (base);
  FlexCAN_Disable (base);
  _3 = (int) instance;
  Flexcan_Ip_apxState[_3] = 0B;

  <bb 4> :
  D.7964 = result;

  <bb 5> :
<L2>:
  return D.7964;

}


FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7960;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_SetRxFifoGlobalMask (pBase, mask);

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.7960 = result;

  <bb 13> :
<L12>:
  return D.7960;

}


FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7946;

  <bb 2> :
  result = 0;
  status = 0;
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  freeze = 0;
  _2 = instance <= 2;
  DevAssert (_2);
  _3 = (long unsigned int) mb_idx;
  _4 = pBase->MCR;
  _5 = _4 & 127;
  if (_3 > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx > 31)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result = 4;
  goto <bb 15>; [INV]

  <bb 5> :
  _6 = FlexCAN_IsEnabled (pBase);
  _7 = (int) _6;
  _8 = _7 != 0;
  _9 = ~_8;
  _10 = (int) _9;
  disabled = (boolean) _10;
  if (disabled != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = FlexCAN_Enable (pBase);

  <bb 7> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _11 = ~freeze;
  if (_11 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (result == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  result = 1;

  <bb 10> :
  if (result == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _12 = (long unsigned int) mb_idx;
  FlexCAN_SetRxIndividualMask (pBase, _12, mask);

  <bb 12> :
  if (disabled != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result = status;

  <bb 15> :
  D.7946 = result;

  <bb 16> :
<L16>:
  return D.7946;

}


FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7928;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  D.7928 = FlexCAN_ExitFreezeMode (base);

  <bb 3> :
<L0>:
  return D.7928;

}


FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7926;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  D.7926 = FlexCAN_EnterFreezeMode (base);

  <bb 3> :
<L0>:
  return D.7926;

}


FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7924;

  <bb 2> :
  result = 0;
  status = 0;
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  freeze = 0;
  _2 = instance <= 2;
  DevAssert (_2);
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_SetRxMsgBuffGlobalMask (pBase, mask);

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.7924 = result;

  <bb 13> :
<L12>:
  return D.7924;

}


FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7909;
  long unsigned int D.7902;
  long unsigned int D.7895;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  timeStart = 0;
  timeElapsed = 0;
  _3 = timeout_ms * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_3, 0);
  uS2Ticks = 0;
  flexcan_mb_config = 0;
  flexcan_mb = 0B;
  _4 = instance <= 2;
  DevAssert (_4);
  _5 = tx_info != 0B;
  DevAssert (_5);
  result = FlexCAN_StartSendData (instance, mb_idx, tx_info, msg_id, mb_data);
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _6 = OsIf_GetCounter (0);
  timeStart = _6;
  goto <bb 6>; [INV]

  <bb 4> :
  D.7895 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7895 + timeElapsed;
  if (timeElapsed >= mS2Ticks)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  result = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = (long unsigned int) mb_idx;
  _8 = FlexCAN_GetBuffStatusFlag (base, _7);
  if (_8 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (result == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _9 = (int) mb_idx;
  _10 = state->mbs[_9].state;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  _11 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _11);
  _12 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, _12);
  flexcan_mb_config = *flexcan_mb;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config | 150994944;
  *flexcan_mb = flexcan_mb_config;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  _13 = OsIf_GetCounter (0);
  timeStart = _13;
  timeElapsed = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  D.7902 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7902 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  _14 = (long unsigned int) mb_idx;
  _15 = FlexCAN_GetBuffStatusFlag (base, _14);
  if (_15 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  flexcan_mb_config = *flexcan_mb;
  _16 = flexcan_mb_config >> 24;
  _17 = _16 & 15;
  if (_17 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result = 0;

  <bb 15> :
  _18 = flexcan_mb_config >> 24;
  _19 = _18 & 15;
  if (_19 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  result = 3;

  <bb 17> :
  _20 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _20);
  _21 = (int) mb_idx;
  state->mbs[_21].state = 0;

  <bb 18> :
  D.7909 = result;
  timeStart = {CLOBBER};

  <bb 19> :
<L21>:
  return D.7909;

}


FlexCAN_BusOff_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  u32ErrStatus = 0;
  isSpuriousInt = 1;
  _3 = instance <= 2;
  DevAssert (_3);
  if (state != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  u32ErrStatus = base->ESR1;
  _4 = u32ErrStatus & 131072;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _5 = base->CTRL1;
  _6 = _5 & 2048;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  base->ESR1 = 131072;
  _7 = state->error_callback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = state->error_callback;
  _8 (instance, 9, u32ErrStatus, state);
  u32ErrStatus = base->ESR1;

  <bb 7> :
  isSpuriousInt = 0;

  <bb 8> :
  _9 = u32ErrStatus & 65536;
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _10 = base->CTRL1;
  _11 = _10 & 1024;
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  base->ESR1 = 65536;
  _12 = state->error_callback;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _13 = state->error_callback;
  _13 (instance, 8, u32ErrStatus, state);
  u32ErrStatus = base->ESR1;

  <bb 12> :
  isSpuriousInt = 0;

  <bb 13> :
  _14 = u32ErrStatus & 4;
  if (_14 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _15 = base->CTRL1;
  _16 = _15 & 32768;
  if (_16 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  base->ESR1 = 4;
  _17 = state->error_callback;
  if (_17 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _18 = state->error_callback;
  _18 (instance, 7, u32ErrStatus, state);

  <bb 17> :
  isSpuriousInt = 0;

  <bb 18> :
  if (isSpuriousInt != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  base->ESR1 = 720900;

  <bb 20> :
  return;

}


FlexCAN_Error_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  u32ErrStatus = 0;
  isSpuriousInt = 1;
  _3 = instance <= 2;
  DevAssert (_3);
  if (state != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  u32ErrStatus = pBase->ESR1;
  _4 = u32ErrStatus & 2;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _5 = pBase->CTRL1;
  _6 = _5 & 16384;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  pBase->ESR1 = 2;
  _7 = state->error_callback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = state->error_callback;
  _8 (instance, 5, u32ErrStatus, state);
  u32ErrStatus = pBase->ESR1;

  <bb 7> :
  isSpuriousInt = 0;

  <bb 8> :
  _9 = u32ErrStatus & 1048576;
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _10 = pBase->CTRL2;
  _11 = (signed int) _10;
  if (_11 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  pBase->ESR1 = 1048576;
  _12 = state->error_callback;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _13 = state->error_callback;
  _13 (instance, 6, u32ErrStatus, state);

  <bb 12> :
  isSpuriousInt = 0;

  <bb 13> :
  if (isSpuriousInt != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  pBase->ESR1 = 3145730;

  <bb 15> :
  return;

}


FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.7853;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = instance <= 2;
  DevAssert (_2);
  _3 = base->ECR;
  _4 = _3 >> 8;
  D.7853 = (uint8) _4;

  <bb 3> :
<L0>:
  return D.7853;

}


FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.7851;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = instance <= 2;
  DevAssert (_2);
  _3 = base->ECR;
  D.7851 = (uint8) _3;

  <bb 3> :
<L0>:
  return D.7851;

}


FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint32 D.7849;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = instance <= 2;
  DevAssert (_2);
  D.7849 = base->ESR1;

  <bb 3> :
<L0>:
  return D.7849;

}


FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = instance <= 2;
  DevAssert (_2);
  base->ESR1 = error;
  return;

}


FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 mb_idx;
  boolean bIsSpuriousInt;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;

  <bb 2> :
  u32MbHandle = 0;
  flag_reg = 0;
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  bIsSpuriousInt = 1;
  mb_idx = endMbIdx;
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = endMbIdx <= 31;
  DevAssert (_4);
  if (state != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  _5 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  flag_reg = (uint32) _5;
  goto <bb 5>; [INV]

  <bb 4> :
  mb_idx = mb_idx + 4294967295;
  _6 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  flag_reg = (uint32) _6;

  <bb 5> :
  if (flag_reg == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx > startMbIdx)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (flag_reg != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  bIsSpuriousInt = 0;
  u32MbHandle = mb_idx;
  _7 = state->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_IRQHandlerRxFIFO (instance, mb_idx);
  u32MbHandle = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  _8 = state->mbs[u32MbHandle].state;
  if (_8 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  FlexCAN_IRQHandlerRxMB (instance, mb_idx);

  <bb 13> :
  _9 = state->mbs[u32MbHandle].state;
  if (_9 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_IRQHandlerTxMB (instance, mb_idx);

  <bb 15> :
  _10 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  if (_10 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _11 = state->mbs[u32MbHandle].state;
  if (_11 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);

  <bb 18> :
  if (bIsSpuriousInt != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  FlexCAN_ProcessSpuriousInterruptMB (instance, startMbIdx, endMbIdx);
  goto <bb 23>; [INV]

  <bb 20> :
  mb_idx = startMbIdx;
  goto <bb 22>; [INV]

  <bb 21> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  mb_idx = mb_idx + 1;

  <bb 22> :
  if (mb_idx <= endMbIdx)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  return;

}


FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = state->transferType;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 5, 0, _5);
  _6 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 6, 0, _6);
  _7 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 7, 0, _7);

  <bb 4> :
  state->mbs[0].pMBmessage = 0B;
  state->mbs[0].state = 0;
  return;

}


FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType D.7805;
  int iftmp.7;

  <bb 2> :
  _1 = (int) instance;
  state = Flexcan_Ip_apxState[_1];
  status = 1;
  _2 = instance <= 2;
  DevAssert (_2);
  if (mb_idx <= 31)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx == 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.7 = 0;

  <bb 6> :
  _3 = (_Bool) iftmp.7;
  DevAssert (_3);
  if (mb_idx <= 31)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _4 = (int) mb_idx;
  _5 = state->mbs[_4].state;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  status = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  status = 2;

  <bb 10> :
  D.7805 = status;

  <bb 11> :
<L9>:
  return D.7805;

}


FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7792;

  <bb 2> :
  result = 0;
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  pMbAddr = 0B;
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = tx_info != 0B;
  DevAssert (_4);
  _5 = pBase->CTRL2;
  _6 = _5 & 131072;
  _7 = _6 == 0;
  DevAssert (_7);
  _8 = tx_info->data_length;
  _9 = (unsigned char) _8;
  _10 = (long unsigned int) mb_idx;
  _11 = FlexCAN_GetMbPayloadSize (pBase, _10);
  _12 = _9 <= _11;
  DevAssert (_12);
  _13 = state->bIsLegacyFifoEn;
  _14 = state->u32MaxMbNum;
  _15 = FlexCAN_IsMbOutOfRange (pBase, mb_idx, _13, _14);
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = 4;

  <bb 4> :
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _16 = tx_info->data_length;
  cs.dataLen = _16;
  _17 = tx_info->msg_id_type;
  cs.msgIdType = _17;
  cs.code = 10;
  cs.fd_enable = 0;
  cs.enable_brs = 0;
  cs.fd_padding = 0;
  _18 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _18);
  _19 = (long unsigned int) mb_idx;
  pMbAddr = FlexCAN_GetMsgBuffRegion (pBase, _19);
  _20 = tx_info->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr, &cs, msg_id, mb_data, _20);
  _21 = tx_info->is_polling;
  _22 = ~_21;
  if (_22 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _23 = (long unsigned int) mb_idx;
  _24 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (pBase, instance, _23, 1, _24);

  <bb 7> :
  D.7792 = result;
  cs = {CLOBBER};

  <bb 8> :
<L7>:
  return D.7792;

}


FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7782;

  <bb 2> :
  _1 = instance <= 2;
  DevAssert (_1);
  result = 0;
  status = 0;
  _2 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_2];
  _3 = FlexCAN_IsEnabled (pBase);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled = (boolean) _7;
  if (disabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  freeze = FlexCAN_IsFreezeMode (pBase);
  _8 = ~freeze;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result = 1;

  <bb 7> :
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_SetRxFifoFilter (pBase, id_format, id_filter_table);

  <bb 9> :
  if (disabled != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status = FlexCAN_Disable (pBase);
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = status;

  <bb 12> :
  D.7782 = result;

  <bb 13> :
<L12>:
  return D.7782;

}


FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7768;

  <bb 2> :
  result = 0;
  _1 = instance <= 2;
  DevAssert (_1);
  result = FlexCAN_StartRxMessageFifoData (instance, data);
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = FlexCAN_ProccessLegacyRxFIFO (instance, timeout);

  <bb 4> :
  D.7768 = result;

  <bb 5> :
<L2>:
  return D.7768;

}


FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7764;

  <bb 2> :
  result = 0;
  _1 = instance <= 2;
  DevAssert (_1);
  result = FlexCAN_StartRxMessageFifoData (instance, data);
  D.7764 = result;

  <bb 3> :
<L0>:
  return D.7764;

}


FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7761;
  long unsigned int D.7747;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  _1 = u32TimeoutMs * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_1, 0);
  _2 = instance <= 2;
  DevAssert (_2);
  _3 = (int) instance;
  state = Flexcan_Ip_apxState[_3];
  _4 = (int) instance;
  base = Flexcan_Ip_apxBase[_4];
  result = FlexCAN_StartRxMessageBufferData (instance, mb_idx, data, isPolling);
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _5 = ~isPolling;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (long unsigned int) mb_idx;
  _7 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _6, 1, _7);

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  goto <bb 12>; [INV]

  <bb 7> :
  if (isPolling != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _9 = (long unsigned int) mb_idx;
  _10 = FlexCAN_GetBuffStatusFlag (base, _9);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _11 = (long unsigned int) mb_idx;
  FlexCAN_IRQHandlerRxMB (instance, _11);

  <bb 10> :
  D.7747 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7747 + timeElapsed;
  if (timeElapsed >= mS2Ticks)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  _12 = (int) mb_idx;
  _13 = state->mbs[_12].state;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (result == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _14 = ~isPolling;
  if (_14 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _15 = (long unsigned int) mb_idx;
  _16 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, _15, 0, _16);

  <bb 16> :
  if (result != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  if (result != 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  _17 = (int) mb_idx;
  _18 = state->mbs[_17].state;
  if (_18 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  result = 0;
  goto <bb 21>; [INV]

  <bb 20> :
  _19 = (int) mb_idx;
  state->mbs[_19].state = 0;
  result = 3;

  <bb 21> :
  D.7761 = result;
  timeStart = {CLOBBER};

  <bb 22> :
<L27>:
  return D.7761;

}


FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7735;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  result = FlexCAN_StartRxMessageBufferData (instance, mb_idx, data, isPolling);
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _4 = ~isPolling;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = (long unsigned int) mb_idx;
  _6 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _5, 1, _6);

  <bb 5> :
  D.7735 = result;

  <bb 6> :
<L4>:
  return D.7735;

}


FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7728;

  <bb 2> :
  eResult = 0;
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = rx_info != 0B;
  DevAssert (_4);
  _5 = state->bIsLegacyFifoEn;
  _6 = state->u32MaxMbNum;
  _7 = FlexCAN_IsMbOutOfRange (base, mb_idx, _5, _6);
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  _8 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _8);
  _9 = rx_info->data_length;
  cs.dataLen = _9;
  _10 = rx_info->msg_id_type;
  cs.msgIdType = _10;
  _11 = rx_info->fd_enable;
  cs.fd_enable = _11;
  cs.code = 15;
  _12 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _12, &cs, msg_id);
  cs.code = 0;
  _13 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _13, &cs, msg_id);
  cs.code = 4;
  _14 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _14, &cs, msg_id);

  <bb 5> :
  D.7728 = eResult;
  cs = {CLOBBER};

  <bb 6> :
<L4>:
  return D.7728;

}


FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7721;

  <bb 2> :
  result = 1;
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = tx_info != 0B;
  DevAssert (_4);
  _5 = FlexCAN_IsListenOnlyModeEnabled (base);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  result = FlexCAN_StartSendData (instance, mb_idx, tx_info, msg_id, mb_data);
  if (result == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = tx_info->is_polling;
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = (long unsigned int) mb_idx;
  _10 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _9, 1, _10);

  <bb 6> :
  D.7721 = result;

  <bb 7> :
<L6>:
  return D.7721;

}


FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7709;

  <bb 2> :
  eResult = 0;
  _1 = (int) Flexcan_Ip_u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = Flexcan_Ip_u8Instance <= 2;
  DevAssert (_2);
  _3 = Flexcan_Ip_pData != 0B;
  DevAssert (_3);
  _4 = Flexcan_Ip_pData->fd_enable;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = FlexCAN_IsFDAvailable (pBase);
  _6 = Flexcan_Ip_pData->fd_enable;
  _7 = _5 == _6;
  DevAssert (_7);

  <bb 4> :
  eResult = FlexCAN_InitController (pBase, Flexcan_Ip_pData);
  if (eResult == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _8 = Flexcan_Ip_pData->fd_enable;
  FlexCAN_EnableExtCbt (pBase, _8);
  _9 = Flexcan_Ip_pData->fd_enable;
  if (_9 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _10 = &Flexcan_Ip_pData->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase, _10);
  _11 = &Flexcan_Ip_pData->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase, _11);
  goto <bb 8>; [INV]

  <bb 7> :
  _12 = &Flexcan_Ip_pData->bitrate;
  FlexCAN_SetTimeSegments (pBase, _12);

  <bb 8> :
  _13 = Flexcan_Ip_pData->flexcanMode;
  FlexCAN_SetOperationMode (pBase, _13);
  i = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  Flexcan_Ip_pState->mbs[i].isPolling = 1;
  Flexcan_Ip_pState->mbs[i].pMBmessage = 0B;
  Flexcan_Ip_pState->mbs[i].state = 0;
  Flexcan_Ip_pState->mbs[i].time_stamp = 0;
  i = i + 1;

  <bb 10> :
  if (i <= 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _14 = Flexcan_Ip_pData->transfer_type;
  Flexcan_Ip_pState->transferType = _14;
  _15 = Flexcan_Ip_pData->Callback;
  Flexcan_Ip_pState->callback = _15;
  Flexcan_Ip_pState->callbackParam = 0B;
  _16 = Flexcan_Ip_pData->ErrorCallback;
  Flexcan_Ip_pState->error_callback = _16;
  Flexcan_Ip_pState->errorCallbackParam = 0B;
  _17 = Flexcan_Ip_pData->is_rx_fifo_needed;
  Flexcan_Ip_pState->bIsLegacyFifoEn = _17;
  _18 = Flexcan_Ip_pData->max_num_mb;
  Flexcan_Ip_pState->u32MaxMbNum = _18;
  Flexcan_Ip_pState->isIntActive = 1;
  _19 = (int) Flexcan_Ip_u8Instance;
  Flexcan_Ip_apxState[_19] = Flexcan_Ip_pState;

  <bb 12> :
  D.7709 = eResult;

  <bb 13> :
<L10>:
  return D.7709;

}


FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint32 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  val1 = 0;
  val2 = 0;
  flexcan_mb_config = 0;
  flexcan_mb = 0B;
  _3 = (int) mb_idx;
  state->mbs[_3].state = 0;
  _4 = state->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 = pBase->CTRL2;
  _6 = _5 >> 24;
  val1 = _6 & 15;
  val2 = RxFifoOcuppiedLastMsgBuff (val1);
  _7 = (long unsigned int) mb_idx;
  if (val2 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _8 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _8);
  flexcan_mb_config = *flexcan_mb;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config;
  *flexcan_mb = flexcan_mb_config;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config | 67108864;
  *flexcan_mb = flexcan_mb_config;

  <bb 5> :
  if (mb_idx == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _9 = state->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase, u8Instance, 5, _9);
  goto <bb 8>; [INV]

  <bb 7> :
  _10 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _10);
  flexcan_mb_config = *flexcan_mb;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config;
  *flexcan_mb = flexcan_mb_config;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config | 67108864;
  *flexcan_mb = flexcan_mb_config;

  <bb 8> :
  _11 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _11);
  return;

}


FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7690;
  long unsigned int D.7681;

  <bb 2> :
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  result = 0;
  timeStart = 0;
  timeElapsed = 0;
  flexcan_mb_config = 0;
  uS2Ticks = 0;
  flexcan_mb = 0B;
  _3 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _3);
  flexcan_mb_config = *flexcan_mb;
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  flexcan_mb_config = flexcan_mb_config | 150994944;
  *flexcan_mb = flexcan_mb_config;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 5>; [INV]

  <bb 3> :
  D.7681 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7681 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _5 = (long unsigned int) mb_idx;
  _6 = FlexCAN_GetBuffStatusFlag (pBase, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (result != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  flexcan_mb_config = *flexcan_mb;
  _7 = flexcan_mb_config >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result = 5;

  <bb 9> :
  _9 = flexcan_mb_config >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  result = 0;

  <bb 11> :
  _11 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _11);
  _12 = (int) mb_idx;
  state->mbs[_12].state = 0;
  D.7690 = result;
  timeStart = {CLOBBER};

  <bb 12> :
<L12>:
  return D.7690;

}


FlexCAN_ProcessSpuriousInterruptMB (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 u32MbHandle;
  uint32 mb_idx;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  mb_idx = 0;
  u32MbHandle = 0;
  mb_idx = startMbIdx;
  goto <bb 12>; [INV]

  <bb 3> :
  _3 = FlexCAN_GetBuffStatusFlag (base, mb_idx);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetBuffStatusImask (base, mb_idx);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  u32MbHandle = mb_idx;
  _5 = state->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (mb_idx <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  u32MbHandle = 0;

  <bb 8> :
  _6 = state->mbs[u32MbHandle].isPolling;
  _7 = ~_6;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  _8 = state->mbs[u32MbHandle].state;
  if (_8 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  state->mbs[u32MbHandle].state = 0;
  state->mbs[u32MbHandle].isPolling = 1;

  <bb 11> :
  mb_idx = mb_idx + 1;

  <bb 12> :
  if (mb_idx <= endMbIdx)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = state->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state->mbs[0].pMBmessage = &data;

  <bb 4> :
  switch (mb_idx) <default: <L15> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  _4 = state->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _5 = state->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base, _5);
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  state->mbs[0].state = 0;
  _6 = state->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = state->callback;
  _7 (instance, 1, 0, state);

  <bb 8> :
  _8 = state->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  state->mbs[0].isPolling = 1;
  FlexCAN_CompleteRxMessageFifoData (instance);

  <bb 10> :
  goto <bb 18>; [INV]

  <bb 11> :
<L9>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  _9 = state->callback;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _10 = state->callback;
  _10 (instance, 2, 0, state);

  <bb 13> :
  goto <bb 18>; [INV]

  <bb 14> :
<L12>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  _11 = state->callback;
  if (_11 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _12 = state->callback;
  _12 (instance, 3, 0, state);

  <bb 16> :
  goto <bb 18>; [INV]

  <bb 17> :
<L15>:

  <bb 18> :
  data = {CLOBBER};
  return;

}


FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance;
  pState = Flexcan_Ip_apxState[_2];
  bCurrentIntStat = 0;
  _3 = pState->mbs[u32MbIdx].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  FlexCAN_LockRxMsgBuff (pBase, u32MbIdx);
  FlexCAN_GetMsgBuff (pBase, u32MbIdx, &mb);
  FlexCAN_UnlockRxMsgBuff (pBase);
  _4 = mb.time_stamp;
  pState->mbs[u32MbIdx].time_stamp = _4;
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, u32MbIdx);
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase, u32MbIdx);
  pState->mbs[u32MbIdx].time_stamp = _8;
  FlexCAN_UnlockRxMsgBuff (pBase);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, u32MbIdx);

  <bb 6> :
  pState->mbs[u32MbIdx].state = 0;
  bCurrentIntStat = pState->mbs[u32MbIdx].isPolling;
  _9 = pState->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = pState->callback;
  _10 (u8Instance, 4, u32MbIdx, pState);

  <bb 8> :
  _11 = pState->mbs[u32MbIdx].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _12 = pState->mbs[u32MbIdx].isPolling;
  _13 = ~_12;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  pState->mbs[u32MbIdx].isPolling = 1;
  _14 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, u32MbIdx, 0, _14);
  goto <bb 14>; [INV]

  <bb 11> :
  _15 = ~bCurrentIntStat;
  if (_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _16 = pState->mbs[u32MbIdx].isPolling;
  if (_16 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _17 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, u32MbIdx, 0, _17);

  <bb 14> :
  mb = {CLOBBER};
  return;

}


FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  volatile uint32 * flexcan_mb;
  boolean bIsCriticalSectionNeeded;
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  bCurrentIntStat = 0;
  _3 = state->mbs[mb_idx].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state->mbs[mb_idx].pMBmessage = &data;

  <bb 4> :
  bIsCriticalSectionNeeded = 0;
  _4 = state->mbs[mb_idx].isPolling;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = state->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  bIsCriticalSectionNeeded = 1;
  __asm__ __volatile__(" cpsid i");

  <bb 7> :
  FlexCAN_LockRxMsgBuff (base, mb_idx);
  _6 = state->mbs[mb_idx].pMBmessage;
  FlexCAN_GetMsgBuff (base, mb_idx, _6);
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  _7 = state->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _8 = state->mbs[mb_idx].pMBmessage;
  _9 = _8->cs;
  _10 = _9 >> 24;
  _11 = _10 & 15;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, mb_idx);
  _12 = *flexcan_mb;
  _13 = _12 & 4043309055;
  *flexcan_mb = _13;
  _14 = *flexcan_mb;
  _15 = _14 | 67108864;
  *flexcan_mb = _15;
  goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_UnlockRxMsgBuff (base);

  <bb 11> :
  if (bIsCriticalSectionNeeded != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  __asm__ __volatile__(" cpsie i");

  <bb 13> :
  state->mbs[mb_idx].state = 0;
  bCurrentIntStat = state->mbs[mb_idx].isPolling;
  _16 = state->callback;
  if (_16 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _17 = state->callback;
  _17 (instance, 0, mb_idx, state);

  <bb 15> :
  _18 = state->mbs[mb_idx].state;
  if (_18 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _19 = state->mbs[mb_idx].isPolling;
  _20 = ~_19;
  if (_20 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  state->mbs[mb_idx].isPolling = 1;
  _21 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, mb_idx, 0, _21);
  goto <bb 21>; [INV]

  <bb 18> :
  _22 = ~bCurrentIntStat;
  if (_22 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _23 = state->mbs[mb_idx].isPolling;
  if (_23 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _24 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, mb_idx, 0, _24);

  <bb 21> :
  data = {CLOBBER};
  return;

}


FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7639;

  <bb 2> :
  base = 0B;
  state = 0B;
  eResult = 0;
  _1 = instance <= 2;
  DevAssert (_1);
  _2 = (int) instance;
  base = Flexcan_Ip_apxBase[_2];
  _3 = (int) instance;
  state = Flexcan_Ip_apxState[_3];
  _4 = state->bIsLegacyFifoEn;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult = 1;
  goto <bb 10>; [INV]

  <bb 4> :
  _6 = state->mbs[0].state;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  eResult = 2;
  goto <bb 10>; [INV]

  <bb 6> :
  state->mbs[0].state = 1;
  _7 = state->transferType;
  if (_7 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  state->mbs[0].isPolling = 1;

  <bb 8> :
  state->mbs[0].pMBmessage = data;
  _8 = state->transferType;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  state->mbs[0].isPolling = 0;
  _9 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 6, 1, _9);
  _10 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 7, 1, _10);
  _11 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 5, 1, _11);

  <bb 10> :
  D.7639 = eResult;

  <bb 11> :
<L10>:
  return D.7639;

}


FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7626;

  <bb 2> :
  eResult = 0;
  _1 = (int) Flexcan_Ip_u8Instance;
  state = Flexcan_Ip_apxState[_1];
  _2 = (int) Flexcan_Ip_u8Instance;
  base = Flexcan_Ip_apxBase[_2];
  pMbAddr = 0B;
  _3 = Flexcan_Ip_u8Instance <= 2;
  DevAssert (_3);
  _4 = tx_info != 0B;
  DevAssert (_4);
  _5 = tx_info->data_length;
  _6 = (unsigned char) _5;
  _7 = (long unsigned int) mb_idx;
  _8 = FlexCAN_GetMbPayloadSize (base, _7);
  _9 = _6 <= _8;
  DevAssert (_9);
  _10 = state->bIsLegacyFifoEn;
  _11 = state->u32MaxMbNum;
  _12 = FlexCAN_IsMbOutOfRange (base, mb_idx, _10, _11);
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult = 4;
  goto <bb 10>; [INV]

  <bb 4> :
  _13 = (int) mb_idx;
  _14 = state->mbs[_13].state;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  eResult = 2;
  goto <bb 10>; [INV]

  <bb 6> :
  _15 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _15);
  _16 = (int) mb_idx;
  state->mbs[_16].state = 2;
  _17 = (int) mb_idx;
  state->mbs[_17].time_stamp = 0;
  _18 = (int) mb_idx;
  _19 = tx_info->is_polling;
  state->mbs[_18].isPolling = _19;
  _20 = (int) mb_idx;
  _21 = tx_info->is_remote;
  state->mbs[_20].isRemote = _21;
  _22 = tx_info->data_length;
  cs.dataLen = _22;
  _23 = tx_info->msg_id_type;
  cs.msgIdType = _23;
  _24 = tx_info->fd_enable;
  cs.fd_enable = _24;
  _25 = tx_info->fd_padding;
  cs.fd_padding = _25;
  _26 = tx_info->enable_brs;
  cs.enable_brs = _26;
  _27 = tx_info->is_remote;
  if (_27 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  cs.code = 28;
  goto <bb 9>; [INV]

  <bb 8> :
  cs.code = 12;

  <bb 9> :
  _28 = (long unsigned int) mb_idx;
  pMbAddr = FlexCAN_GetMsgBuffRegion (base, _28);
  FlexCAN_SetTxMsgBuff (pMbAddr, &cs, msg_id, mb_data, 0);

  <bb 10> :
  D.7626 = eResult;
  cs = {CLOBBER};

  <bb 11> :
<L10>:
  return D.7626;

}


FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7612;

  <bb 2> :
  result = 0;
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  _3 = instance <= 2;
  DevAssert (_3);
  _4 = state->bIsLegacyFifoEn;
  _5 = state->u32MaxMbNum;
  _6 = FlexCAN_IsMbOutOfRange (base, mb_idx, _4, _5);
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result = 4;
  goto <bb 7>; [INV]

  <bb 4> :
  _7 = (int) mb_idx;
  _8 = state->mbs[_7].state;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  result = 2;
  goto <bb 7>; [INV]

  <bb 6> :
  _9 = (int) mb_idx;
  state->mbs[_9].state = 1;
  _10 = (int) mb_idx;
  state->mbs[_10].pMBmessage = data;
  _11 = (int) mb_idx;
  state->mbs[_11].isPolling = isPolling;

  <bb 7> :
  D.7612 = result;

  <bb 8> :
<L6>:
  return D.7612;

}


FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7585;
  long unsigned int D.7578;

  <bb 2> :
  eResult = 0;
  _1 = (int) u8Instance;
  pState = Flexcan_Ip_apxState[_1];
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  timeStart = 0;
  timeElapsed = 0;
  _3 = u32TimeoutMs * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_3, 0);
  u32intType = 0;
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 11>; [INV]

  <bb 3> :
  _5 = pState->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  u32intType = 7;
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = FlexCAN_GetBuffStatusFlag (pBase, u32intType);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerRxFIFO (u8Instance, u32intType);

  <bb 7> :
  u32intType = u32intType + 4294967295;

  <bb 8> :
  if (u32intType > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.7578 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7578 + timeElapsed;
  if (timeElapsed >= mS2Ticks)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  eResult = 3;
  goto <bb 12>; [INV]

  <bb 11> :
  _7 = pState->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (eResult == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _9 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 5, 0, _9);
  _10 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 6, 0, _10);
  _11 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 7, 0, _11);

  <bb 15> :
  _12 = pState->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  pState->mbs[0].state = 0;
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  eResult = 0;
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  eResult = 1;

  <bb 19> :
  D.7585 = eResult;
  timeStart = {CLOBBER};

  <bb 20> :
<L21>:
  return D.7585;

}


FlexCAN_InitController (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7558;

  <bb 2> :
  eResult = 0;
  _1 = FlexCAN_IsEnabled (pBase);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  eResult = FlexCAN_EnterFreezeMode (pBase);
  if (eResult == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  eResult = FlexCAN_Disable (pBase);

  <bb 5> :
  if (eResult == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _2 = Flexcan_Ip_pData->is_pe_clock;
  FlexCAN_SetClkSrc (pBase, _2);
  _3 = pBase->MCR;
  _4 = _3 & 2147483647;
  pBase->MCR = _4;
  eResult = FlexCAN_Init (pBase);
  if (eResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_EnterFreezeMode (pBase);
  FlexCAN_Disable (pBase);
  goto <bb 11>; [INV]

  <bb 8> :
  _5 = FlexCAN_IsFDAvailable (pBase);
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _6 = Flexcan_Ip_pData->fd_enable;
  _7 = Flexcan_Ip_pData->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase, _6, _7);

  <bb 10> :
  _8 = Flexcan_Ip_pData->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase, _8);
  eResult = FlexCAN_InitCtroll (pBase, Flexcan_Ip_pData);

  <bb 11> :
  D.7558 = eResult;

  <bb 12> :
<L11>:
  return D.7558;

}


FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7541;

  <bb 2> :
  eResult = 0;
  _1 = Flexcan_Ip_pData->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetSelfReception (pBase, 0);

  <bb 4> :
  eResult = FlexCAN_InitRxFifo (pBase, Flexcan_Ip_pData);
  if (eResult != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_EnterFreezeMode (pBase);
  FlexCAN_Disable (pBase);
  goto <bb 8>; [INV]

  <bb 6> :
  _2 = &Flexcan_Ip_pData->payload;
  FlexCAN_SetPayloadSize (pBase, _2);
  _3 = Flexcan_Ip_pData->max_num_mb;
  eResult = FlexCAN_SetMaxMsgBuffNum (pBase, _3);
  if (eResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_EnterFreezeMode (pBase);
  FlexCAN_Disable (pBase);

  <bb 8> :
  D.7541 = eResult;

  <bb 9> :
<L7>:
  return D.7541;

}


FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7532;

  <bb 2> :
  eResult = 0;
  _1 = Flexcan_Ip_pData->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = Flexcan_Ip_pData->num_id_filters;
  eResult = FlexCAN_EnableRxFifo (pBase, _2);

  <bb 4> :
  D.7532 = eResult;

  <bb 5> :
<L2>:
  return D.7532;

}


FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  <bb 2> :
  _1 = FlexCAN_IsFDAvailable (base);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base->FDCBT = 0;
  base->FDCTRL = 2147500288;

  <bb 4> :
  base->IFLAG1 = 4294967295;
  base->IMASK1 = 0;
  base->CBT = 0;
  base->CTRL2 = 1048576;
  base->ESR1 = 241670;
  base->ECR = 0;
  base->TIMER = 0;
  base->CTRL1 = 0;
  base->MCR = 3633315855;
  return;

}


FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  <bb 2> :
  if (type == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = base->MCR;
  _2 = _1 & 4294901759;
  base->MCR = _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = base->MCR;
  _4 = _3 | 65536;
  base->MCR = _4;

  <bb 5> :
  return;

}


FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd;
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base->CTRL2 = _6;
  return;

}


FlexCAN_IsFreezeMode (const struct FLEXCAN_Type * base)
{
  boolean D.7784;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 16777216;
  D.7784 = _2 != 0;

  <bb 3> :
<L0>:
  return D.7784;

}


FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  base->RXIMR[msgBuffIdx] = mask;
  return;

}


FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base->RXMGMASK = Mask;
  return;

}


FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  uint8 D.7831;

  <bb 2> :
  flag = 0;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  mask = base->IMASK1;
  _1 = base->IFLAG1;
  _2 = mask & _1;
  _3 = msgBuffIdx & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag = _5 & 1;

  <bb 4> :
  D.7831 = flag;

  <bb 5> :
<L2>:
  return D.7831;

}


FlexCAN_SetClkSrc (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.1;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294959103;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1 = 0;

  <bb 5> :
  _3 = iftmp.1 | _2;
  base->CTRL1 = _3;
  return;

}


RxFifoOcuppiedLastMsgBuff (uint32 x)
{
  uint32 D.7700;

  <bb 2> :
  _1 = x + 1;
  _2 = _1 * 8;
  _3 = _2 / 4;
  D.7700 = _3 + 5;

  <bb 3> :
<L0>:
  return D.7700;

}


FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.7723;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 8;
  D.7723 = _2 != 0;

  <bb 3> :
<L0>:
  return D.7723;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.8057;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 2048;
  D.8057 = _2 != 0;

  <bb 3> :
<L0>:
  return D.8057;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.0;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 131072;

  <bb 5> :
  _3 = iftmp.0 | _2;
  base->MCR = _3;
  return;

}


FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.6;

  <bb 2> :
  _1 = base->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6 = 0;

  <bb 5> :
  _3 = iftmp.6 | _2;
  base->CBT = _3;
  return;

}


FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.8032;

  <bb 2> :
  _1 = pBase->CBT;
  _2 = (signed int) _1;
  D.8032 = _2 < 0;

  <bb 3> :
<L0>:
  return D.8032;

}


FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = base->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg->preDivider = _3;
  _4 = base->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg->propSeg = _6;
  _7 = base->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg->phaseSeg1 = _9;
  _10 = base->FDCBT;
  _11 = _10 & 7;
  timeSeg->phaseSeg2 = _11;
  _12 = base->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg->preDivider = _3;
  _4 = base->CTRL1;
  _5 = _4 & 7;
  timeSeg->propSeg = _5;
  _6 = base->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg->phaseSeg1 = _8;
  _9 = base->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg->phaseSeg2 = _11;
  _12 = base->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = base->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg->preDivider = _3;
  _4 = base->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg->propSeg = _6;
  _7 = base->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg->phaseSeg1 = _9;
  _10 = base->CBT;
  _11 = _10 & 31;
  timeSeg->phaseSeg2 = _11;
  _12 = base->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = timeSeg != 0B;
  DevAssert (_1);
  _2 = base->CBT;
  _3 = _2 & 2147483648;
  base->CBT = _3;
  _4 = base->CBT;
  _5 = timeSeg->propSeg;
  _6 = _5 << 10;
  _7 = _6 & 65535;
  _8 = timeSeg->phaseSeg2;
  _9 = _8 & 31;
  _10 = _7 | _9;
  _11 = timeSeg->phaseSeg1;
  _12 = _11 << 5;
  _13 = _12 & 992;
  _14 = _10 | _13;
  _15 = timeSeg->preDivider;
  _16 = _15 << 21;
  _17 = _16 & 2145386496;
  _18 = _14 | _17;
  _19 = timeSeg->rJumpwidth;
  _20 = _19 << 16;
  _21 = _20 & 2031616;
  _22 = _18 | _21;
  _23 = _4 | _22;
  base->CBT = _23;
  return;

}


FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = timeSeg != 0B;
  DevAssert (_1);
  _2 = base->CTRL1;
  _3 = _2 & 65528;
  base->CTRL1 = _3;
  _4 = base->CTRL1;
  _5 = timeSeg->propSeg;
  _6 = _5 & 7;
  _7 = timeSeg->phaseSeg2;
  _8 = _7 << 16;
  _9 = _8 & 458752;
  _10 = _6 | _9;
  _11 = timeSeg->phaseSeg1;
  _12 = _11 << 19;
  _13 = _12 & 3670016;
  _14 = _10 | _13;
  _15 = timeSeg->preDivider;
  _16 = _15 << 24;
  _17 = _14 | _16;
  _18 = timeSeg->rJumpwidth;
  _19 = _18 << 22;
  _20 = _19 & 12582912;
  _21 = _17 | _20;
  _22 = _4 | _21;
  base->CTRL1 = _22;
  return;

}


FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  _1 = timeSeg != 0B;
  DevAssert (_1);
  _2 = base->FDCBT;
  _3 = _2 & 3221783320;
  base->FDCBT = _3;
  _4 = base->FDCBT;
  _5 = timeSeg->propSeg;
  _6 = _5 << 10;
  _7 = _6 & 31744;
  _8 = timeSeg->phaseSeg2;
  _9 = _8 & 7;
  _10 = _7 | _9;
  _11 = timeSeg->phaseSeg1;
  _12 = _11 << 5;
  _13 = _12 & 255;
  _14 = _10 | _13;
  _15 = timeSeg->preDivider;
  _16 = _15 << 20;
  _17 = _16 & 1072693248;
  _18 = _14 | _17;
  _19 = timeSeg->rJumpwidth;
  _20 = _19 << 16;
  _21 = _20 & 458752;
  _22 = _18 | _21;
  _23 = _4 | _22;
  base->FDCBT = _23;
  return;

}


FlexCAN_GetBuffStatusImask (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 u32Imask;
  uint8 D.7847;

  <bb 2> :
  u32Imask = 0;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = base->IMASK1;
  _2 = msgBuffIdx & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx & 31;
  u32Imask = _4 >> _5;

  <bb 4> :
  D.7847 = (uint8) u32Imask;

  <bb 5> :
<L2>:
  return D.7847;

}


FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  uint8 D.7590;

  <bb 2> :
  flag = 0;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = base->IFLAG1;
  _2 = msgBuffIdx & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx & 31;
  flag = _4 >> _5;

  <bb 4> :
  D.7590 = (uint8) flag;

  <bb 5> :
<L2>:
  return D.7590;

}


FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;

  <bb 2> :
  _1 = msgBuffIdx & 31;
  flag = 1 << _1;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base->IFLAG1 = flag;

  <bb 4> :
  return;

}


FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.5;

  <bb 2> :
  vol.5 = base->TIMER;
  return;

}


FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int iftmp.9;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9 = 0;

  <bb 5> :
  _3 = iftmp.9 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int iftmp.3;
  long unsigned int iftmp.2;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 4294965247;
  if (enableFD != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.2 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2 = 0;

  <bb 5> :
  _3 = iftmp.2 | _2;
  base->MCR = _3;
  _4 = base->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.3 = 0;

  <bb 8> :
  _6 = iftmp.3 | _5;
  base->FDCTRL = _6;
  _7 = base->FDCTRL;
  _8 = _7 & 4294926591;
  base->FDCTRL = _8;
  return;

}


FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.7560;

  <bb 2> :
  _1 = pBase->MCR;
  _2 = (signed int) _1;
  D.7560 = _2 >= 0;

  <bb 3> :
<L0>:
  return D.7560;

}


FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;

  <bb 2> :
  tmp = base->FDCTRL;
  tmp = tmp & 4294926591;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tmp = tmp | 32768;
  _1 = (long unsigned int) offset;
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp = tmp | _3;

  <bb 4> :
  base->FDCTRL = tmp;
  return;

}


FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base->RXFGMASK = Mask;
  return;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  x.4_1 = x;
  if (x.4_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


